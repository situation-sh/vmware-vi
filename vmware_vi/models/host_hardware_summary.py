# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_system_identification_info import HostSystemIdentificationInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostHardwareSummary(DataObject):
    """
    This data object type summarizes hardware used by the host. 
    """ # noqa: E501
    vendor: StrictStr = Field(description="The hardware vendor identification. ")
    model: StrictStr = Field(description="The system model identification. ")
    uuid: StrictStr = Field(description="The hardware BIOS identification. ")
    other_identifying_info: Optional[List[HostSystemIdentificationInfo]] = Field(default=None, description="Other identification information.  This information may be vendor specific.  ***Since:*** VI API 2.5 ", alias="otherIdentifyingInfo")
    memory_size: StrictInt = Field(description="The physical memory size in bytes. ", alias="memorySize")
    cpu_model: StrictStr = Field(description="The CPU model. ", alias="cpuModel")
    cpu_mhz: StrictInt = Field(description="The speed of the CPU cores.  This is an average value if there are multiple speeds. The product of cpuMhz and numCpuCores is approximately equal to the sum of the MHz for all the individual cores on the host. ", alias="cpuMhz")
    num_cpu_pkgs: Annotated[int, Field(le=32767, strict=True, ge=-32768)] = Field(description="Number of physical CPU packages on the host.  Physical CPU packages are chips that contain one or more processors. Processors contained by a package are also known as CPU cores. For example, one dual-core package is comprised of one chip that contains two CPU cores. ", alias="numCpuPkgs")
    num_cpu_cores: Annotated[int, Field(le=32767, strict=True, ge=-32768)] = Field(description="Number of physical CPU cores on the host.  Physical CPU cores are the processors contained by a CPU package. ", alias="numCpuCores")
    num_cpu_threads: Annotated[int, Field(le=32767, strict=True, ge=-32768)] = Field(description="Number of physical CPU threads on the host. ", alias="numCpuThreads")
    num_nics: StrictInt = Field(description="The number of network adapters. ", alias="numNics")
    num_hbas: StrictInt = Field(description="The number of host bus adapters (HBAs). ", alias="numHBAs")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostHardwareSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostHardwareSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


