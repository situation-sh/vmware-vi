# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PerfMetricId(DataObject):
    """
    This data object type contains information that associates a performance counter with a performance metric.  When constructing this data object for the *PerfQuerySpec.metricId* property of the *PerfQuerySpec* to submit to one of the *PerformanceManager* query operations, the *PerfMetricId.instance* property supports these special characters: - An asterisk (\\*) to specify all instances of the metric for the   specified *PerfMetricId.counterId* - Double-quotes (\"\") to specify aggregated statistics 
    """ # noqa: E501
    counter_id: StrictInt = Field(description="The *ID* of the counter for the metric. ", alias="counterId")
    instance: StrictStr = Field(description="An identifier that is derived from configuration names for the device associated with the metric.  It identifies the instance of the metric with its source. This property may be empty. - For memory and aggregated statistics, this property is empty. - For host and virtual machine devices, this property contains the   name of the device, such as the name of the host-bus adapter or   the name of the virtual Ethernet adapter. For example,   &#147;mpx&#46;vmhba33&#58;C0&#58;T0&#58;L0&#148; or   &#147;vmnic0&#58;&#148; - For a CPU, this property identifies the numeric position within   the CPU core, such as 0, 1, 2, 3. - For a virtual disk, this property identifies the file type:   - DISKFILE, for virtual machine base-disk files   - SWAPFILE, for virtual machine swap files   - DELTAFILE, for virtual machine snapshot overhead files   - OTHERFILE, for all other files of a virtual machine ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PerfMetricId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PerfMetricId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


