# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.vsan_host_config_info_cluster_info import VsanHostConfigInfoClusterInfo
from vmware_vi.models.vsan_host_config_info_network_info import VsanHostConfigInfoNetworkInfo
from vmware_vi.models.vsan_host_config_info_storage_info import VsanHostConfigInfoStorageInfo
from vmware_vi.models.vsan_host_fault_domain_info import VsanHostFaultDomainInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VsanHostConfigInfo(DataObject):
    """
    The *VsanHostConfigInfo* data object contains host-specific settings for the VSAN service.  This data object is used both for specifying settings for updating the VSAN service, and as an output datatype when retrieving current VSAN service settings.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the VSAN service is currently enabled on this host.  ***Since:*** vSphere API 5.5 ")
    host_system: Optional[ManagedObjectReference] = Field(default=None, alias="hostSystem")
    cluster_info: Optional[VsanHostConfigInfoClusterInfo] = Field(default=None, alias="clusterInfo")
    storage_info: Optional[VsanHostConfigInfoStorageInfo] = Field(default=None, alias="storageInfo")
    network_info: Optional[VsanHostConfigInfoNetworkInfo] = Field(default=None, alias="networkInfo")
    fault_domain_info: Optional[VsanHostFaultDomainInfo] = Field(default=None, alias="faultDomainInfo")
    vsan_esa_enabled: Optional[StrictBool] = Field(default=None, description="Whether the vSAN ESA is enabled on this host.  This can only be enabled when vSAN is enabled on this host. ", alias="vsanEsaEnabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VsanHostConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VsanHostConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


