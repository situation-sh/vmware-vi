# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.perf_metric_id import PerfMetricId
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PerfQuerySpec(DataObject):
    """
    This data object specifies the query parameters, including the managed object reference to the target entity for statistics retrieval. - If the optional *PerfQuerySpec.intervalId* is omitted, the metrics are   returned in their originally sampled interval.   - When an *PerfQuerySpec.intervalId* is specified, the server tries to     summarize the information for the specified *PerfQuerySpec.intervalId*.     However, if that interval does not exist or has no data, the     server summarizes the information using the best interval     available. - If the range between *PerfQuerySpec.startTime* and *PerfQuerySpec.endTime* crosses   multiple sample interval periods, the result contains data from the   longest interval in the period. 
    """ # noqa: E501
    entity: ManagedObjectReference
    start_time: Optional[datetime] = Field(default=None, description="The server time from which to obtain counters.  If not specified, defaults to the first available counter. When a startTime is specified, the returned samples do not include the sample at startTime. ", alias="startTime")
    end_time: Optional[datetime] = Field(default=None, description="The time up to which statistics are retrieved.  Corresponds to server time. When endTime is omitted, the returned result includes up to the most recent metric value. When an endTime is specified, the returned samples include the sample at endTime. ", alias="endTime")
    max_sample: Optional[StrictInt] = Field(default=None, description="Limits the number of samples returned.  Defaults to the most recent sample (or samples), unless a time range is specified. Use this property only in conjunction with the *PerfQuerySpec.intervalId* to obtain real-time statistics (set the *PerfQuerySpec.intervalId* to the *PerfProviderSummary.refreshRate*. This property is ignored for historical statistics, and is not valid for the *PerformanceManager.QueryPerfComposite* operation. ", alias="maxSample")
    metric_id: Optional[List[PerfMetricId]] = Field(default=None, description="The performance metrics to be retrieved.  This property is required for the *PerformanceManager.QueryPerfComposite* operation. ", alias="metricId")
    interval_id: Optional[StrictInt] = Field(default=None, description="The interval (*PerfInterval.samplingPeriod*), in seconds, for the performance statistics&#46; For aggregated information, use one of the historical intervals for this property.  See *PerfInterval* for more information. - To obtain the greatest detail, use the provider&#146;s *PerfProviderSummary.refreshRate* for this   property. ", alias="intervalId")
    format: Optional[StrictStr] = Field(default=None, description="The format to be used while returning the statistics&#46;  See also *PerfFormat_enum*. ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PerfQuerySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PerfQuerySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


