# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List

from pydantic import Field
from vmware_vi.models.host_connect_fault import HostConnectFault
from vmware_vi.models.multiple_certificates_verify_fault_thumbprint_data import MultipleCertificatesVerifyFaultThumbprintData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MultipleCertificatesVerifyFault(HostConnectFault):
    """
    MultipleCertificatesVerifyFault is thrown by the host connect method *HostSystem.ReconnectHost_Task* as well as the methods to add a host to VirtualCenter (*Folder.AddStandaloneHost_Task* and *ClusterComputeResource.AddHost_Task*) if VirtualCenter detects that the host has different SSL certificates for different management ports.  This can occur, for example, if an ESX 2.x host has different SSL certificates for the authd service (port 902) and the Management UI port (port 443). VirtualCenter is not able to manage such hosts. To fix this issue, the user should modify the host to ensure there is only one certificate for all services. Alternatively, different certificates are allowed as long as each certificate is verifiable (trusted) by the VirtualCenter server.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    thumbprint_data: List[MultipleCertificatesVerifyFaultThumbprintData] = Field(description="The thumbprints (and associated ports) used by the services on the host.  ***Since:*** vSphere API 4.0 ", alias="thumbprintData")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MultipleCertificatesVerifyFault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MultipleCertificatesVerifyFault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


