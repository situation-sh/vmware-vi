# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.cluster_das_config_info import ClusterDasConfigInfo
from vmware_vi.models.cluster_das_vm_config_info import ClusterDasVmConfigInfo
from vmware_vi.models.cluster_drs_config_info import ClusterDrsConfigInfo
from vmware_vi.models.cluster_drs_vm_config_info import ClusterDrsVmConfigInfo
from vmware_vi.models.cluster_rule_info import ClusterRuleInfo
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterConfigInfo(DataObject):
    """
    Deprecated as of VI API 2.5, use *ClusterConfigInfoEx*.  A complete cluster configuration. 
    """ # noqa: E501
    das_config: ClusterDasConfigInfo = Field(alias="dasConfig")
    das_vm_config: Optional[List[ClusterDasVmConfigInfo]] = Field(default=None, description="List of virtual machine configurations for the vSphere HA service.  Each entry applies to one virtual machine.  If a virtual machine is not specified in this array, the service uses the default settings for that virtual machine. ", alias="dasVmConfig")
    drs_config: ClusterDrsConfigInfo = Field(alias="drsConfig")
    drs_vm_config: Optional[List[ClusterDrsVmConfigInfo]] = Field(default=None, description="List of virtual machine configurations for the VMware DRS service.  Each entry applies to one virtual machine.  If a virtual machine is not specified in this array, the service uses the default settings for that virtual machine. ", alias="drsVmConfig")
    rule: Optional[List[ClusterRuleInfo]] = Field(default=None, description="Cluster-wide rules. ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


