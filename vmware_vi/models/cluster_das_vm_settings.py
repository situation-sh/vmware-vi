# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.cluster_vm_component_protection_settings import ClusterVmComponentProtectionSettings
from vmware_vi.models.cluster_vm_tools_monitoring_settings import ClusterVmToolsMonitoringSettings
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterDasVmSettings(DataObject):
    """
    The *ClusterDasVmSettings* data object contains the HA configuration settings specified for a single virtual machine (identified by *ClusterDasVmConfigInfo*.*ClusterDasVmConfigInfo.key*) or as cluster-wide defaults *ClusterDasConfigInfo*.*ClusterDasConfigInfo.defaultVmSettings*  All fields are optional. If you set the <code>modify</code> parameter to <code>true</code> when you call *ComputeResource.ReconfigureComputeResource_Task*, an unset property has no effect on the existing property value in the cluster configuration on the Server. If you set the <code>modify</code> parameter to <code>false</code> when you reconfigure a cluster, the cluster configuration is reverted to the default values, then the new configuration values are applied.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    restart_priority: Optional[StrictStr] = Field(default=None, description="Restart priority for a virtual machine.  If not specified at either the cluster level or the virtual machine level, this will default to <code>medium</code>.  See also *ClusterDasVmSettingsRestartPriority_enum*.  ***Since:*** VI API 2.5 ", alias="restartPriority")
    restart_priority_timeout: Optional[StrictInt] = Field(default=None, description="This setting is used to specify a maximum time the lower priority VMs should wait for the higher priority VMs to be ready.  If the higher priority Vms are not ready by this time, then the lower priority VMs are restarted irrespective of the VM ready state. This timeout can be used to prevent the failover of lower priority VMs to be stuck infinitely.  This timeout is not used if ready condition is *none*  Timeout specified in seconds. To use cluster setting for a VM override, set to -1 in per-VM. setting.  ***Since:*** vSphere API 6.5 ", alias="restartPriorityTimeout")
    isolation_response: Optional[StrictStr] = Field(default=None, description="Indicates whether or not the virtual machine should be powered off if a host determines that it is isolated from the rest of the compute resource.  If not specified at either the cluster level or the virtual machine level, this will default to <code>powerOff</code>.  See also *ClusterDasVmSettingsIsolationResponse_enum*.  ***Since:*** VI API 2.5 ", alias="isolationResponse")
    vm_tools_monitoring_settings: Optional[ClusterVmToolsMonitoringSettings] = Field(default=None, alias="vmToolsMonitoringSettings")
    vm_component_protection_settings: Optional[ClusterVmComponentProtectionSettings] = Field(default=None, alias="vmComponentProtectionSettings")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterDasVmSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterDasVmSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


