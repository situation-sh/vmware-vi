# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BrowseDiagnosticLogRequestType(BaseModel):
    """
    The parameters of *DiagnosticManager.BrowseDiagnosticLog*. 
    """ # noqa: E501
    host: Optional[ManagedObjectReference] = None
    key: StrictStr = Field(description="A string key specifying the key for the log file to browse. Keys can be obtained using the queryDescriptions method. ")
    start: Optional[StrictInt] = Field(default=None, description="The line number for the first entry to be returned. If the parameter is not specified, then the operation returns with lines starting from the top of the log. ")
    lines: Optional[StrictInt] = Field(default=None, description="The number of lines to return. If not specified, then all lines are returned from the start value to the end of the file. ")
    __properties: ClassVar[List[str]] = ["host", "key", "start", "lines"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BrowseDiagnosticLogRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of host
        if self.host:
            _dict['host'] = self.host.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BrowseDiagnosticLogRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": ManagedObjectReference.from_dict(obj.get("host")) if obj.get("host") is not None else None,
            "key": obj.get("key"),
            "start": obj.get("start"),
            "lines": obj.get("lines")
        })
        return _obj


