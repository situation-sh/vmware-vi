# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_ip_config_ip_v6_address import HostIpConfigIpV6Address
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostIpConfigIpV6AddressConfiguration(DataObject):
    """
    The ipv6 address configuration  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    ip_v6_address: Optional[List[HostIpConfigIpV6Address]] = Field(default=None, description="Ipv6 adrresses configured on the interface.  The global addresses can be configured through DHCP, stateless or manual configuration. Link local addresses can be only configured with the origin set to *other*.  ***Since:*** vSphere API 4.0 ", alias="ipV6Address")
    auto_configuration_enabled: Optional[StrictBool] = Field(default=None, description="Specify if IPv6 address and routing information information be enabled or not as per RFC 2462.  ***Since:*** vSphere API 4.0 ", alias="autoConfigurationEnabled")
    dhcp_v6_enabled: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether or not DHCP (dynamic host control protocol) is enabled to obtain an ipV6 address.  If this property is set to true, an ipV6 address is configured through dhcpV6.  ***Since:*** vSphere API 4.0 ", alias="dhcpV6Enabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostIpConfigIpV6AddressConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostIpConfigIpV6AddressConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


