# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StorageDrsSpaceLoadBalanceConfig(DataObject):
    """
    Storage DRS configuration for space load balancing.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    space_threshold_mode: Optional[StrictStr] = Field(default=None, alias="spaceThresholdMode")
    space_utilization_threshold: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if space utilization on one (or more) of the datastores is higher than the specified threshold.  The valid values are in the range of 50 (i.e., 50%) to 100 (i.e., 100%). If not specified, the default value is 80%.  ***Since:*** vSphere API 5.0 ", alias="spaceUtilizationThreshold")
    free_space_threshold_gb: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if free space on one (or more) of the datastores falls below the specified threshold.  The unit is in gigabytes and the minimum value is 1GB. The maximum value is limited by the capacity of the smallest datastore in a datastore cluster. If not specified, the default value is 50GB.  ***Since:*** vSphere API 6.0 ", alias="freeSpaceThresholdGB")
    min_space_utilization_difference: Optional[StrictInt] = Field(default=None, description="Storage DRS considers making storage migration recommendations if the difference in space utilization between the source and destination datastores is higher than the specified threshold.  The valid values are in the range of 1 (i.e., 1%) to 50 (i.e., 50%). If not specified, the default value is 5%.  ***Since:*** vSphere API 5.0 ", alias="minSpaceUtilizationDifference")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StorageDrsSpaceLoadBalanceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StorageDrsSpaceLoadBalanceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


