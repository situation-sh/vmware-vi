# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class VirtualMachineToolsVersionStatusEnum(str, Enum):
    """
    Current version status of VMware Tools installed in the guest operating system.  Possible values: - `guestToolsNotInstalled`: VMware Tools has never been installed. - `guestToolsNeedUpgrade`:       Deprecated as of vSphere API 5.1 value is not reported by   toolsVersionStatus2, instead more detailed status is reported.      VMware Tools is installed, but the version is not current. - `guestToolsCurrent`: VMware Tools is installed, and the version is current. - `guestToolsUnmanaged`: VMware Tools is installed, but it is not managed by VMWare. - `guestToolsTooOld`: VMware Tools is installed, but the version is too old.      ***Since:*** vSphere API 5.0 - `guestToolsSupportedOld`: VMware Tools is installed, supported, but a newer version is available.      ***Since:*** vSphere API 5.0 - `guestToolsSupportedNew`: VMware Tools is installed, supported, and newer   than the version available on the host.      ***Since:*** vSphere API 5.0 - `guestToolsTooNew`: VMware Tools is installed, and the version is known to be   too new to work correctly with this virtual machine.      ***Since:*** vSphere API 5.0 - `guestToolsBlacklisted`: VMware Tools is installed, but the installed version is   known to have a grave bug and should be immediately upgraded.      ***Since:*** vSphere API 5.0  ***Since:*** vSphere API 4.0 
    """

    """
    allowed enum values
    """
    GUESTTOOLSNOTINSTALLED = 'guestToolsNotInstalled'
    GUESTTOOLSNEEDUPGRADE = 'guestToolsNeedUpgrade'
    GUESTTOOLSCURRENT = 'guestToolsCurrent'
    GUESTTOOLSUNMANAGED = 'guestToolsUnmanaged'
    GUESTTOOLSTOOOLD = 'guestToolsTooOld'
    GUESTTOOLSSUPPORTEDOLD = 'guestToolsSupportedOld'
    GUESTTOOLSSUPPORTEDNEW = 'guestToolsSupportedNew'
    GUESTTOOLSTOONEW = 'guestToolsTooNew'
    GUESTTOOLSBLACKLISTED = 'guestToolsBlacklisted'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineToolsVersionStatusEnum from a JSON string"""
        return cls(json.loads(json_str))


