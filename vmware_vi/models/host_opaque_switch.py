# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.dynamic_property import DynamicProperty
from vmware_vi.models.host_feature_capability import HostFeatureCapability
from vmware_vi.models.host_opaque_switch_physical_nic_zone import HostOpaqueSwitchPhysicalNicZone
from vmware_vi.models.host_virtual_nic import HostVirtualNic
from vmware_vi.models.option_value import OptionValue
from vmware_vi.models.physical_nic import PhysicalNic
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostOpaqueSwitch(DataObject):
    """
    The OpaqueSwitch contains basic information about virtual switches that are managed by a management plane outside of vSphere.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    dynamic_property: Optional[List[DynamicProperty]] = Field(default=None, description="Set of dynamic properties.  This property is optional because only the properties of an object that are unknown to a client will be part of this set. This property is not readonly just in case we want to send such properties from a client in the future. ", alias="dynamicProperty")
    key: StrictStr = Field(description="The opaque switch ID.  ***Since:*** vSphere API 5.5 ")
    name: Optional[StrictStr] = Field(default=None, description="The opaque switch name.  ***Since:*** vSphere API 5.5 ")
    pnic: Optional[List[PhysicalNic]] = Field(default=None, description="The set of physical network adapters associated with this switch.  ***Since:*** vSphere API 5.5 ")
    pnic_zone: Optional[List[HostOpaqueSwitchPhysicalNicZone]] = Field(default=None, description="The IDs of networking zones associated with this switch.  ***Since:*** vSphere API 6.0 ", alias="pnicZone")
    status: Optional[StrictStr] = Field(default=None, description="Opaque switch status.  See *OpaqueSwitchState* for valid values.  ***Since:*** vSphere API 6.0 ")
    vtep: Optional[List[HostVirtualNic]] = Field(default=None, description="List of VTEPs associated with this switch.  ***Since:*** vSphere API 6.0 ")
    extra_config: Optional[List[OptionValue]] = Field(default=None, description="Extra NSX specific properties for opaque switch.  ***Since:*** vSphere API 6.5 ", alias="extraConfig")
    feature_capability: Optional[List[HostFeatureCapability]] = Field(default=None, description="Array of host specific feature capabilities that the switch has.  ***Since:*** vSphere API 6.7 ", alias="featureCapability")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostOpaqueSwitch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostOpaqueSwitch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


