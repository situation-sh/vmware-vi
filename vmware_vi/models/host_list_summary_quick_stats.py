# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostListSummaryQuickStats(DataObject):
    """
    Basic host statistics.  Included in the host statistics are fairness scores. Fairness scores are represented in units with relative values, meaning they are evaluated relative to the scores of other hosts. They should not be thought of as having any particular absolute value. Each fairness unit represents an increment of 0.001 in a fairness score. The further the fairness score diverges from 1, the less fair the allocation. Therefore, a fairness score of 990, representing 0.990, is more fair than a fairness score of 1015, which represents 1.015. This is because 1.015 is further from 1 than 0.990. 
    """ # noqa: E501
    overall_cpu_usage: Optional[StrictInt] = Field(default=None, description="Aggregated CPU usage across all cores on the host in MHz.  This is only available if the host is connected. ", alias="overallCpuUsage")
    overall_memory_usage: Optional[StrictInt] = Field(default=None, description="Physical memory usage on the host in MB.  This is only available if the host is connected. ", alias="overallMemoryUsage")
    distributed_cpu_fairness: Optional[StrictInt] = Field(default=None, description="The fairness of distributed CPU resource allocation on the host. ", alias="distributedCpuFairness")
    distributed_memory_fairness: Optional[StrictInt] = Field(default=None, description="The fairness of distributed memory resource allocation on the host. ", alias="distributedMemoryFairness")
    available_p_mem_capacity: Optional[StrictInt] = Field(default=None, description="The available capacity in MB.  ***Since:*** vSphere API 6.7 ", alias="availablePMemCapacity")
    uptime: Optional[StrictInt] = Field(default=None, description="The system uptime of the host in seconds.  ***Since:*** vSphere API 4.1 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostListSummaryQuickStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostListSummaryQuickStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


