# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from vmware_vi.models.crypto_key_id import CryptoKeyId
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class QueryCryptoKeyStatusRequestType(BaseModel):
    """
    The parameters of *CryptoManagerKmip.QueryCryptoKeyStatus*. 
    """ # noqa: E501
    key_ids: Optional[List[CryptoKeyId]] = Field(default=None, description="\\[in\\] The Crypto Key Ids to query.  ***Since:*** vSphere API 6.5 ", alias="keyIds")
    check_key_bit_map: StrictInt = Field(description="\\[in\\] The key state to check. Supported value: 0x01. check if key data is available to VC. 0x02. check the VMs which use that key. 0x04. check the hosts using this key as host key. 0x08. Check 3rd party program which use that key. Other bits - reserved and will be igonred. ", alias="checkKeyBitMap")
    __properties: ClassVar[List[str]] = ["keyIds", "checkKeyBitMap"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of QueryCryptoKeyStatusRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in key_ids (list)
        _items = []
        if self.key_ids:
            for _item in self.key_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keyIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of QueryCryptoKeyStatusRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyIds": [CryptoKeyId.from_dict(_item) for _item in obj.get("keyIds")] if obj.get("keyIds") is not None else None,
            "checkKeyBitMap": obj.get("checkKeyBitMap")
        })
        return _obj


