# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.virtual_device_config_spec import VirtualDeviceConfigSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualDiskConfigSpec(VirtualDeviceConfigSpec):
    """
    The VirtualDiskSpec data object type encapsulates change specifications for an individual virtual disk device.  The virtual disk being added or modified must be fully specified.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    disk_move_type: Optional[StrictStr] = Field(default=None, description="Manner in which to move the virtual disk to the target datastore.  The set of possible values is described in *VirtualMachineRelocateDiskMoveOptions_enum*.  This property can only be set if *HostCapability.deltaDiskBackingsSupported* is true.  If left unset then *moveAllDiskBackingsAndDisallowSharing* is assumed.  ***Since:*** vSphere API 6.0 ", alias="diskMoveType")
    migrate_cache: Optional[StrictBool] = Field(default=None, description="Deprecated since vSphere 7.0 because vFlash Read Cache end of availability.  Manner in which to transfer the cache associated with the virtual disk to the target host.  If left unset then migrate is used when virtual flash resource on the source host is accessible and when the backing vFlash module version is compatible with the specific vFalsh module on the target host; otherwise flush is used for write back cache, or a no-op for write through cache. This setting can avoid VM migration failure due to incompatibility. If true then migrate is always used. VM migration may fail if the backing vFlash module version is incompatible with the module on the target host. If false then flush is used for write back cache. It is a no-op for write through cache. This setting can avoid VM migration failure due to incompatibility, but cache files have to be rebuilt on the target host. Default is unset.  See also *HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption*.  ***Since:*** vSphere API 5.5 ", alias="migrateCache")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualDiskConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualDiskConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


