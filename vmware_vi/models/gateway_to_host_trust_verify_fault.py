# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.gateway_to_host_connect_fault import GatewayToHostConnectFault
from vmware_vi.models.key_value import KeyValue
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GatewayToHostTrustVerifyFault(GatewayToHostConnectFault):
    """
    Deprecated not used since vSphere 6.5.  GatewayToHostTrustVerifyFault is thrown by the gateway used to communicate with a host, if it cannot establish a trusted connection to the host with the provided host verification token parameter.  The fault provides a list of opaque &lt;key,value&gt; properties, which the end user has to verify in order to trust the host and a verification token, which can be used to state that those exact properties are valid.  See also *HostGatewaySpec.trustVerificationToken*.  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    verification_token: StrictStr = Field(description="A unique verification token, that can be used to state the the listed properties are valid.  ***Since:*** vSphere API 6.0 ", alias="verificationToken")
    properties_to_verify: List[KeyValue] = Field(description="A key/value list of properties that need user verification in order for the gateway to trust the host to succeed.  For instance the user may need to verify an SSL thumbprint or a whole certificate.  ***Since:*** vSphere API 6.0 ", alias="propertiesToVerify")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GatewayToHostTrustVerifyFault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GatewayToHostTrustVerifyFault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


