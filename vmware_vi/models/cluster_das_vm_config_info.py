# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.cluster_das_vm_settings import ClusterDasVmSettings
from vmware_vi.models.das_vm_priority_enum import DasVmPriorityEnum
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterDasVmConfigInfo(DataObject):
    """
    The *ClusterDasVmConfigInfo* data object contains the HA configuration for a single virtual machine.  All fields are optional. If you set the <code>modify</code> parameter to <code>true</code> when you call *ComputeResource.ReconfigureComputeResource_Task*, an unset property has no effect on the existing property value in the cluster configuration on the Server. If you set the <code>modify</code> parameter to <code>false</code> when you reconfigure a cluster, the cluster configuration is reverted to the default values, then the new configuration values are applied. 
    """ # noqa: E501
    key: ManagedObjectReference
    restart_priority: Optional[DasVmPriorityEnum] = Field(default=None, alias="restartPriority")
    power_off_on_isolation: Optional[StrictBool] = Field(default=None, description="Deprecated as of VI API 2.5, use *ClusterDasVmConfigInfo.dasSettings*.*ClusterDasVmSettings.isolationResponse*. If you specify both *ClusterDasVmConfigInfo.powerOffOnIsolation* and *ClusterDasVmSettings.isolationResponse*, the value in *ClusterDasVmSettings.isolationResponse* has precedence.  Flag to indicate whether or not the virtual machine should be powered off if a host determines that it is isolated from the rest of the compute resource.  If there is nothing specified here, then the defaults are picked up from *ClusterDasConfigInfo.defaultVmSettings*. ", alias="powerOffOnIsolation")
    das_settings: Optional[ClusterDasVmSettings] = Field(default=None, alias="dasSettings")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterDasVmConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterDasVmConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


