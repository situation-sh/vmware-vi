# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.crypto_key_id import CryptoKeyId
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.tools_config_info_tools_last_install_info import ToolsConfigInfoToolsLastInstallInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ToolsConfigInfo(DataObject):
    """
    ToolsConfigInfo is a data object type containing settings for the VMware Tools software running in the guest operating system. 
    """ # noqa: E501
    tools_version: Optional[StrictInt] = Field(default=None, description="Version of VMware Tools installed on the guest operating system. ", alias="toolsVersion")
    tools_install_type: Optional[StrictStr] = Field(default=None, description="Installation type of VMware Tools in the guest operating system.  The set of possible values is described in *VirtualMachineToolsInstallType_enum*  ***Since:*** vSphere API 6.5 ", alias="toolsInstallType")
    after_power_on: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not scripts should run after the virtual machine powers on. ", alias="afterPowerOn")
    after_resume: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not scripts should run after the virtual machine resumes. ", alias="afterResume")
    before_guest_standby: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not scripts should run before the virtual machine suspends. ", alias="beforeGuestStandby")
    before_guest_shutdown: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not scripts should run before the virtual machine powers off. ", alias="beforeGuestShutdown")
    before_guest_reboot: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not scripts should run before the virtual machine reboots. ", alias="beforeGuestReboot")
    tools_upgrade_policy: Optional[StrictStr] = Field(default=None, description="Tools upgrade policy setting for the virtual machine.  See also *UpgradePolicy_enum*.  ***Since:*** VI API 2.5 ", alias="toolsUpgradePolicy")
    pending_customization: Optional[StrictStr] = Field(default=None, description="When set, this indicates that a customization operation is pending on the VM.  The value represents the filename of the customization package on the host.  ***Since:*** VI API 2.5 ", alias="pendingCustomization")
    customization_key_id: Optional[CryptoKeyId] = Field(default=None, alias="customizationKeyId")
    sync_time_with_host_allowed: Optional[StrictBool] = Field(default=None, description="Indicates whether or not the tools program is allowed to synchronize guest time with host time.  When set to <code>false</code>, disallows tool periodic time synchronization as well as guest time step corrections due to one-off events like resume from suspend.  ***Since:*** vSphere API 7.0.1.0 ", alias="syncTimeWithHostAllowed")
    sync_time_with_host: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not the tools program will periodically synchronize guest time with host time.  Periodical synchronization is only allowed if *ToolsConfigInfo.syncTimeWithHostAllowed* is not set to <code>false</code>.  ***Since:*** VI API 2.5 ", alias="syncTimeWithHost")
    last_install_info: Optional[ToolsConfigInfoToolsLastInstallInfo] = Field(default=None, alias="lastInstallInfo")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ToolsConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ToolsConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


