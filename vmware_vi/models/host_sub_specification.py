# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictBytes, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostSubSpecification(DataObject):
    """
    Host sub specification data are the data used when create a virtual device, and/or configure the virtual device and its related host services.  A typical example of host sub specification data is the DVS host view specification, which is used when create DVS host view on an ESXi host and configure the virtual switch on the host. The introduction of this type of data is for improving the availability of the ESXi host management. For example, when the VirtualCenter server is not available, an ESXi host will have enough information to reconfigure DVS host view properly when the ESXi host is booted from stateless or stateless caching. Host sub specification data are data for VMware internal data structure used in virtual device creation and configuration. They are different to *AnswerFile* which are from public knowledge domain or the public API of VMware ESXi host services. When the host sub specification data for a single feature are stored in multiple host sub specification data objects, it is the responsibility of the host specification source in this feature to guarantee the completeness and consistency of these host sub specification objects.  ***Since:*** vSphere API 6.5 
    """ # noqa: E501
    name: StrictStr = Field(description="The full name of the host sub specification.  The format of this member variable is: CompanyName\\_ProductName\\_SubSpecName. Thus, name conflict is avoided by containing the <code>company name</code>, <code>product name</code>, and <code> sub specification name</code> in this full name.  ***Since:*** vSphere API 6.5 ")
    created_time: datetime = Field(description="Time at which the host sub specification was created.  ***Since:*** vSphere API 6.5 ", alias="createdTime")
    data: Optional[List[Annotated[int, Field(le=127, strict=True, ge=-128)]]] = Field(default=None, description="The host sub specification data  ***Since:*** vSphere API 6.5 ")
    binary_data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The host sub specification data in Binary for wire efficiency.  ***Since:*** vSphere API 6.7 ", alias="binaryData")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostSubSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostSubSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


