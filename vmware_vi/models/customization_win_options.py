# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.customization_options import CustomizationOptions
from vmware_vi.models.customization_sysprep_reboot_option_enum import CustomizationSysprepRebootOptionEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomizationWinOptions(CustomizationOptions):
    """
    Optional operations supported by the customization process for Windows. 
    """ # noqa: E501
    change_sid: StrictBool = Field(description="The customization process should modify the machine's security identifier (SID).  For Vista OS and greater, SID will always be modified and a value of false will generate an error. ", alias="changeSID")
    delete_accounts: StrictBool = Field(description="Deprecated as of VI API 2.5, this value is ignored. Removing user accounts during customization is no longer supported. To change the administrator password, set the administrator password to blank in the master vm. Sysprep will then be able to change the password to the one specified by the *CustomizationGuiUnattended.password*.  If deleteAccounts is true, then all user accounts are removed from the system as part of the customization.  Mini-setup creates a new Administrator account with a blank password. ", alias="deleteAccounts")
    reboot: Optional[CustomizationSysprepRebootOptionEnum] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomizationWinOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomizationWinOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


