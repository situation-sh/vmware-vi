# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union
from pydantic import StrictFloat, StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StoragePerformanceSummary(DataObject):
    """
    Summary statistics for datastore performance The statistics are reported in aggregated quantiles over a time period  ***Since:*** vSphere API 5.1 
    """ # noqa: E501
    interval: StrictInt = Field(description="Time period over which statistics are aggregated The reported time unit is in seconds  ***Since:*** vSphere API 5.1 ")
    percentile: List[StrictInt] = Field(description="Metric percentile specification.  A percentile is a value between 1 and 100. The metric value reported in the aggregated statistics corresponds with the percentile values in this field. For example, if the value of percentile\\[0\\] is P, and the value of the datastoreReadLatency\\[0\\] is L, then P% of all the read IOs performed during observation interval is less than L milliseconds.  ***Since:*** vSphere API 5.1 ")
    datastore_read_latency: List[Union[StrictFloat, StrictInt]] = Field(description="Aggregated datastore latency in milliseconds for read operations  ***Since:*** vSphere API 5.1 ", alias="datastoreReadLatency")
    datastore_write_latency: List[Union[StrictFloat, StrictInt]] = Field(description="Aggregated datastore latency in milliseconds for write operations  ***Since:*** vSphere API 5.1 ", alias="datastoreWriteLatency")
    datastore_vm_latency: List[Union[StrictFloat, StrictInt]] = Field(description="Aggregated datastore latency as observed by Vms using the datastore The reported latency is in milliseconds.  ***Since:*** vSphere API 5.1 ", alias="datastoreVmLatency")
    datastore_read_iops: List[Union[StrictFloat, StrictInt]] = Field(description="Aggregated datastore Read IO rate (Reads/second)  ***Since:*** vSphere API 5.1 ", alias="datastoreReadIops")
    datastore_write_iops: List[Union[StrictFloat, StrictInt]] = Field(description="Aggregated datastore Write IO rate (Writes/second)  ***Since:*** vSphere API 5.1 ", alias="datastoreWriteIops")
    sioc_activity_duration: StrictInt = Field(description="Cumulative SIOC activity to satisfy SIOC latency threshold setting.  This metric indicates the total time that SIOC is actively throttling IO requests. The SIOC throttling activity occurs whenever the datastore latency exceeds the SIOC latency threshold. If SIOC is not enabled on the datastore, the metric indicates the total time that SIOC would have been active. The unit of reporting is in milliseconds.  ***Since:*** vSphere API 5.1 ", alias="siocActivityDuration")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StoragePerformanceSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StoragePerformanceSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


