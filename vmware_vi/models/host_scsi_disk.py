# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.host_disk_dimensions_lba import HostDiskDimensionsLba
from vmware_vi.models.scsi_lun import ScsiLun
from vmware_vi.models.vsan_host_vsan_disk_info import VsanHostVsanDiskInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostScsiDisk(ScsiLun):
    """
    This data object type describes a SCSI disk.  A SCSI disk contains a partition table which can be changed. To change a SCSI disk, use the device name and the partition specification.  See also *HostStorageSystem.RetrieveDiskPartitionInfo*, *HostStorageSystem.UpdateDiskPartitions*. 
    """ # noqa: E501
    capacity: HostDiskDimensionsLba
    device_path: StrictStr = Field(description="The device path of the ScsiDisk.  This device path is a file path that can be opened to create partitions on the disk.  See also *HostStorageSystem.RetrieveDiskPartitionInfo*, *HostStorageSystem.UpdateDiskPartitions*. ", alias="devicePath")
    ssd: Optional[StrictBool] = Field(default=None, description="Indicates whether the ScsiDisk is SSD backed.  If unset, the information whether the ScsiDisk is SSD backed is unknown.  ***Since:*** vSphere API 5.0 ")
    local_disk: Optional[StrictBool] = Field(default=None, description="Indicates whether the ScsiDisk is local.  If unset, the information whether the ScsiDisk is local is unknown.  ***Since:*** vSphere API 6.0 ", alias="localDisk")
    physical_location: Optional[List[StrictStr]] = Field(default=None, description="The physical location of the ScsiDisk if can be determined, otherwise unset.  If the ScsiDisk is a logical drive, it should be the location of all constituent physical drives of the logical drive. If the ScsiDisk is a physical drive, it's an array of one element.  ***Since:*** vSphere API 6.0 ", alias="physicalLocation")
    emulated_dixdif_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether the ScsiDisk has emulated Data Integrity Extension (DIX) / Data Integrity Field (DIF) enabled.  If unset, the default value is false.  ***Since:*** vSphere API 6.0 ", alias="emulatedDIXDIFEnabled")
    vsan_disk_info: Optional[VsanHostVsanDiskInfo] = Field(default=None, alias="vsanDiskInfo")
    scsi_disk_type: Optional[StrictStr] = Field(default=None, description="The type of disk drives.  See *ScsiDiskType_enum* for definitions of supported types.  ***Since:*** vSphere API 6.5 ", alias="scsiDiskType")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostScsiDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostScsiDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


