# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.host_directory_store_info import HostDirectoryStoreInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostActiveDirectoryInfo(HostDirectoryStoreInfo):
    """
    The *HostActiveDirectoryInfo* data object describes ESX host membership in an Active Directory domain.  If the *HostAuthenticationStoreInfo*.*HostAuthenticationStoreInfo.enabled* property is <code>True</code>, the host is a member of a domain and the ESX Server will set the domain information properties.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    joined_domain: Optional[StrictStr] = Field(default=None, description="The domain that this host joined.  ***Since:*** vSphere API 4.1 ", alias="joinedDomain")
    trusted_domain: Optional[List[StrictStr]] = Field(default=None, description="List of domains with which the <code>joinedDomain</code> has a trust.  The <code>joinedDomain</code> is not included in the <code>trustedDomain</code> list.  ***Since:*** vSphere API 4.1 ", alias="trustedDomain")
    domain_membership_status: Optional[StrictStr] = Field(default=None, description="Health information about the domain membership.  See *HostActiveDirectoryInfoDomainMembershipStatus_enum*.  ***Since:*** vSphere API 4.1 ", alias="domainMembershipStatus")
    smart_card_authentication_enabled: Optional[StrictBool] = Field(default=None, description="Whether local smart card authentication is enabled.  ***Since:*** vSphere API 6.0 ", alias="smartCardAuthenticationEnabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostActiveDirectoryInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostActiveDirectoryInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


