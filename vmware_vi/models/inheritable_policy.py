# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InheritablePolicy(DataObject):
    """
    The base class for any type of setting or configuration that may get a inherited value.  When used in a reconfigure operation specification, if *InheritablePolicy.inherited* is true, it specifies the intention to change the values of subclass's properties to the inherited values from the level above. In this case, users don't need to specify the values and any set property in the subclass will be ignored. if *InheritablePolicy.inherited* is false, it specifies the intention to explicitly set subclass's properties to user specified values. Users should set the properties in the subclass with the desired values.  When used in a configuration information object, The values of the properties in the subclass are the effective values. if *InheritablePolicy.inherited* is true, the object is getting the effective values from upper level. If false, the values are explicitly set by a user.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    inherited: StrictBool = Field(description="Whether the configuration is set to inherited value.  ***Since:*** vSphere API 4.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','BoolPolicy': 'BoolPolicy','DVSFailureCriteria': 'DVSFailureCriteria','DVSMacLearningPolicy': 'DVSMacLearningPolicy','DVSMacManagementPolicy': 'DVSMacManagementPolicy','DVSSecurityPolicy': 'DVSSecurityPolicy','DVSTrafficShapingPolicy': 'DVSTrafficShapingPolicy','DVSVendorSpecificConfig': 'DVSVendorSpecificConfig','DvsFilterConfig': 'DvsFilterConfig','DvsFilterConfigSpec': 'DvsFilterConfigSpec','DvsFilterPolicy': 'DvsFilterPolicy','DvsTrafficFilterConfig': 'DvsTrafficFilterConfig','DvsTrafficFilterConfigSpec': 'DvsTrafficFilterConfigSpec','IntPolicy': 'IntPolicy','LongPolicy': 'LongPolicy','StringPolicy': 'StringPolicy','VMwareUplinkLacpPolicy': 'VMwareUplinkLacpPolicy','VMwareUplinkPortOrderPolicy': 'VMwareUplinkPortOrderPolicy','VmwareDistributedVirtualSwitchPvlanSpec': 'VmwareDistributedVirtualSwitchPvlanSpec','VmwareDistributedVirtualSwitchTrunkVlanSpec': 'VmwareDistributedVirtualSwitchTrunkVlanSpec','VmwareDistributedVirtualSwitchVlanIdSpec': 'VmwareDistributedVirtualSwitchVlanIdSpec','VmwareDistributedVirtualSwitchVlanSpec': 'VmwareDistributedVirtualSwitchVlanSpec','VmwareUplinkPortTeamingPolicy': 'VmwareUplinkPortTeamingPolicy'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of InheritablePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of InheritablePolicy from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("InheritablePolicy failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.bool_policy import BoolPolicy
from vmware_vi.models.dvs_failure_criteria import DVSFailureCriteria
from vmware_vi.models.dvs_filter_config import DvsFilterConfig
from vmware_vi.models.dvs_filter_config_spec import DvsFilterConfigSpec
from vmware_vi.models.dvs_filter_policy import DvsFilterPolicy
from vmware_vi.models.dvs_mac_learning_policy import DVSMacLearningPolicy
from vmware_vi.models.dvs_mac_management_policy import DVSMacManagementPolicy
from vmware_vi.models.dvs_security_policy import DVSSecurityPolicy
from vmware_vi.models.dvs_traffic_filter_config import DvsTrafficFilterConfig
from vmware_vi.models.dvs_traffic_filter_config_spec import DvsTrafficFilterConfigSpec
from vmware_vi.models.dvs_traffic_shaping_policy import DVSTrafficShapingPolicy
from vmware_vi.models.dvs_vendor_specific_config import DVSVendorSpecificConfig
from vmware_vi.models.int_policy import IntPolicy
from vmware_vi.models.long_policy import LongPolicy
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.string_policy import StringPolicy
from vmware_vi.models.v_mware_uplink_lacp_policy import VMwareUplinkLacpPolicy
from vmware_vi.models.v_mware_uplink_port_order_policy import VMwareUplinkPortOrderPolicy
from vmware_vi.models.vmware_distributed_virtual_switch_pvlan_spec import VmwareDistributedVirtualSwitchPvlanSpec
from vmware_vi.models.vmware_distributed_virtual_switch_trunk_vlan_spec import VmwareDistributedVirtualSwitchTrunkVlanSpec
from vmware_vi.models.vmware_distributed_virtual_switch_vlan_id_spec import VmwareDistributedVirtualSwitchVlanIdSpec
from vmware_vi.models.vmware_distributed_virtual_switch_vlan_spec import VmwareDistributedVirtualSwitchVlanSpec
from vmware_vi.models.vmware_uplink_port_teaming_policy import VmwareUplinkPortTeamingPolicy
# TODO: Rewrite to not use raise_errors
InheritablePolicy.model_rebuild(raise_errors=False)

