# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.host_connect_fault import HostConnectFault
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SSLVerifyFault(HostConnectFault):
    """
    SSLVerifyFault is thrown by the host connect method if the VC server could not verify the authenticity of the host's SSL certificate.  Currently, we do not distinguish the various possible reasons why the certificate could not be verified because we don't provide a way for the user to overwrite these reasons other than turning off SSL certificate verification completely. The only exception is the case when the certificate was rejected because it was self-signed. This is the most likely case when the user may want to overwrite the behavior by specifying the certificate's thumbprint in the ConnectSpec the next time the user connects to the host.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    self_signed: StrictBool = Field(description="Whether the host's certificate was self signed  ***Since:*** VI API 2.5 ", alias="selfSigned")
    thumbprint: StrictStr = Field(description="The thumbprint of the host's certificate  ***Since:*** VI API 2.5 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SSLVerifyFault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SSLVerifyFault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


