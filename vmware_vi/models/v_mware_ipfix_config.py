# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VMwareIpfixConfig(DataObject):
    """
    Configuration for IPFIX monitoring of distributed virtual switch traffic.  IPFIX monitoring must be enabled to use this capability. See *VMwareDVSPortSetting*.*VMwareDVSPortSetting.ipfixEnabled*.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    collector_ip_address: Optional[StrictStr] = Field(default=None, description="IP address for the ipfix collector, using IPv4 or IPv6.  IPv6 is supported in vSphere Distributed Switch Version 6.0 or later. This must be set before ipfix monitoring can be enabled for the switch, or for any portgroup or port of the switch.  ***Since:*** vSphere API 5.0 ", alias="collectorIpAddress")
    collector_port: Optional[StrictInt] = Field(default=None, description="Port for the ipfix collector.  This must be set before ipfix monitoring can be enabled for the switch, or for any portgroup or port of the switch. Legal value range is 0-65535.  ***Since:*** vSphere API 5.0 ", alias="collectorPort")
    observation_domain_id: Optional[StrictInt] = Field(default=None, description="Observation Domain Id for the ipfix collector.  Observation Domain Id is supported in vSphere Distributed Switch Version 6.0 or later. Legal value range is 0-((2^32)-1)  ***Since:*** vSphere API 6.0 ", alias="observationDomainId")
    active_flow_timeout: StrictInt = Field(description="The number of seconds after which \"active\" flows are forced to be exported to the collector.  Legal value range is 60-3600. Default: 60.  ***Since:*** vSphere API 5.0 ", alias="activeFlowTimeout")
    idle_flow_timeout: StrictInt = Field(description="The number of seconds after which \"idle\" flows are forced to be exported to the collector.  Legal value range is 10-600. Default: 15.  ***Since:*** vSphere API 5.0 ", alias="idleFlowTimeout")
    sampling_rate: StrictInt = Field(description="The ratio of total number of packets to the number of packets analyzed.  Set to 0 to disable sampling. Legal value range is 0-16384. Default: 4096.  ***Since:*** vSphere API 5.0 ", alias="samplingRate")
    internal_flows_only: StrictBool = Field(description="Whether to limit analysis to traffic that has both source and destination served by the same host.  Default: false.  ***Since:*** vSphere API 5.0 ", alias="internalFlowsOnly")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VMwareIpfixConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VMwareIpfixConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


