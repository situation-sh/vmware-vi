# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
from vmware_vi.models.host_maintenance_spec import HostMaintenanceSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnterMaintenanceModeRequestType(BaseModel):
    """
    The parameters of *HostSystem.EnterMaintenanceMode_Task*. 
    """ # noqa: E501
    timeout: StrictInt = Field(description="The task completes when the host successfully enters maintenance mode or the timeout expires, and in the latter case the task contains a Timeout fault. If the timeout is less than or equal to zero, there is no timeout. The timeout is specified in seconds. ")
    evacuate_powered_off_vms: Optional[StrictBool] = Field(default=None, description="This is a parameter only supported by VirtualCenter. If set to true, for a DRS disabled cluster, the task will not succeed unless all powered-off virtual machines have been manually reregistered; for a DRS enabled cluster, VirtualCenter will automatically reregister powered-off virtual machines and a powered-off virtual machine may remain at the host only for two reasons: (a) no compatible host found for reregistration, (b) DRS is disabled for the virtual machine. If set to false, powered-off virtual machines do not need to be moved. ", alias="evacuatePoweredOffVms")
    maintenance_spec: Optional[HostMaintenanceSpec] = Field(default=None, alias="maintenanceSpec")
    __properties: ClassVar[List[str]] = ["timeout", "evacuatePoweredOffVms", "maintenanceSpec"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnterMaintenanceModeRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance_spec
        if self.maintenance_spec:
            _dict['maintenanceSpec'] = self.maintenance_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnterMaintenanceModeRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timeout": obj.get("timeout"),
            "evacuatePoweredOffVms": obj.get("evacuatePoweredOffVms"),
            "maintenanceSpec": HostMaintenanceSpec.from_dict(obj.get("maintenanceSpec")) if obj.get("maintenanceSpec") is not None else None
        })
        return _obj


