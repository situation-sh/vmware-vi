# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExtensionOvfConsumerInfo(DataObject):
    """
    This data object contains configuration for extensions that also extend the OVF functionality of vCenter server.  **Note:** This feature is for internal use only.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    callback_url: StrictStr = Field(description="Callback url for the OVF consumer.  This URL must point to a SOAP API implementing the OVF consumer interface.  Example: https://extension-host:8081/  This callback is for internal use only.  ***Since:*** vSphere API 5.0 ", alias="callbackUrl")
    section_type: List[StrictStr] = Field(description="A list of fully qualified OVF section types that this consumer handles.  Fully qualified means that each section type must be prefixed with its namespace enclosed in curly braces. See the examples below.  An InvalidArgument error is thrown if there is overlap between OVF consumers, meaning that the same section type appears in the sectionType list of more than one OVF consumer.  Example: \\[ \"{http://www.vmware.com/schema/vServiceManager}vServiceDependency\", \"{http://www.vmware.com/schema/vServiceManager}vServiceBinding\" \\]  ***Since:*** vSphere API 5.0 ", alias="sectionType")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExtensionOvfConsumerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExtensionOvfConsumerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


