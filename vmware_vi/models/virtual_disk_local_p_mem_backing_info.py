# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.virtual_device_file_backing_info import VirtualDeviceFileBackingInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualDiskLocalPMemBackingInfo(VirtualDeviceFileBackingInfo):
    """
    This data object type contains information about backing a virtual disk using non-volatile memory technologies (persistent memory).  Supported for ESX Server 6.5 and later.  ***Since:*** vSphere API 6.7 
    """ # noqa: E501
    disk_mode: StrictStr = Field(description="The disk persistence mode.  See also *VirtualDiskMode_enum*.  ***Since:*** vSphere API 6.7 ", alias="diskMode")
    uuid: Optional[StrictStr] = Field(default=None, description="Disk UUID for the virtual disk, if available.  ***Since:*** vSphere API 6.7 ")
    volume_uuid: Optional[StrictStr] = Field(default=None, description="Persistent memory volume UUID - UUID which associates this virtual disk with a specific host.  This is read only property.  See also *HostPersistentMemoryInfo.volumeUUID*.  ***Since:*** vSphere API 6.7 ", alias="volumeUUID")
    content_id: Optional[StrictStr] = Field(default=None, description="Content ID of the virtual disk file, if available.  A content ID indicates the logical contents of the disk backing and its parents.  This property is only guaranteed to be up to date if this disk backing is not currently being written to by any virtual machine.  The only supported operation is comparing if two content IDs are equal or not. The guarantee provided by the content ID is that if two disk backings have the same content ID and are not currently being written to, then reads issued from the guest operating system to those disk backings will return the same data.  ***Since:*** vSphere API 6.7 ", alias="contentId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualDiskLocalPMemBackingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualDiskLocalPMemBackingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


