# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from vmware_vi.models.crypto_spec import CryptoSpec
from vmware_vi.models.id import ID
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.virtual_machine_profile_spec import VirtualMachineProfileSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostVStorageObjectCreateDiskFromSnapshotRequestType(BaseModel):
    """
    The parameters of *HostVStorageObjectManager.HostVStorageObjectCreateDiskFromSnapshot_Task*. 
    """ # noqa: E501
    id: ID
    datastore: ManagedObjectReference
    snapshot_id: ID = Field(alias="snapshotId")
    name: StrictStr = Field(description="A user friendly name to be associated with the new disk. ")
    profile: Optional[List[VirtualMachineProfileSpec]] = Field(default=None, description="SPBM Profile requirement on the new virtual storage object. If not specified datastore default policy would be assigned.  ***Since:*** vSphere API 5.5 ")
    crypto: Optional[CryptoSpec] = None
    path: Optional[StrictStr] = Field(default=None, description="Relative location in the specified datastore where disk needs to be created. If not specified disk gets created at defualt VStorageObject location on the specified datastore ")
    provisioning_type: Optional[StrictStr] = Field(default=None, description="Provisioining type of the disk as specified in above mentioned profile. The list of supported values can be found in *BaseConfigInfoDiskFileBackingInfoProvisioningType_enum* ", alias="provisioningType")
    __properties: ClassVar[List[str]] = ["id", "datastore", "snapshotId", "name", "profile", "crypto", "path", "provisioningType"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostVStorageObjectCreateDiskFromSnapshotRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datastore
        if self.datastore:
            _dict['datastore'] = self.datastore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snapshot_id
        if self.snapshot_id:
            _dict['snapshotId'] = self.snapshot_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in profile (list)
        _items = []
        if self.profile:
            for _item in self.profile:
                if _item:
                    _items.append(_item.to_dict())
            _dict['profile'] = _items
        # override the default output from pydantic by calling `to_dict()` of crypto
        if self.crypto:
            _dict['crypto'] = self.crypto.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostVStorageObjectCreateDiskFromSnapshotRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": ID.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "datastore": ManagedObjectReference.from_dict(obj.get("datastore")) if obj.get("datastore") is not None else None,
            "snapshotId": ID.from_dict(obj.get("snapshotId")) if obj.get("snapshotId") is not None else None,
            "name": obj.get("name"),
            "profile": [VirtualMachineProfileSpec.from_dict(_item) for _item in obj.get("profile")] if obj.get("profile") is not None else None,
            "crypto": CryptoSpec.from_dict(obj.get("crypto")) if obj.get("crypto") is not None else None,
            "path": obj.get("path"),
            "provisioningType": obj.get("provisioningType")
        })
        return _obj


