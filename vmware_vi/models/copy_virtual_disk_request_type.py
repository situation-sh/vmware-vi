# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.virtual_disk_spec import VirtualDiskSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CopyVirtualDiskRequestType(BaseModel):
    """
    The parameters of *VirtualDiskManager.CopyVirtualDisk_Task*. 
    """ # noqa: E501
    source_name: StrictStr = Field(description="The name of the source, either a datastore path or a URL referring to the virtual disk to be copied. ", alias="sourceName")
    source_datacenter: Optional[ManagedObjectReference] = Field(default=None, alias="sourceDatacenter")
    dest_name: StrictStr = Field(description="The name of the destination, either a datastore path or a URL referring to the virtual disk to be created. ", alias="destName")
    dest_datacenter: Optional[ManagedObjectReference] = Field(default=None, alias="destDatacenter")
    dest_spec: Optional[VirtualDiskSpec] = Field(default=None, alias="destSpec")
    force: Optional[StrictBool] = Field(default=None, description="The force flag is currently ignored. The FileAlreadyExists fault is thrown if the destination file already exists. ")
    __properties: ClassVar[List[str]] = ["sourceName", "sourceDatacenter", "destName", "destDatacenter", "destSpec", "force"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CopyVirtualDiskRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_datacenter
        if self.source_datacenter:
            _dict['sourceDatacenter'] = self.source_datacenter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dest_datacenter
        if self.dest_datacenter:
            _dict['destDatacenter'] = self.dest_datacenter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dest_spec
        if self.dest_spec:
            _dict['destSpec'] = self.dest_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CopyVirtualDiskRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceName": obj.get("sourceName"),
            "sourceDatacenter": ManagedObjectReference.from_dict(obj.get("sourceDatacenter")) if obj.get("sourceDatacenter") is not None else None,
            "destName": obj.get("destName"),
            "destDatacenter": ManagedObjectReference.from_dict(obj.get("destDatacenter")) if obj.get("destDatacenter") is not None else None,
            "destSpec": VirtualDiskSpec.from_dict(obj.get("destSpec")) if obj.get("destSpec") is not None else None,
            "force": obj.get("force")
        })
        return _obj


