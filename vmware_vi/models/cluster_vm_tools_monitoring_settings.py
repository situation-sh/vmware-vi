# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterVmToolsMonitoringSettings(DataObject):
    """
    The *ClusterVmToolsMonitoringSettings* data object contains virtual machine monitoring settings that are used by the Virtual Machine Health Monitoring Service.  The Service checks the VMware Tools heartbeat of a virtual machine. If heartbeats have not been received within a specified time interval, the Service declares the virtual machine as failed and resets the virtual machine.  These settings are applied to individual virtual machines during cluster reconfiguration (*ClusterDasVmConfigInfo*.*ClusterDasVmConfigInfo.dasSettings*.*ClusterDasVmSettings.vmToolsMonitoringSettings*). You can also specify them as default values (*ClusterDasConfigInfo*.*ClusterDasConfigInfo.defaultVmSettings*).  All fields are optional. In case of a reconfiguration, fields left unset are not changed.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Deprecated as of vSphere API 4.1, use *ClusterVmToolsMonitoringSettings.vmMonitoring*.  Flag indicating whether or not the Virtual Machine Health Monitoring service is enabled.  The Server does not use this property.  ***Since:*** vSphere API 4.0 ")
    vm_monitoring: Optional[StrictStr] = Field(default=None, description="Indicates the type of virtual machine monitoring.  Specify a string value corresponding to one of the following *ClusterDasConfigInfoVmMonitoringState_enum* values: - <code>vmMonitoringDisabled</code> (the default value) - <code>vmMonitoringOnly</code> - <code>vmAndAppMonitoring</code>    The individual VMware Tools setting for virtual machine monitoring depends on the HA Virtual Machine Health Monitoring Service level that is defined for the cluster (*ClusterDasConfigInfo*.*ClusterDasConfigInfo.vmMonitoring*). The following list indicates the supported VMware Tools <code>vmMonitoring</code> values according to the cluster configuration. - If the cluster configuration specifies <code>vmMonitoringDisabled</code>,   the Service is disabled and the HA Service ignores the VMware Tools monitoring setting. - If the cluster configuration specifies <code>vmMonitoringOnly</code>,   the Service supports <code>vmMonitoringOnly</code> or <code>vmMonitoringDisabled</code> only. - If the cluster configuration specifies <code>vmAndAppMonitoring</code>,   you can use any of the *ClusterDasConfigInfoVmMonitoringState_enum* values.    The *ClusterVmToolsMonitoringSettings.clusterSettings* value has no effect on the constraint imposed by the HA Virtual Machine Health Monitoring Service level that is defined for the cluster (*ClusterDasConfigInfo*.*ClusterDasConfigInfo.vmMonitoring*).  Application monitoring events are generated regardless of the currently configured type of virtual machine monitoring. You can use these events even if monitoring is being disabled or set to <code>vmMonitoringOnly</code>.  ***Since:*** vSphere API 4.1 ", alias="vmMonitoring")
    cluster_settings: Optional[StrictBool] = Field(default=None, description="Flag indicating whether to use the cluster settings or the per VM settings.  The default value is true.  ***Since:*** vSphere API 4.0 ", alias="clusterSettings")
    failure_interval: Optional[StrictInt] = Field(default=None, description="If no heartbeat has been received for at least the specified number of seconds, the virtual machine is declared as failed.  The default value is 30.  ***Since:*** vSphere API 4.0 ", alias="failureInterval")
    min_up_time: Optional[StrictInt] = Field(default=None, description="The number of seconds for the virtual machine's heartbeats to stabilize after the virtual machine has been powered on.  This time should include the guest operating system boot-up time. The virtual machine monitoring will begin only after this period.  The default value is 120.  ***Since:*** vSphere API 4.0 ", alias="minUpTime")
    max_failures: Optional[StrictInt] = Field(default=None, description="Maximum number of failures and automated resets allowed during the time that *ClusterVmToolsMonitoringSettings.maxFailureWindow* specifies.  If *ClusterVmToolsMonitoringSettings.maxFailureWindow* is -1 (no window), this represents the absolute number of failures after which automated response is stopped.  If a virtual machine exceeds this threshold, in-depth problem analysis is usually needed.  The default value is 3.  ***Since:*** vSphere API 4.0 ", alias="maxFailures")
    max_failure_window: Optional[StrictInt] = Field(default=None, description="The number of seconds for the window during which up to *ClusterVmToolsMonitoringSettings.maxFailures* resets can occur before automated responses stop.  If set to -1, no failure window is specified.  The default value is -1.  ***Since:*** vSphere API 4.0 ", alias="maxFailureWindow")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterVmToolsMonitoringSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterVmToolsMonitoringSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


