# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.customization_spec import CustomizationSpec
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.virtual_machine_config_spec import VirtualMachineConfigSpec
from vmware_vi.models.virtual_machine_relocate_spec import VirtualMachineRelocateSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineCloneSpec(DataObject):
    """
    Specification for a virtual machine cloning operation. 
    """ # noqa: E501
    location: VirtualMachineRelocateSpec
    template: StrictBool = Field(description="Specifies whether or not the new virtual machine should be marked as a template. ")
    config: Optional[VirtualMachineConfigSpec] = None
    customization: Optional[CustomizationSpec] = None
    power_on: StrictBool = Field(description="Specifies whether or not the new VirtualMachine should be powered on after creation.  As part of a customization, this flag is normally set to true, since the first power-on operation completes the customization process. This flag is ignored if a template is being created. ", alias="powerOn")
    snapshot: Optional[ManagedObjectReference] = None
    memory: Optional[StrictBool] = Field(default=None, description="Flag indicating whether to retain a copy of the source virtual machine's memory state in the clone.  Retaining the memory state during clone results in a clone in suspended state with all network adapters removed to avoid network conflicts, except those with a VirtualEthernetCard.addressType of \"manual\". Users of this flag should take special care so that, when adding a network adapter back to the clone, the VM is not resumed on the same VM network as the source VM, or else MAC address conflicts could occur. When cloning between two hosts with different CPUs outside an EVC cluster, users of this flag should be aware that vCenter does not verify CPU compatibility between the clone's memory state and the target host prior to the clone operation, so the clone may fail to resume until it is migrated to a host with a compatible CPU.  This flag is ignored if the snapshot parameter is unset. This flag only applies for a snapshot taken on a running or suspended virtual machine with the 'memory' parameter set to true, because otherwise the snapshot has no memory state. This flag defaults to false.  ***Since:*** vSphere API 5.5 ")
    tpm_provision_policy: Optional[StrictStr] = Field(default=None, description="Provisioning policy for virtual TPM devices during VM clone operations.  The list of supported values is defined in *VirtualMachineCloneSpecTpmProvisionPolicy_enum*.  If unset - a globally defined policy is used, which by default is set to 'copy'. ", alias="tpmProvisionPolicy")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineCloneSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineCloneSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


