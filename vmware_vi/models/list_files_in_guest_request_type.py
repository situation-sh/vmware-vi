# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.guest_authentication import GuestAuthentication
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ListFilesInGuestRequestType(BaseModel):
    """
    The parameters of *GuestFileManager.ListFilesInGuest*. 
    """ # noqa: E501
    vm: ManagedObjectReference
    auth: GuestAuthentication
    file_path: StrictStr = Field(description="The complete path to the directory or file to query. ", alias="filePath")
    index: Optional[StrictInt] = Field(default=None, description="Which result to start the list with. The default is 0. ")
    max_results: Optional[StrictInt] = Field(default=None, description="The maximum number of results to return. The default is 50. ", alias="maxResults")
    match_pattern: Optional[StrictStr] = Field(default=None, description="A filter for the return values. Match patterns are specified using perl-compatible regular expressions. If matchPattern is unset, then the pattern '.\\*' is used. ", alias="matchPattern")
    __properties: ClassVar[List[str]] = ["vm", "auth", "filePath", "index", "maxResults", "matchPattern"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ListFilesInGuestRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vm
        if self.vm:
            _dict['vm'] = self.vm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ListFilesInGuestRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "vm": ManagedObjectReference.from_dict(obj.get("vm")) if obj.get("vm") is not None else None,
            "auth": GuestAuthentication.from_dict(obj.get("auth")) if obj.get("auth") is not None else None,
            "filePath": obj.get("filePath"),
            "index": obj.get("index"),
            "maxResults": obj.get("maxResults"),
            "matchPattern": obj.get("matchPattern")
        })
        return _obj


