# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.guest_file_attributes import GuestFileAttributes
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GuestWindowsFileAttributes(GuestFileAttributes):
    """
    Different attributes for a Windows guest file.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    hidden: Optional[StrictBool] = Field(default=None, description="The file is hidden.  If this property is not specified when passing a *GuestWindowsFileAttributes* object to *GuestFileManager.InitiateFileTransferToGuest*, the file will not be set as a hidden file.  ***Since:*** vSphere API 5.0 ")
    read_only: Optional[StrictBool] = Field(default=None, description="The file is read-only.  If this property is not specified when passing a *GuestWindowsFileAttributes* object to *GuestFileManager.InitiateFileTransferToGuest*, the file will not be set as a read-only file.  ***Since:*** vSphere API 5.0 ", alias="readOnly")
    create_time: Optional[datetime] = Field(default=None, description="The date and time the file was created.  This property gives information about files when returned from *GuestFileManager.ListFilesInGuest* or *GuestFileManager.InitiateFileTransferFromGuest* as part of a *GuestWindowsFileAttributes* object. This property will be ignored when passing a *GuestWindowsFileAttributes* object to *GuestFileManager.InitiateFileTransferToGuest* or *GuestFileManager.ChangeFileAttributesInGuest*.  ***Since:*** vSphere API 5.0 ", alias="createTime")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GuestWindowsFileAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GuestWindowsFileAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


