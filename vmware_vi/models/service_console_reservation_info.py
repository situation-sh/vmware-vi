# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ServiceConsoleReservationInfo(DataObject):
    """
    The ServiceConsoleReservationInfo data object type describes the amount of memory that is being reserved by the service console.  Memory reserved for use by the service console is a hard reservation that cannot be changed except across hardware restarts.  This memory that is reserved for the service console is used primarily to provide system management services. In addition, a small overhead is needed by each virtual machine on the service console.  The only property of the data object that can be changed directly is the serviceConsoleReservedCfg property. This property indicates how much memory should be reserved for the service console on the next boot. In most cases, this amount is the same as the current reservation. 
    """ # noqa: E501
    service_console_reserved_cfg: StrictInt = Field(description="The amount of memory that should be reserved for the service console on the next boot. ", alias="serviceConsoleReservedCfg")
    service_console_reserved: StrictInt = Field(description="The amount of memory that is currently reserved for the service console. ", alias="serviceConsoleReserved")
    unreserved: StrictInt = Field(description="The amount of memory that is not reserved for use by the service console. ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ServiceConsoleReservationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ServiceConsoleReservationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


