# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DistributedVirtualSwitchPortConnection(DataObject):
    """
    The *DistributedVirtualSwitchPortConnection* data object represents a connection or association between a *DistributedVirtualPortgroup* or a *DistributedVirtualPort* and one of the following entities: - Virtual machine virtual NIC   (*VirtualEthernetCardDistributedVirtualPortBackingInfo*) - Host virtual NIC (*HostVirtualNic*) - Physical NIC (*HostNetworkInfo*.*HostNetworkInfo.pnic*)    ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    switch_uuid: StrictStr = Field(description="UUID of the switch (*DistributedVirtualSwitch*.*DistributedVirtualSwitch.uuid*).  ***Since:*** vSphere API 4.0 ", alias="switchUuid")
    portgroup_key: Optional[StrictStr] = Field(default=None, description="Key of the portgroup.  If specified, the connection object represents a connection or an association between a *DistributedVirtualPortgroup* and a Virtual NIC or physical NIC. In this case, setting the *DistributedVirtualSwitchPortConnection.portKey* is not necessary for a early-binding portgroup and is not allowed for a late-binding portgroup. The *DistributedVirtualSwitchPortConnection.portKey* property will be populated by the implementation at the time of port binding.  ***Since:*** vSphere API 4.0 ", alias="portgroupKey")
    port_key: Optional[StrictStr] = Field(default=None, description="Key of the port.  If specified, this object represents a connection or an association between an individual *DistributedVirtualPort* and a Virtual NIC or physical NIC. See *DistributedVirtualSwitchPortConnection.portgroupKey* for more information on populating this property.  ***Since:*** vSphere API 4.0 ", alias="portKey")
    connection_cookie: Optional[StrictInt] = Field(default=None, description="Cookie that represents this *DistributedVirtualSwitchPortConnection* instance for the port.  The cookie value is generated by the Server. The Server ignores any value set by an SDK client.  The same cookie is present in the distributed virtual port configuration (*DistributedVirtualPort*.*DistributedVirtualPort.connectionCookie*) so that the Server can verify that the entity is the rightful connectee of the port.  ***Since:*** vSphere API 4.0 ", alias="connectionCookie")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DistributedVirtualSwitchPortConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DistributedVirtualSwitchPortConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


