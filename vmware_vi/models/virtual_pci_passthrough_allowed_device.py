# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt
from pydantic import Field
from typing_extensions import Annotated
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualPCIPassthroughAllowedDevice(DataObject):
    """
    A tuple of vendorId and deviceId indicating an allowed device for a Dynamic DirectPath device.  ***Since:*** vSphere API 7.0 
    """ # noqa: E501
    vendor_id: StrictInt = Field(description="The vendor ID for this PCI device.  You must use the vendor ID retrieved from the vSphere host or cluster.  ***Since:*** vSphere API 7.0 ", alias="vendorId")
    device_id: StrictInt = Field(description="The device ID of this PCI device.  You must use the device ID retrieved from the vSphere host or cluster.  ***Since:*** vSphere API 7.0 ", alias="deviceId")
    sub_vendor_id: Optional[StrictInt] = Field(default=None, description="The subVendor ID for this PCI device.  If specified, you must use the subVendor ID retrieved from the vSphere host or cluster. Range of legal values is 0x0 to 0xFFFF.  ***Since:*** vSphere API 7.0 ", alias="subVendorId")
    sub_device_id: Optional[StrictInt] = Field(default=None, description="The subDevice ID of this PCI device.  If specified, you must use the subDevice ID retrieved from the vSphere host or cluster. Range of legal values is 0x0 to 0xFFFF.  ***Since:*** vSphere API 7.0 ", alias="subDeviceId")
    revision_id: Optional[Annotated[int, Field(le=32767, strict=True, ge=-32768)]] = Field(default=None, description="The revision ID of this PCI device.  If specified, you must use the revision ID retrieved from the vSphere host or cluster. Range of legal values is 0x0 to 0xFF.  ***Since:*** vSphere API 7.0 ", alias="revisionId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualPCIPassthroughAllowedDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualPCIPassthroughAllowedDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


