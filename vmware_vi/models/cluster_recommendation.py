# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.cluster_action import ClusterAction
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.localizable_message import LocalizableMessage
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterRecommendation(DataObject):
    """
    Recommendation is the base class for any packaged group of actions that are intended to take the system from one state to another one.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    key: StrictStr = Field(description="Key to identify the recommendation when calling applyRecommendation.  ***Since:*** VI API 2.5 ")
    type: StrictStr = Field(description="Type of the recommendation.  This differentiates between various of recommendations aimed at achieving different goals.  ***Since:*** VI API 2.5 ")
    time: datetime = Field(description="The time this recommendation was computed.  ***Since:*** VI API 2.5 ")
    rating: StrictInt = Field(description="A rating of the recommendation.  Valid values range from 1 (lowest confidence) to 5 (highest confidence).  ***Since:*** VI API 2.5 ")
    reason: StrictStr = Field(description="A reason code explaining why this set of migrations is being suggested.  ***Since:*** VI API 2.5 ")
    reason_text: StrictStr = Field(description="Text that provides more information about the reason code for the suggested set of migrations.  ***Since:*** VI API 2.5 ", alias="reasonText")
    warning_text: Optional[StrictStr] = Field(default=None, description="Text that provides warnings about potential adverse implications of applying this recommendation  ***Since:*** vSphere API 6.0 ", alias="warningText")
    warning_details: Optional[LocalizableMessage] = Field(default=None, alias="warningDetails")
    prerequisite: Optional[List[StrictStr]] = Field(default=None, description="This recommendation may depend on some other recommendations.  The prerequisite recommendations are listed by their keys.  ***Since:*** VI API 2.5 ")
    action: Optional[List[ClusterAction]] = Field(default=None, description="List of actions that are executed as part of this recommendation  ***Since:*** VI API 2.5 ")
    target: Optional[ManagedObjectReference] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


