# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.dvs_traffic_filter_config import DvsTrafficFilterConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DvsTrafficFilterConfigSpec(DvsTrafficFilterConfig):
    """
    The specification to reconfigure Traffic Filter.  This specification allows the user to do fine-grained updates for the Traffic Filter in the port settings. If the operation is *remove*, only the *DistributedVirtualPort.key* needs to be specified. If other fields are specified, they will be ignored. We cannot remove an inherited element. Only when the inherited flag is set to false and parent does not have an element with same key this operation succeeds. If the operation is *add*, then *DistributedVirtualPort.key* should not be specified and other fields need to be specified. The inherited flag should be set to false. If the operation is *edit*, then *DistributedVirtualPort.key* needs be specified and specify the other properties that need modification. If the inherited flag is set to true, a *DvsTrafficFilterConfig* object of same key must exist at the parent's level. The property values in the spec object will be ignored and use the values from the parent's *DvsTrafficFilterConfig* object instead. If inherited flag is set to false, then the new modifications will be applied.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    operation: StrictStr = Field(description="Operation type.  See *ConfigSpecOperation_enum* for valid values.  ***Since:*** vSphere API 5.5 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DvsTrafficFilterConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DvsTrafficFilterConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


