# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostConfigManager(DataObject):
    """
    This data object type describes the configuration of a host across products and versions. 
    """ # noqa: E501
    cpu_scheduler: Optional[ManagedObjectReference] = Field(default=None, alias="cpuScheduler")
    datastore_system: Optional[ManagedObjectReference] = Field(default=None, alias="datastoreSystem")
    memory_manager: Optional[ManagedObjectReference] = Field(default=None, alias="memoryManager")
    storage_system: Optional[ManagedObjectReference] = Field(default=None, alias="storageSystem")
    network_system: Optional[ManagedObjectReference] = Field(default=None, alias="networkSystem")
    vmotion_system: Optional[ManagedObjectReference] = Field(default=None, alias="vmotionSystem")
    virtual_nic_manager: Optional[ManagedObjectReference] = Field(default=None, alias="virtualNicManager")
    service_system: Optional[ManagedObjectReference] = Field(default=None, alias="serviceSystem")
    firewall_system: Optional[ManagedObjectReference] = Field(default=None, alias="firewallSystem")
    advanced_option: Optional[ManagedObjectReference] = Field(default=None, alias="advancedOption")
    diagnostic_system: Optional[ManagedObjectReference] = Field(default=None, alias="diagnosticSystem")
    auto_start_manager: Optional[ManagedObjectReference] = Field(default=None, alias="autoStartManager")
    snmp_system: Optional[ManagedObjectReference] = Field(default=None, alias="snmpSystem")
    date_time_system: Optional[ManagedObjectReference] = Field(default=None, alias="dateTimeSystem")
    patch_manager: Optional[ManagedObjectReference] = Field(default=None, alias="patchManager")
    image_config_manager: Optional[ManagedObjectReference] = Field(default=None, alias="imageConfigManager")
    boot_device_system: Optional[ManagedObjectReference] = Field(default=None, alias="bootDeviceSystem")
    firmware_system: Optional[ManagedObjectReference] = Field(default=None, alias="firmwareSystem")
    health_status_system: Optional[ManagedObjectReference] = Field(default=None, alias="healthStatusSystem")
    pci_passthru_system: Optional[ManagedObjectReference] = Field(default=None, alias="pciPassthruSystem")
    license_manager: Optional[ManagedObjectReference] = Field(default=None, alias="licenseManager")
    kernel_module_system: Optional[ManagedObjectReference] = Field(default=None, alias="kernelModuleSystem")
    authentication_manager: Optional[ManagedObjectReference] = Field(default=None, alias="authenticationManager")
    power_system: Optional[ManagedObjectReference] = Field(default=None, alias="powerSystem")
    cache_configuration_manager: Optional[ManagedObjectReference] = Field(default=None, alias="cacheConfigurationManager")
    esx_agent_host_manager: Optional[ManagedObjectReference] = Field(default=None, alias="esxAgentHostManager")
    iscsi_manager: Optional[ManagedObjectReference] = Field(default=None, alias="iscsiManager")
    v_flash_manager: Optional[ManagedObjectReference] = Field(default=None, alias="vFlashManager")
    vsan_system: Optional[ManagedObjectReference] = Field(default=None, alias="vsanSystem")
    message_bus_proxy: Optional[ManagedObjectReference] = Field(default=None, alias="messageBusProxy")
    user_directory: Optional[ManagedObjectReference] = Field(default=None, alias="userDirectory")
    account_manager: Optional[ManagedObjectReference] = Field(default=None, alias="accountManager")
    host_access_manager: Optional[ManagedObjectReference] = Field(default=None, alias="hostAccessManager")
    graphics_manager: Optional[ManagedObjectReference] = Field(default=None, alias="graphicsManager")
    vsan_internal_system: Optional[ManagedObjectReference] = Field(default=None, alias="vsanInternalSystem")
    certificate_manager: Optional[ManagedObjectReference] = Field(default=None, alias="certificateManager")
    crypto_manager: Optional[ManagedObjectReference] = Field(default=None, alias="cryptoManager")
    nvdimm_system: Optional[ManagedObjectReference] = Field(default=None, alias="nvdimmSystem")
    assignable_hardware_manager: Optional[ManagedObjectReference] = Field(default=None, alias="assignableHardwareManager")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostConfigManager from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostConfigManager from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


