# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import SecretStr, StrictStr
from pydantic import Field
from vmware_vi.models.guest_authentication import GuestAuthentication
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SAMLTokenAuthentication(GuestAuthentication):
    """
    SAMLTokenAuthentication contains the information necessary to authenticate within a guest using a SAML bearer token.  SAML token authentication relies on a guest alias that associates a guest account with the subject and certificate encoded in a SAML token obtained from the VMware SSO Server. - Use the *GuestAliasManager*.   *GuestAliasManager.AddGuestAlias* method to create a guest   alias. - Use a SAMLTokenAuthentication object for the   auth parameter to guest operations methods.    After you have created an alias, you can use SAML token authentication for guest operations methods. Do not use SAML token authentication for the *GuestAuthManager.AcquireCredentialsInGuest* and *GuestAuthManager.ReleaseCredentialsInGuest* methods.  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    token: SecretStr = Field(description="The SAML bearer token.  ***Since:*** vSphere API 6.0 ")
    username: Optional[StrictStr] = Field(default=None, description="This is the guest user to be associated with the authentication.  If none is specified, a guest dependent mapping will decide what user account is applied.  ***Since:*** vSphere API 6.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SAMLTokenAuthentication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SAMLTokenAuthentication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


