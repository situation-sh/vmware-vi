# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.dynamic_property import DynamicProperty
from vmware_vi.models.virtual_device import VirtualDevice
from vmware_vi.models.virtual_ethernet_card_resource_allocation import VirtualEthernetCardResourceAllocation
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualEthernetCard(VirtualDevice):
    """
    The *VirtualEthernetCard* data object contains the properties of an Ethernet adapter attached to a virtual machine. 
    """ # noqa: E501
    dynamic_property: Optional[List[DynamicProperty]] = Field(default=None, description="Set of dynamic properties.  This property is optional because only the properties of an object that are unknown to a client will be part of this set. This property is not readonly just in case we want to send such properties from a client in the future. ", alias="dynamicProperty")
    address_type: Optional[StrictStr] = Field(default=None, description="MAC address type.  Valid values for address type are: <dl> <dt>Manual</dt> <dd>Statically assigned MAC address.</dd> <dt>Generated</dt> <dd>Automatically generated MAC address.</dd> <dt>Assigned</dt> <dd>MAC address assigned by VirtualCenter.</dd> </dl> ", alias="addressType")
    mac_address: Optional[StrictStr] = Field(default=None, description="MAC address assigned to the virtual network adapter.  Clients can set this property to any of the allowed address types. The server might override the specified value for \"Generated\" or \"Assigned\" if it does not fall in the right ranges or is determined to be a duplicate. ", alias="macAddress")
    wake_on_lan_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether wake-on-LAN is enabled on this virtual network adapter.  Clients can set this property to selectively enable or disable wake-on-LAN. ", alias="wakeOnLanEnabled")
    resource_allocation: Optional[VirtualEthernetCardResourceAllocation] = Field(default=None, alias="resourceAllocation")
    external_id: Optional[StrictStr] = Field(default=None, description="An ID assigned to the virtual network adapter by external management plane or controller.  The value and format of this property is determined by external management plane or controller, and vSphere doesn't do any validation. It's also up to external management plane or controller to set, unset or maintain this property. Setting this property with an empty string value will unset the property.  ***Since:*** vSphere API 6.0 ", alias="externalId")
    upt_compatibility_enabled: Optional[StrictBool] = Field(default=None, description="Deprecated as of vSphere API 8.0. VMDirectPath Gen 2 is no longer supported and there is no replacement.  Indicates whether UPT(Universal Pass-through) compatibility is enabled on this network adapter.  UPT is only compatible for Vmxnet3 adapter. Clients can set this property enabled or disabled if ethernet virtual device is Vmxnet3.  ***Since:*** vSphere API 6.0 ", alias="uptCompatibilityEnabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','VirtualE1000': 'VirtualE1000','VirtualE1000e': 'VirtualE1000e','VirtualPCNet32': 'VirtualPCNet32','VirtualSriovEthernetCard': 'VirtualSriovEthernetCard','VirtualVmxnet': 'VirtualVmxnet','VirtualVmxnet2': 'VirtualVmxnet2','VirtualVmxnet3': 'VirtualVmxnet3','VirtualVmxnet3Vrdma': 'VirtualVmxnet3Vrdma'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualEthernetCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualEthernetCard from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("VirtualEthernetCard failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.virtual_e1000 import VirtualE1000
from vmware_vi.models.virtual_e1000e import VirtualE1000e
from vmware_vi.models.virtual_pc_net32 import VirtualPCNet32
from vmware_vi.models.virtual_sriov_ethernet_card import VirtualSriovEthernetCard
from vmware_vi.models.virtual_vmxnet import VirtualVmxnet
from vmware_vi.models.virtual_vmxnet2 import VirtualVmxnet2
from vmware_vi.models.virtual_vmxnet3 import VirtualVmxnet3
from vmware_vi.models.virtual_vmxnet3_vrdma import VirtualVmxnet3Vrdma
# TODO: Rewrite to not use raise_errors
VirtualEthernetCard.model_rebuild(raise_errors=False)

