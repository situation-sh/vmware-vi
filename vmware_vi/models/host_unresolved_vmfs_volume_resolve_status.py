# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostUnresolvedVmfsVolumeResolveStatus(DataObject):
    """
    Data object that describes the resolvability of a volume.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    resolvable: StrictBool = Field(description="Can this volume be resolved? There may be other reasons a volume cannot be resolved other than the fact that it is incomplete.  This boolean will authoritatively indicate if the server can resolve this volume.  ***Since:*** vSphere API 4.0 ")
    incomplete_extents: Optional[StrictBool] = Field(default=None, description="Is the list of extents for the volume a partial list? A volume can only be resignatured if all extents composing that volume are available.  Hence, a volume with a partial extent list cannot be resignatured.  In cases where this information is not known for a volume, this property will be unset.  ***Since:*** vSphere API 4.0 ", alias="incompleteExtents")
    multiple_copies: Optional[StrictBool] = Field(default=None, description="Are there multiple copies of extents for this volume? If any extent of the volume has multiple copies then the extents to be resolved must be explicitly specified when resolving this volume.  In cases where this information is not known for a volume, this property will be unset.  ***Since:*** vSphere API 4.0 ", alias="multipleCopies")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostUnresolvedVmfsVolumeResolveStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostUnresolvedVmfsVolumeResolveStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


