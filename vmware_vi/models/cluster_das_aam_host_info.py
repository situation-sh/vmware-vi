# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.cluster_das_aam_node_state import ClusterDasAamNodeState
from vmware_vi.models.cluster_das_host_info import ClusterDasHostInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterDasAamHostInfo(ClusterDasHostInfo):
    """
    Deprecated as of vSphere API 5.0, this object is no longer returned by vCenter Server. Availability information is now reported using *HostRuntimeInfo.dasHostState*.  The *ClusterDasAamHostInfo* object contains a list of the ESX hosts in an HA cluster and a list that identifies the _primary_ hosts.  (AAM is a component of the HA service.) The primary hosts share the joint responsibility of maintaining all cluster state and one will initiate failover actions should a failure occur.  When you add an ESX host to a vSphere HA cluster, the host downloads HA agent components from the vCenter Server. The HA agent maintains communication with the vCenter Server.  When the host downloads the HA agent, the host configures the agent to communicate with other agents in the cluster. A host that joins the cluster communicates with an existing primary host to complete its configuration (except when you are adding the first host to the cluster). - The first five hosts added to the cluster are designated   as primary hosts. All subsequent hosts are designated as secondary hosts. - If a primary host is removed from the cluster,   the vCenter Server promotes another host to primary status. - There must be at least one functional primary host for vSphere HA   to operate correctly. If there is not an available primary host   (no response), host configuration for HA will fail.   If there is a total cluster failure, HA will begin restarting virtual   machines as soon as one host recovers and its HA agent is up and running.    One of the primary hosts assumes the role of the active primary host. The active primary host responsibilities include the following activities: - Decides where to restart virtual machines. - Tracks failed restart attempts. - Determines when it is appropriate to continue attempts to restart   a virtual machine.    If the active primary host fails, another primary host replaces it.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    host_das_state: Optional[List[ClusterDasAamNodeState]] = Field(default=None, description="The state of HA on the hosts.  ***Since:*** vSphere API 4.0 ", alias="hostDasState")
    primary_hosts: Optional[List[StrictStr]] = Field(default=None, description="The list of primary hosts.  ***Since:*** vSphere API 4.0 ", alias="primaryHosts")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterDasAamHostInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterDasAamHostInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


