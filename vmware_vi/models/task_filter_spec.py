# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.task_filter_spec_by_entity import TaskFilterSpecByEntity
from vmware_vi.models.task_filter_spec_by_time import TaskFilterSpecByTime
from vmware_vi.models.task_filter_spec_by_username import TaskFilterSpecByUsername
from vmware_vi.models.task_info_state_enum import TaskInfoStateEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaskFilterSpec(DataObject):
    """
    This data object type defines the specification for the task filter used to query tasks in the history collector database.  The client creates a task history collector with a filter specification, then retrieves the tasks from the task history collector. 
    """ # noqa: E501
    entity: Optional[TaskFilterSpecByEntity] = None
    time: Optional[TaskFilterSpecByTime] = None
    user_name: Optional[TaskFilterSpecByUsername] = Field(default=None, alias="userName")
    activation_id: Optional[List[StrictStr]] = Field(default=None, description="This property, if provided, limits the set of collected tasks to those associated with the specified activation Ids.  ***Since:*** vSphere API 6.0 ", alias="activationId")
    state: Optional[List[TaskInfoStateEnum]] = Field(default=None, description="This property, if provided, limits the set of collected tasks by their states.  Task states are enumerated in *State*. If not provided, tasks are collected regardless of their state. ")
    alarm: Optional[ManagedObjectReference] = None
    scheduled_task: Optional[ManagedObjectReference] = Field(default=None, alias="scheduledTask")
    event_chain_id: Optional[List[StrictInt]] = Field(default=None, description="The filter specification for retrieving tasks by chain ID.  If it is set, tasks not with the given *TaskInfo.eventChainId* will be filtered out. If the property is not set, tasks' chain ID is disregarded for filtering purposes.  ***Since:*** vSphere API 4.0 ", alias="eventChainId")
    tag: Optional[List[StrictStr]] = Field(default=None, description="The filter specification for retrieving tasks by *tag*.  If it is set, tasks not with the given tag(s) will be filtered out. If the property is not set, tasks' tag is disregarded for filtering purposes. If it is set, and includes an empty string, tasks without a tag will be returned.  ***Since:*** vSphere API 4.0 ")
    parent_task_key: Optional[List[StrictStr]] = Field(default=None, description="The filter specification for retrieving tasks by *TaskInfo.parentTaskKey*.  If it is set, tasks not with the given parentTaskKey(s) will be filtered out. If the property is not set, tasks' parentTaskKey is disregarded for filtering purposes.  ***Since:*** vSphere API 4.0 ", alias="parentTaskKey")
    root_task_key: Optional[List[StrictStr]] = Field(default=None, description="The filter specification for retrieving tasks by *TaskInfo.rootTaskKey*.  If it is set, tasks not with the given rootTaskKey(s) will be filtered out. If the property is not set, tasks' rootTaskKey is disregarded for filtering purposes.  ***Since:*** vSphere API 4.0 ", alias="rootTaskKey")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaskFilterSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaskFilterSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


