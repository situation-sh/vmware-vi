# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.evc_mode import EVCMode
from vmware_vi.models.feature_evc_mode import FeatureEVCMode
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Capability(DataObject):
    """
    A particular product may or may not support certain features.  This data object indicates whether or not a service instance implements these features. This data object type indicates the circumstances under which an operation throws a *NotSupported* fault.  Support for some features is indicated by the presence or absence of the manager object from the service instance. For example, the AlarmManager manager object indicates collecting alarms is supported. Other features indicate whether or not a given operation on an object throws a *NotSupported* fault.  Some capabilities depend on the host or virtual machine version. These are specified by using the vim.host.Capability and vim.vm.Capability objects. 
    """ # noqa: E501
    provisioning_supported: StrictBool = Field(description="Indicates whether or not the service instance supports provisioning.  For example, the *CloneVM* operation. ", alias="provisioningSupported")
    multi_host_supported: StrictBool = Field(description="Indicates whether or not the service instance supports multiple hosts. ", alias="multiHostSupported")
    user_shell_access_supported: StrictBool = Field(description="Flag indicating whether host user accounts should have the option to be granted shell access  ***Since:*** VI API 2.5 ", alias="userShellAccessSupported")
    supported_evc_mode: Optional[List[EVCMode]] = Field(default=None, description="All supported Enhanced VMotion Compatibility modes.  ***Since:*** vSphere API 4.0 ", alias="supportedEVCMode")
    supported_evc_graphics_mode: Optional[List[FeatureEVCMode]] = Field(default=None, description="All supported Enhanced VMotion Compatibility Graphics modes.  ***Since:*** vSphere API 7.0.1.0 ", alias="supportedEVCGraphicsMode")
    network_backup_and_restore_supported: Optional[StrictBool] = Field(default=None, description="Indicates whether network backup and restore feature is supported.  ***Since:*** vSphere API 5.1 ", alias="networkBackupAndRestoreSupported")
    ft_drs_without_evc_supported: Optional[StrictBool] = Field(default=None, description="Is DRS supported for Fault Tolerance VMs without enabling EVC.  ***Since:*** vSphere API 6.7 ", alias="ftDrsWithoutEvcSupported")
    hci_workflow_supported: Optional[StrictBool] = Field(default=None, description="Specifies if the workflow for setting up a HCI cluster is supported.  ***Since:*** vSphere API 6.7.1 ", alias="hciWorkflowSupported")
    compute_policy_version: Optional[StrictInt] = Field(default=None, description="Specifies the supported compute policy version.  ***Since:*** vSphere API 6.8.7 ", alias="computePolicyVersion")
    cluster_placement_supported: Optional[StrictBool] = Field(default=None, alias="clusterPlacementSupported")
    lifecycle_management_supported: Optional[StrictBool] = Field(default=None, description="Specifies if lifecycle management of a Cluster is supported.  ***Since:*** vSphere API 7.0 ", alias="lifecycleManagementSupported")
    host_seeding_supported: Optional[StrictBool] = Field(default=None, description="Specifies if host seeding for a cluster is supported.  ***Since:*** vSphere API 7.0.2.0 ", alias="hostSeedingSupported")
    scalable_shares_supported: Optional[StrictBool] = Field(default=None, description="Specifies if scalable shares for resource pools is supported.  ***Since:*** vSphere API 7.0 ", alias="scalableSharesSupported")
    hadcs_supported: Optional[StrictBool] = Field(default=None, description="Specifies if highly available distributed clustering service is supported.  ***Since:*** vSphere API 7.0.1.1 ", alias="hadcsSupported")
    config_mgmt_supported: Optional[StrictBool] = Field(default=None, description="Specifies if desired configuration management platform is supported on the cluster. ", alias="configMgmtSupported")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Capability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Capability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


