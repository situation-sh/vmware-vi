# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_plug_store_topology_target import HostPlugStoreTopologyTarget
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostPlugStoreTopologyPath(DataObject):
    """
    This data object type is an association class that describes a Path and its associated Device.  A Path may be claimed by at most one Device.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    key: StrictStr = Field(description="The identifier for the Path.  ***Since:*** vSphere API 4.0 ")
    name: StrictStr = Field(description="Name of path.  Use this property to correlate this path object to other path objects.  The state of the Path can be retrieved from the data object (@link vim.host.MultipathStateInfo.Path} on the *HostMultipathStateInfo* data object.  Use this name to configure LogicalUnit multipathing policy using *HostStorageSystem.EnableMultipathPath* and *HostStorageSystem.DisableMultipathPath*.  ***Since:*** vSphere API 4.0 ")
    channel_number: Optional[StrictInt] = Field(default=None, description="The channel number for a path if applicable.  ***Since:*** vSphere API 4.0 ", alias="channelNumber")
    target_number: Optional[StrictInt] = Field(default=None, description="The target number for a path if applicable.  The target number is not guaranteed to be consistent across reboots or rescans of the adapter.  ***Since:*** vSphere API 4.0 ", alias="targetNumber")
    lun_number: Optional[StrictInt] = Field(default=None, description="The LUN number for a path if applicable.  ***Since:*** vSphere API 4.0 ", alias="lunNumber")
    adapter: Optional[HostPlugStoreTopologyAdapter] = None
    target: Optional[HostPlugStoreTopologyTarget] = None
    device: Optional[HostPlugStoreTopologyDevice] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostPlugStoreTopologyPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostPlugStoreTopologyPath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj

from vmware_vi.models.host_plug_store_topology_adapter import HostPlugStoreTopologyAdapter
from vmware_vi.models.host_plug_store_topology_device import HostPlugStoreTopologyDevice
# TODO: Rewrite to not use raise_errors
HostPlugStoreTopologyPath.model_rebuild(raise_errors=False)

