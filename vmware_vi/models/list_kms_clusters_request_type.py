# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ListKmsClustersRequestType(BaseModel):
    """
    The parameters of *CryptoManagerKmip.ListKmsClusters*. 
    """ # noqa: E501
    include_kms_servers: Optional[StrictBool] = Field(default=None, description="\\[in\\] Whether to list KMS servers information in the cluster. By default will not include the KMS servers information. ", alias="includeKmsServers")
    management_type_filter: Optional[StrictInt] = Field(default=None, description="\\[in\\] The KMS cluster management type filter. Bit map values: 0x01 - Return VC managed Key Providers registered in the CryptoManager. 0x02 - Return Trusted Key Providers registered in the CryptoManager. 0x04 - Return Trusted Key Providers which are not registered with the CryptoManager. 0x08 - Return Native Key Providers. others - reserved, will be ignored If omitted or -1, then all kinds of Key Providers will be returned. ", alias="managementTypeFilter")
    status_filter: Optional[StrictInt] = Field(default=None, description="\\[in\\] The Key Provider status filter. Bit map values: 0x01 - Return active Key Providers. 0x02 - Return inactive Key Providers. others - reserved, will be ignored If omitted or -1, then all status of Key Providers will be returned. ", alias="statusFilter")
    __properties: ClassVar[List[str]] = ["includeKmsServers", "managementTypeFilter", "statusFilter"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ListKmsClustersRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ListKmsClustersRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includeKmsServers": obj.get("includeKmsServers"),
            "managementTypeFilter": obj.get("managementTypeFilter"),
            "statusFilter": obj.get("statusFilter")
        })
        return _obj


