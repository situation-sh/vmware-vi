# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.import_spec import ImportSpec
from vmware_vi.models.method_fault import MethodFault
from vmware_vi.models.ovf_file_item import OvfFileItem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OvfCreateImportSpecResult(DataObject):
    """
    The CreateImportSpecResult contains all information regarding the import that can be extracted from the OVF descriptor.  For example, this includes the list of items that the caller must upload in order to complete the import, but not the list of URLs to which the files must be uploaded. These paths are not known until the VMs have been created, ie. until *ResourcePool.importVApp* has been called.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    import_spec: Optional[ImportSpec] = Field(default=None, alias="importSpec")
    file_item: Optional[List[OvfFileItem]] = Field(default=None, description="The files that must be uploaded by the caller as part of importing the entity.  The files must be uploaded in order, because some of them may be delta files that patch already-uploaded files.  ***Since:*** vSphere API 4.0 ", alias="fileItem")
    warning: Optional[List[MethodFault]] = Field(default=None, description="Non-fatal warnings from the processing.  The ImportSpec will be valid, but the user may choose to reject it based on these warnings.  ***Since:*** vSphere API 4.0 ")
    error: Optional[List[MethodFault]] = Field(default=None, description="Errors that happened during processing.  Something will be wrong with the ImportSpec, or it is not present.  ***Since:*** vSphere API 4.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OvfCreateImportSpecResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OvfCreateImportSpecResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


