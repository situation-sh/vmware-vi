# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PerfProviderSummary(DataObject):
    """
    This data object type contains information about a performance provider, the type of statistics it generates, and the *PerfProviderSummary.refreshRate* for statistics generation.  A performance provider is any *managed object* that generates real-time or historical statistics (or both&#151;the *PerfProviderSummary.currentSupported* and *PerfProviderSummary.summarySupported* properties are not mutually exclusive). 
    """ # noqa: E501
    entity: ManagedObjectReference
    current_supported: StrictBool = Field(description="True if this entity supports real-time (current) statistics; false if it does not.  If this property is true for an entity, a client application can set the *PerfQuerySpec.intervalId* of the *PerfQuerySpec* (passed to the *PerformanceManager.QueryPerf* operation) to the *PerfProviderSummary.refreshRate* to obtain the maximum information possible for the entity. ", alias="currentSupported")
    summary_supported: StrictBool = Field(description="True if this entity supports historical (aggregated) statistics; false if it does not.  When this property is true for an entity, a client application can set the *PerfQuerySpec.intervalId* of *PerformanceManager.QueryPerf* to one of the historical *intervals* to obtain historical statistics for this entity. ", alias="summarySupported")
    refresh_rate: Optional[StrictInt] = Field(default=None, description="Number of seconds between the generation of each counter.  This value applies only to entities that support real-time (current) statistics&#46; ", alias="refreshRate")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PerfProviderSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PerfProviderSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


