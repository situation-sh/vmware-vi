# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.evc_config_fault import EVCConfigFault
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ActiveVMsBlockingEVC(EVCConfigFault):
    """
    An attempt to enable Enhanced VMotion Compatibility on a cluster, or to select a less-featureful EVC mode for a cluster where EVC is already enabled, has failed for the following reason: - The cluster contains hosts that expose additional compatibility-   relevant CPU features beyond those present in the baseline of the   requested EVC mode. - Those hosts have powered-on or suspended virtual machines.    Therefore the EVC configuration has been rejected since it may suppress CPU features that are currently in-use.  ***Since:*** VI API 2.5u2 
    """ # noqa: E501
    evc_mode: Optional[StrictStr] = Field(default=None, description="The requested EVC mode.  ***Since:*** vSphere API 4.0 ", alias="evcMode")
    host: Optional[List[ManagedObjectReference]] = Field(default=None, description="Hosts with active virtual machines that are blocking the operation, because the hosts expose compatibility-relevant CPU features not present in the baseline of the requested EVC mode.  Note that in rare cases, a host may be on this list even if its *maxEVCModeKey* corresponds to the requested EVC mode. This means that even though that EVC mode is the best match for the host's hardware, the host still has some features beyond those present in the baseline for that EVC mode.  ***Since:*** vSphere API 4.0  Refers instances of *HostSystem*. ")
    host_name: Optional[List[StrictStr]] = Field(default=None, description="The names of the hosts in the host array.  ***Since:*** vSphere API 4.0 ", alias="hostName")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ActiveVMsBlockingEVC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ActiveVMsBlockingEVC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


