# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from vmware_vi.models.compute_resource_config_spec import ComputeResourceConfigSpec
from vmware_vi.models.folder_new_host_spec import FolderNewHostSpec
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BatchAddHostsToClusterRequestType(BaseModel):
    """
    The parameters of *Folder.BatchAddHostsToCluster_Task*. 
    """ # noqa: E501
    cluster: ManagedObjectReference
    new_hosts: Optional[List[FolderNewHostSpec]] = Field(default=None, description="Specifies a list of new hosts to be added to the cluster. Hosts are first added as standalone hosts.  ***Since:*** vSphere API 6.7.1 ", alias="newHosts")
    existing_hosts: Optional[List[ManagedObjectReference]] = Field(default=None, description="Specifies a list of existing hosts to be added to the cluster. Hosts are first moved to the desired state before moving them to cluster.  Refers instances of *HostSystem*. ", alias="existingHosts")
    comp_res_spec: Optional[ComputeResourceConfigSpec] = Field(default=None, alias="compResSpec")
    desired_state: Optional[StrictStr] = Field(default=None, description="Specifies desired state for hosts once added to the cluster. If not specified, hosts are added to the cluster in their current state. See *FolderDesiredHostState_enum* for valid values. ", alias="desiredState")
    __properties: ClassVar[List[str]] = ["cluster", "newHosts", "existingHosts", "compResSpec", "desiredState"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BatchAddHostsToClusterRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in new_hosts (list)
        _items = []
        if self.new_hosts:
            for _item in self.new_hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['newHosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in existing_hosts (list)
        _items = []
        if self.existing_hosts:
            for _item in self.existing_hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['existingHosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of comp_res_spec
        if self.comp_res_spec:
            _dict['compResSpec'] = self.comp_res_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BatchAddHostsToClusterRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cluster": ManagedObjectReference.from_dict(obj.get("cluster")) if obj.get("cluster") is not None else None,
            "newHosts": [FolderNewHostSpec.from_dict(_item) for _item in obj.get("newHosts")] if obj.get("newHosts") is not None else None,
            "existingHosts": [ManagedObjectReference.from_dict(_item) for _item in obj.get("existingHosts")] if obj.get("existingHosts") is not None else None,
            "compResSpec": ComputeResourceConfigSpec.from_dict(obj.get("compResSpec")) if obj.get("compResSpec") is not None else None,
            "desiredState": obj.get("desiredState")
        })
        return _obj


