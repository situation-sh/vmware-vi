# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.cluster_vm_readiness import ClusterVmReadiness
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterOrchestrationInfo(DataObject):
    """
    vSphere cluster VM orchestration settings.  Used by vSphere HA when restarting failed VMs. For example, if a host fails, vSphere HA identifies the list of VMs to be restarted. The order in which the failed VMs to be restarted is determined by: - VM restart priority setting (*ClusterDasVmSettings.restartPriority*).   Lower priority VMs are restarted only after higher priority VMs are   restarted and ready (*ClusterVmReadiness*). - VM dependency rule (*ClusterDependencyRuleInfo*). If a VM   depends on other VMs, then it will be restarted only after all the VMs in   its dependency list are ready. Cyclic dependency is not permitted across   VMs. Also, higher priority VMs cannot depend on lower priority VMs.    ***Since:*** vSphere API 6.5 
    """ # noqa: E501
    default_vm_readiness: Optional[ClusterVmReadiness] = Field(default=None, alias="defaultVmReadiness")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterOrchestrationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterOrchestrationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


