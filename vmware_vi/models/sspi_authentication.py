# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.guest_authentication import GuestAuthentication
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SSPIAuthentication(GuestAuthentication):
    """
    SSPIAuthentication contains the information necessary to initiate a ticketed authentication session in the guest using SSPI credentials.  The ticketed session is not stateless and stores state inside of the guest.  To use SSPIAuthentication, populate sspiToken with a base64 encoded SSPI token. Then call *GuestAuthManager.AcquireCredentialsInGuest* with the SSPIAuthentication object and no sessionID. After issuing the *GuestAuthManager.AcquireCredentialsInGuest* call, a *GuestAuthenticationChallenge* will be thrown. Use the serverChallenge sspiToken in *GuestAuthenticationChallenge* to generate the proper SSPI response token. Populate an SSPIAuthentication object with the base64 encoded SSPI response token, and call *GuestAuthManager.AcquireCredentialsInGuest* with the SSPIAuthentication object and the sessionID found in *GuestAuthenticationChallenge*.  Successful authentication will result in a *TicketedSessionAuthentication* object being returned. You can use the *TicketedSessionAuthentication* in any guest operations function call. You should NOT attempt to use SSPIAuthentication in any guest operations function call.  When you no longer need the *TicketedSessionAuthentication* object, you should call *GuestAuthManager.ReleaseCredentialsInGuest* to free associated resources and session data.  Usage notes: SSPI authentication has the same limitations as a duplicated primary token obtained from the Windows API function LogonUser with the LOGON32\\_LOGON\\_NETWORK logon type. This will affect programs started with *GuestProcessManager.StartProgramInGuest*. For example, launched programs will be unable to use WMI functions unless the \"Remote Enable\" privilege is enabled for the user. Similarly, access to network resources may fail due to the limitations of the token.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    sspi_token: StrictStr = Field(description="This contains a base64 encoded SSPI Token.  ***Since:*** vSphere API 5.0 ", alias="sspiToken")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SSPIAuthentication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SSPIAuthentication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


