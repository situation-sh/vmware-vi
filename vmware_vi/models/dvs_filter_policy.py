# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.dvs_filter_config import DvsFilterConfig
from vmware_vi.models.inheritable_policy import InheritablePolicy
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DvsFilterPolicy(InheritablePolicy):
    """
    This class defines Network Filter Policy.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    filter_config: Optional[List[DvsFilterConfig]] = Field(default=None, description="List of Network Filter Configurations.  In an update operation, the array can contain all *DvsTrafficFilterConfigSpec* objects or all *DvsFilterConfig* and *DvsTrafficFilterConfig* object, but not mixed of Config and Spec objects. If array of *DvsFilterConfigSpec* and *DvsTrafficFilterConfigSpec* is used for updating Network Filter then only the Network Filters matching *DistributedVirtualPort.key* / *DistributedVirtualPort.key* is updated. If array of *DvsFilterConfig* and *DvsTrafficFilterConfig* is used for updating port settings, the Network Filter settings will be overridden with the new array specified. The specified array should only contain *DvsFilterConfig* and *DvsTrafficFilterConfig* objects with *InheritablePolicy.inherited* / *InheritablePolicy.inherited* set to false. *DvsFilterConfig*/*DvsTrafficFilterConfig* objects with *InheritablePolicy.inherited*/*InheritablePolicy.inherited* as true in the specified array will be ignored. The updated result will include *DvsFilterConfig*/*DvsTrafficFilterConfig* objects inherited from parent, if any.  ***Since:*** vSphere API 5.5 ", alias="filterConfig")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DvsFilterPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DvsFilterPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


