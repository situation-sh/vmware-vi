# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostInternetScsiHbaIPCapabilities(DataObject):
    """
    The IP Capabilities for the host bus adapter 
    """ # noqa: E501
    address_settable: StrictBool = Field(description="True if the host bus adapter supports setting its IPv4 address. ", alias="addressSettable")
    ip_configuration_method_settable: StrictBool = Field(description="True if the host bus adapter supports DHCPv4. ", alias="ipConfigurationMethodSettable")
    subnet_mask_settable: StrictBool = Field(description="True if the host bus adapter supports setting its IPv4 subnet mask. ", alias="subnetMaskSettable")
    default_gateway_settable: StrictBool = Field(description="True if the host bus adapter supports setting its IPv4 gateway. ", alias="defaultGatewaySettable")
    primary_dns_server_address_settable: StrictBool = Field(description="True if the host bus adapter supports setting its primary DNS. ", alias="primaryDnsServerAddressSettable")
    alternate_dns_server_address_settable: StrictBool = Field(description="True if the host bus adapter supports setting its secondary DNS. ", alias="alternateDnsServerAddressSettable")
    ipv6_supported: Optional[StrictBool] = Field(default=None, description="True if the host bus adapter supports the use of IPv6 addresses  ***Since:*** vSphere API 4.0 ", alias="ipv6Supported")
    arp_redirect_settable: Optional[StrictBool] = Field(default=None, description="True if the host bus adapter supports setting its ARP Redirect value  ***Since:*** vSphere API 4.0 ", alias="arpRedirectSettable")
    mtu_settable: Optional[StrictBool] = Field(default=None, description="True if the host bus adapter supports setting its MTU, (for Jumbo Frames, etc)  ***Since:*** vSphere API 4.0 ", alias="mtuSettable")
    host_name_as_target_address: Optional[StrictBool] = Field(default=None, description="True if the discovery and static targets can be configured with a host name as opposed to an IP address.  ***Since:*** vSphere API 4.0 ", alias="hostNameAsTargetAddress")
    name_alias_settable: Optional[StrictBool] = Field(default=None, description="True if the host bus adapter supports setting its name and alias  ***Since:*** vSphere API 4.1 ", alias="nameAliasSettable")
    ipv4_enable_settable: Optional[StrictBool] = Field(default=None, description="True if IPv4 addresssing can be enabled or disabled on the host bus adapter.  ***Since:*** vSphere API 6.0 ", alias="ipv4EnableSettable")
    ipv6_enable_settable: Optional[StrictBool] = Field(default=None, description="True if IPv6 addresssing can be enabled or disabled on the host bus adapter.  ***Since:*** vSphere API 6.0 ", alias="ipv6EnableSettable")
    ipv6_prefix_length_settable: Optional[StrictBool] = Field(default=None, description="True if the Host bus adapter supports setting IPv6 Prefix Length.  ***Since:*** vSphere API 6.0 ", alias="ipv6PrefixLengthSettable")
    ipv6_prefix_length: Optional[StrictInt] = Field(default=None, description="Provides the value that user should be using if host bus adapter does not support changing of prefix length.  ***Since:*** vSphere API 6.0 ", alias="ipv6PrefixLength")
    ipv6_dhcp_configuration_settable: Optional[StrictBool] = Field(default=None, description="True if the Host bus adapter supports DHCPv6 configuration.  ***Since:*** vSphere API 6.0 ", alias="ipv6DhcpConfigurationSettable")
    ipv6_link_local_auto_configuration_settable: Optional[StrictBool] = Field(default=None, description="True if the Host bus adapter supports setting configuration of its IPv6 link local address User can specify link local static address if link local auto configuration is set to false.  link local address usually starts with fe80: and has prefix 64.  ***Since:*** vSphere API 6.0 ", alias="ipv6LinkLocalAutoConfigurationSettable")
    ipv6_router_advertisement_configuration_settable: Optional[StrictBool] = Field(default=None, description="True if the Host bus adapter supports router advertisement configuration method.  Note: Currently Qlogic adapter does not support plumbing of any user specified static address if router advertisement method is enabled.  ***Since:*** vSphere API 6.0 ", alias="ipv6RouterAdvertisementConfigurationSettable")
    ipv6_default_gateway_settable: Optional[StrictBool] = Field(default=None, description="True if the Host bus adapter supports setting its IPv6 default gateway.  ***Since:*** vSphere API 6.0 ", alias="ipv6DefaultGatewaySettable")
    ipv6_max_static_addresses_supported: Optional[StrictInt] = Field(default=None, description="The maximum number of supported IPv6 static addresses on the host bus adapter that user can set.  ***Since:*** vSphere API 6.0 ", alias="ipv6MaxStaticAddressesSupported")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostInternetScsiHbaIPCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostInternetScsiHbaIPCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


