# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.host_member_uplink_health_check_result import HostMemberUplinkHealthCheckResult
from vmware_vi.models.numeric_range import NumericRange
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VMwareDVSMtuHealthCheckResult(HostMemberUplinkHealthCheckResult):
    """
    This class defines MTU health check result of an uplink port in the VMware vSphered Distributed Switch.  ***Since:*** vSphere API 5.1 
    """ # noqa: E501
    mtu_mismatch: StrictBool = Field(description="True if the MTU configured in the vSphere Distributed Switch is different from the value configured in the Physical NIC, else false.  If it is true, MTU health check is stopped. In this case, *VMwareDVSMtuHealthCheckResult.vlanSupportSwitchMtu* and *VMwareDVSMtuHealthCheckResult.vlanNotSupportSwitchMtu* will not have values.  ***Since:*** vSphere API 5.1 ", alias="mtuMismatch")
    vlan_support_switch_mtu: Optional[List[NumericRange]] = Field(default=None, description="The vlan's MTU setting on physical switch allows vSphere Distributed Switch max MTU size packets passing.  If the vlan is not a range, but a single Id, both start and end have the same value with the single vlan Id.  ***Since:*** vSphere API 5.1 ", alias="vlanSupportSwitchMtu")
    vlan_not_support_switch_mtu: Optional[List[NumericRange]] = Field(default=None, description="The vlan's MTU setting on physical switch does not allow vSphere Distributed Switch max MTU size packets passing.  If the vlan is not a range, but a single Id, both start and end have the same value with the single vlan Id.  ***Since:*** vSphere API 5.1 ", alias="vlanNotSupportSwitchMtu")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VMwareDVSMtuHealthCheckResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VMwareDVSMtuHealthCheckResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


