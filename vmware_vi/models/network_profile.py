# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.apply_profile import ApplyProfile
from vmware_vi.models.dvs_host_v_nic_profile import DvsHostVNicProfile
from vmware_vi.models.dvs_profile import DvsProfile
from vmware_vi.models.dvs_service_console_v_nic_profile import DvsServiceConsoleVNicProfile
from vmware_vi.models.host_port_group_profile import HostPortGroupProfile
from vmware_vi.models.ip_route_profile import IpRouteProfile
from vmware_vi.models.net_stack_instance_profile import NetStackInstanceProfile
from vmware_vi.models.network_profile_dns_config_profile import NetworkProfileDnsConfigProfile
from vmware_vi.models.nsx_host_v_nic_profile import NsxHostVNicProfile
from vmware_vi.models.opaque_switch_profile import OpaqueSwitchProfile
from vmware_vi.models.physical_nic_profile import PhysicalNicProfile
from vmware_vi.models.service_console_port_group_profile import ServiceConsolePortGroupProfile
from vmware_vi.models.virtual_switch_profile import VirtualSwitchProfile
from vmware_vi.models.vm_port_group_profile import VmPortGroupProfile
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NetworkProfile(ApplyProfile):
    """
    The *NetworkProfile* data object contains a set of subprofiles for network configuration.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    vswitch: Optional[List[VirtualSwitchProfile]] = Field(default=None, description="List of virtual switch subprofiles.  Use the *VirtualSwitchProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ")
    vm_port_group: Optional[List[VmPortGroupProfile]] = Field(default=None, description="List of port groups for use by virtual machines.  Use the *VmPortGroupProfile*.*PortGroupProfile.key* property to access a port group in the list.  ***Since:*** vSphere API 4.0 ", alias="vmPortGroup")
    host_port_group: Optional[List[HostPortGroupProfile]] = Field(default=None, description="List of port groups for use by the host.  Use the *HostPortGroupProfile*.*PortGroupProfile.key* property to access port groups in the list.  ***Since:*** vSphere API 4.0 ", alias="hostPortGroup")
    service_console_port_group: Optional[List[ServiceConsolePortGroupProfile]] = Field(default=None, description="List of port groups for use by the service console.  The Profile Engine uses this field only when applying a profile to a host that has a service console.  ***Since:*** vSphere API 4.0 ", alias="serviceConsolePortGroup")
    dns_config: Optional[NetworkProfileDnsConfigProfile] = Field(default=None, alias="dnsConfig")
    ip_route_config: Optional[IpRouteProfile] = Field(default=None, alias="ipRouteConfig")
    console_ip_route_config: Optional[IpRouteProfile] = Field(default=None, alias="consoleIpRouteConfig")
    pnic: Optional[List[PhysicalNicProfile]] = Field(default=None, description="List of subprofiles that represent physical NIC configuration.  Use the *PhysicalNicProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ")
    dvswitch: Optional[List[DvsProfile]] = Field(default=None, description="List of subprofiles for distributed virtual switches to which this host is connected.  Use the *DvsProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ")
    dvs_service_console_nic: Optional[List[DvsServiceConsoleVNicProfile]] = Field(default=None, description="List of subprofiles for service console Virtual NICs connected to a distributed virtual switch.  Use the *DvsServiceConsoleVNicProfile*.*DvsVNicProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ", alias="dvsServiceConsoleNic")
    dvs_host_nic: Optional[List[DvsHostVNicProfile]] = Field(default=None, description="List of subprofiles for host Virtual NICs connected to a distributed virtual switch.  Use the *DvsHostVNicProfile*.*DvsVNicProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ", alias="dvsHostNic")
    nsx_host_nic: Optional[List[NsxHostVNicProfile]] = Field(default=None, description="List of subprofiles for host Virtual NICs connected to a NSX logic switch.  Use the *NsxHostVNicProfile*.*NsxHostVNicProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 6.7 ", alias="nsxHostNic")
    net_stack_instance: Optional[List[NetStackInstanceProfile]] = Field(default=None, description="List of NetStackInstance subprofiles.  Use the *NetStackInstanceProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 5.5 ", alias="netStackInstance")
    opaque_switch: Optional[OpaqueSwitchProfile] = Field(default=None, alias="opaqueSwitch")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NetworkProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NetworkProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


