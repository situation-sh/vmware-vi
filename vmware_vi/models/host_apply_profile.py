# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.apply_profile import ApplyProfile
from vmware_vi.models.authentication_profile import AuthenticationProfile
from vmware_vi.models.date_time_profile import DateTimeProfile
from vmware_vi.models.firewall_profile import FirewallProfile
from vmware_vi.models.host_memory_profile import HostMemoryProfile
from vmware_vi.models.network_profile import NetworkProfile
from vmware_vi.models.option_profile import OptionProfile
from vmware_vi.models.security_profile import SecurityProfile
from vmware_vi.models.service_profile import ServiceProfile
from vmware_vi.models.storage_profile import StorageProfile
from vmware_vi.models.user_group_profile import UserGroupProfile
from vmware_vi.models.user_profile import UserProfile
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostApplyProfile(ApplyProfile):
    """
    The *HostApplyProfile* data object provides access to subprofiles that contain configuration data for different host capabilities.  The Profile Engine will use any configuration data that you supply to overwrite the host configuration. See the *HostProfile.ExecuteHostProfile* and *HostProfileManager.ApplyHostConfig_Task* methods.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    memory: Optional[HostMemoryProfile] = None
    storage: Optional[StorageProfile] = None
    network: Optional[NetworkProfile] = None
    datetime: Optional[DateTimeProfile] = None
    firewall: Optional[FirewallProfile] = None
    security: Optional[SecurityProfile] = None
    service: Optional[List[ServiceProfile]] = Field(default=None, description="Host configuration for services.  Use the *ServiceProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ")
    option: Optional[List[OptionProfile]] = Field(default=None, description="List of subprofiles representing advanced configuration options.  Use the *OptionProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ")
    user_account: Optional[List[UserProfile]] = Field(default=None, description="List of subprofiles for user accounts to be configured on the host.  Use the *UserProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ", alias="userAccount")
    usergroup_account: Optional[List[UserGroupProfile]] = Field(default=None, description="List of subprofiles for user groups to be configured on the host.  Use the *UserGroupProfile.key* property to access a subprofile in the list.  ***Since:*** vSphere API 4.0 ", alias="usergroupAccount")
    authentication: Optional[AuthenticationProfile] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostApplyProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostApplyProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


