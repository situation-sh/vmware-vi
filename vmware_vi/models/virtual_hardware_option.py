# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.bool_option import BoolOption
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.int_option import IntOption
from vmware_vi.models.long_option import LongOption
from vmware_vi.models.resource_config_option import ResourceConfigOption
from vmware_vi.models.virtual_device_option import VirtualDeviceOption
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualHardwareOption(DataObject):
    """
    The VirtualHardwareOption data object contains the options available for all virtual devices. 
    """ # noqa: E501
    hw_version: StrictInt = Field(description="The virtual hardware version. ", alias="hwVersion")
    virtual_device_option: List[VirtualDeviceOption] = Field(description="Array of virtual device options valid for this virtual machine configuration.  The list is unordered. ", alias="virtualDeviceOption")
    device_list_readonly: StrictBool = Field(description="Whether the set of virtual devices can be changed, e.g., can devices be added or removed.  This does not preclude changing devices. ", alias="deviceListReadonly")
    num_cpu: List[StrictInt] = Field(description="List of acceptable values for the number of CPUs supported by this *ConfigOption*.  This is usually superceded by the information available in the guest operating system descriptors. The guest operating system descriptor describes a maximum CPU count, but the acceptable values are still constrained to the set specified here. The default value is stored at index 0 in the list. ", alias="numCPU")
    num_cores_per_socket: IntOption = Field(alias="numCoresPerSocket")
    auto_cores_per_socket: Optional[BoolOption] = Field(default=None, alias="autoCoresPerSocket")
    num_cpu_readonly: StrictBool = Field(description="Can the number of virtual CPUs be changed ", alias="numCpuReadonly")
    memory_mb: LongOption = Field(alias="memoryMB")
    num_pci_controllers: IntOption = Field(alias="numPCIControllers")
    num_ide_controllers: IntOption = Field(alias="numIDEControllers")
    num_usb_controllers: IntOption = Field(alias="numUSBControllers")
    num_usbxhci_controllers: IntOption = Field(alias="numUSBXHCIControllers")
    num_sio_controllers: IntOption = Field(alias="numSIOControllers")
    num_ps2_controllers: IntOption = Field(alias="numPS2Controllers")
    licensing_limit: Optional[List[StrictStr]] = Field(default=None, description="List of propery names which limits are given be a licensing restriction of the underlying product, e.g., a limit that is not derived based on the product or hardware features.  For example, the property name \"numCPU\" ", alias="licensingLimit")
    num_supported_wwn_ports: Optional[IntOption] = Field(default=None, alias="numSupportedWwnPorts")
    num_supported_wwn_nodes: Optional[IntOption] = Field(default=None, alias="numSupportedWwnNodes")
    resource_config_option: ResourceConfigOption = Field(alias="resourceConfigOption")
    num_nvdimm_controllers: Optional[IntOption] = Field(default=None, alias="numNVDIMMControllers")
    num_tpm_devices: Optional[IntOption] = Field(default=None, alias="numTPMDevices")
    num_wdt_devices: Optional[IntOption] = Field(default=None, alias="numWDTDevices")
    num_precision_clock_devices: Optional[IntOption] = Field(default=None, alias="numPrecisionClockDevices")
    epc_memory_mb: Optional[LongOption] = Field(default=None, alias="epcMemoryMB")
    acpi_host_bridges_firmware: Optional[List[StrictStr]] = Field(default=None, description="Empty for HWv17 &amp; older, \\[\"efi\"\\] for HWv18. ", alias="acpiHostBridgesFirmware")
    num_cpu_simultaneous_threads: Optional[IntOption] = Field(default=None, alias="numCpuSimultaneousThreads")
    num_numa_nodes: Optional[IntOption] = Field(default=None, alias="numNumaNodes")
    num_device_groups: Optional[IntOption] = Field(default=None, alias="numDeviceGroups")
    device_group_types: Optional[List[StrictStr]] = Field(default=None, description="Supported device group types. ", alias="deviceGroupTypes")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualHardwareOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualHardwareOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


