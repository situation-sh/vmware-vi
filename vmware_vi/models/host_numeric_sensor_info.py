# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.element_description import ElementDescription
from vmware_vi.models.host_fru import HostFru
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostNumericSensorInfo(DataObject):
    """
    Base class for numeric sensor information.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the physical element associated with the sensor It consists of a string of the form: \"description --- state/identifer\".  ***Since:*** VI API 2.5 ")
    health_state: Optional[ElementDescription] = Field(default=None, alias="healthState")
    current_reading: StrictInt = Field(description="The current reading of the element indicated by the sensor.  The actual sensor reading is obtained by multiplying the current reading by the scale factor.  ***Since:*** VI API 2.5 ", alias="currentReading")
    unit_modifier: StrictInt = Field(description="The unit multiplier for the values returned by the sensor.  All values returned by the sensor are current reading \\* 10 raised to the power of the UnitModifier. If no unitModifier applies the value returned is 0.  ***Since:*** VI API 2.5 ", alias="unitModifier")
    base_units: StrictStr = Field(description="The base units in which the sensor reading is specified.  If rateUnits is set the units of the current reading is further qualified by the rateUnits. Otherwise the value returned is 'unspecified'.  See also *HostNumericSensorInfo.rateUnits*.  ***Since:*** VI API 2.5 ", alias="baseUnits")
    rate_units: Optional[StrictStr] = Field(default=None, description="The rate units in which the sensor reading is specified.  For example if the baseUnits is Volts and the rateUnits is per second the value returned by the sensor are in Volts/second. If no rate applies the value returned is 'none'.  ***Since:*** VI API 2.5 ", alias="rateUnits")
    sensor_type: StrictStr = Field(description="The type of the sensor.  If the sensor type is set to Other the sensor name can be used to further identify the type of sensor. The sensor units can also be used to further implicitly determine the type of the sensor.  See also *HostNumericSensorType_enum*.  ***Since:*** VI API 2.5 ", alias="sensorType")
    id: Optional[StrictStr] = Field(default=None, description="A unique sensor identifier.  A four part value consisting of: BMC device.Entity ID.Instance.SensorNumber Can be used to match a NumericSensorInfo object to esxcli hardware ipmi sdr list  ***Since:*** vSphere API 6.5 ")
    sensor_number: Optional[StrictInt] = Field(default=None, description="The IPMI Sensor/probe that is reporting this event.  Use this value to locate System Event Log (SEL) entries for this Sensor. It is also reported in 'id' in string format. This property is intended to be used with vim.host.SystemEventInfo.sensorNumber ", alias="sensorNumber")
    time_stamp: Optional[StrictStr] = Field(default=None, description="Reports the ISO 8601 Timestamp when this sensor was last updated by management controller if the this sensor is capable of tracking when it was last updated.  ***Since:*** vSphere API 6.5 ", alias="timeStamp")
    fru: Optional[HostFru] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostNumericSensorInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostNumericSensorInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


