# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.shares_info import SharesInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DVSNetworkResourcePoolAllocationInfo(DataObject):
    """
    Resource allocation information for a network resource pool.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    limit: Optional[StrictInt] = Field(default=None, description="Maximum allowed usage for network clients belonging to this resource pool per host.  The utilization of network clients belonging to this resource pool will not exceed the specified limit even if there are available network resources. If set to -1, then there is no limit on the network resource usage for clients belonging to this resource pool. Units are in Mbits/sec. When setting the allocation of a particular resource pool, if the property is unset, it is treated as no change and the property is not updated. An unset limit value while reading back the allocation information of a network resource pool indicates that there is no limit on the network resource usage for the clients belonging to this resource group.  ***Since:*** vSphere API 4.1 ")
    shares: Optional[SharesInfo] = None
    priority_tag: Optional[StrictInt] = Field(default=None, description="802.1p tag to be used for this resource pool.  The tag is a priority value in the range 0..7 for Quality of Service operations on network traffic.  ***Since:*** vSphere API 5.0 ", alias="priorityTag")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DVSNetworkResourcePoolAllocationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DVSNetworkResourcePoolAllocationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


