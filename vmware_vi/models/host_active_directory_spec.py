# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import SecretStr, StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostActiveDirectorySpec(DataObject):
    """
    The *HostActiveDirectorySpec* data object defines properties for Active Directory domain access.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    domain_name: Optional[StrictStr] = Field(default=None, description="Domain name.  ***Since:*** vSphere API 4.1 ", alias="domainName")
    user_name: Optional[StrictStr] = Field(default=None, description="Name of an Active Directory account with the authority to add a host to the domain.  ***Since:*** vSphere API 4.1 ", alias="userName")
    password: Optional[SecretStr] = Field(default=None, description="Password for the Active Directory account.  ***Since:*** vSphere API 4.1 ")
    cam_server: Optional[StrictStr] = Field(default=None, description="If set, the CAM server will be used to join the domain and the <code>userName</code> and <code>password</code> fields will be ignored.  ***Since:*** vSphere API 5.0 ", alias="camServer")
    thumbprint: Optional[StrictStr] = Field(default=None, description="Thumbprint for the SSL certficate of CAM server  ***Since:*** vSphere API 5.0 ")
    smart_card_authentication_enabled: Optional[StrictBool] = Field(default=None, description="Support smart card authentication of local users.  ***Since:*** vSphere API 6.0 ", alias="smartCardAuthenticationEnabled")
    smart_card_trust_anchors: Optional[List[StrictStr]] = Field(default=None, description="Trusted root certificates for smart cards.  ***Since:*** vSphere API 6.0 ", alias="smartCardTrustAnchors")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostActiveDirectorySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostActiveDirectorySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


