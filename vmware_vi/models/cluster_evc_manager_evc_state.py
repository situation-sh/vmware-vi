# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.evc_mode import EVCMode
from vmware_vi.models.host_cpu_id_info import HostCpuIdInfo
from vmware_vi.models.host_feature_capability import HostFeatureCapability
from vmware_vi.models.host_feature_mask import HostFeatureMask
from vmware_vi.models.virtual_machine_feature_requirement import VirtualMachineFeatureRequirement
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterEVCManagerEVCState(DataObject):
    """
    ClusterEVCManagerEVCState
    """ # noqa: E501
    supported_evc_mode: List[EVCMode] = Field(description="All supported EVC modes.  Identical to *Capability.supportedEVCMode*.  ***Since:*** vSphere API 6.0 ", alias="supportedEVCMode")
    current_evc_mode_key: Optional[StrictStr] = Field(default=None, description="If unset, then EVC is disabled.  If set, then EVC is enabled, and the value references an EVC mode described in one of the elements of the *ClusterEVCManagerEVCState.supportedEVCMode* array property. The EVC mode determines the set of guaranteed clusterwide CPU features. While EVC is enabled, CPU compatibility issues will not block any VMotion within the cluster (unless some VM is specifically configured to do different CPUID overrides).  ***Since:*** vSphere API 6.0 ", alias="currentEVCModeKey")
    guaranteed_cpu_features: Optional[List[HostCpuIdInfo]] = Field(default=None, description="Deprecated as of vSphere API 6.5 use *ClusterEVCManagerEVCState.featureCapability*.  When EVC is enabled, this array contains the CPU feature bits that are guaranteed (by EVC) to be the same among all hosts in the cluster.  This property has the same value as the guaranteedCPUFeatures property of the configured EVC mode. On any host in the EVC cluster, the CPU features either naturally match these values because of the CPU hardware, or else CPU feature override is used to mask out differences and enforce a match. This array is empty when EVC is disabled.  ***Since:*** vSphere API 6.0 ", alias="guaranteedCPUFeatures")
    feature_capability: Optional[List[HostFeatureCapability]] = Field(default=None, description="When EVC is enabled, this array contains the feature capabilities that are guaranteed (by EVC) to be the same among all hosts in the cluster.  This property has the same value as the featureCapability property of the configured EVC mode. On any host in the EVC cluster, the feature capabilities either naturally match these values because of the CPU hardware, or else feature masks are used to mask out differences and enforce a match. This array is empty when EVC is disabled.  ***Since:*** vSphere API 6.0 ", alias="featureCapability")
    feature_mask: Optional[List[HostFeatureMask]] = Field(default=None, description="The masks (modifications to a host's feature capabilities) that limit a host's capabilities to that of the EVC mode baseline.  ***Since:*** vSphere API 6.0 ", alias="featureMask")
    feature_requirement: Optional[List[VirtualMachineFeatureRequirement]] = Field(default=None, description="The conditions that must be true of a host's feature capabilities in order for the host to meet the minimum requirements of the EVC mode baseline.  ***Since:*** vSphere API 6.0 ", alias="featureRequirement")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterEVCManagerEVCState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterEVCManagerEVCState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


