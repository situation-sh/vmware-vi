# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.virtual_hardware_compatibility_issue import VirtualHardwareCompatibilityIssue
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DeviceNotSupported(VirtualHardwareCompatibilityIssue):
    """
    The virtual machine uses a device type that is not supported on the host.  If this fault is returned as a subfault of *DisallowedMigrationDeviceAttached*, this indicates that although this device may be supported on the destination host, the hosts do not support the requested migration of the virtual machine while using this device. 
    """ # noqa: E501
    device: StrictStr = Field(description="The label of the device. ")
    reason: Optional[StrictStr] = Field(default=None, description="The specific reason why the device is not supported.  Values should come from *DeviceNotSupportedReason_enum*. This might not be set if we're not sure of the reason, or if this doesn't make sense in the context. For example, in the *DisallowedMigrationDeviceAttached* context we already know the problem.  ***Since:*** VI API 2.5 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','DVPortNotSupported': 'DVPortNotSupported','DeviceBackingNotSupported': 'DeviceBackingNotSupported','DeviceControllerNotSupported': 'DeviceControllerNotSupported','DigestNotSupported': 'DigestNotSupported','FileBackedPortNotSupported': 'FileBackedPortNotSupported','MultiWriterNotSupported': 'MultiWriterNotSupported','NonPersistentDisksNotSupported': 'NonPersistentDisksNotSupported','PhysCompatRDMNotSupported': 'PhysCompatRDMNotSupported','RDMNotSupported': 'RDMNotSupported','RawDiskNotSupported': 'RawDiskNotSupported','RemoteDeviceNotSupported': 'RemoteDeviceNotSupported','SharedBusControllerNotSupported': 'SharedBusControllerNotSupported','UnusedVirtualDiskBlocksNotScrubbed': 'UnusedVirtualDiskBlocksNotScrubbed','VMINotSupported': 'VMINotSupported','VirtualDiskBlocksNotFullyProvisioned': 'VirtualDiskBlocksNotFullyProvisioned','VirtualDiskModeNotSupported': 'VirtualDiskModeNotSupported','VirtualEthernetCardNotSupported': 'VirtualEthernetCardNotSupported'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of DeviceNotSupported from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of DeviceNotSupported from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("DeviceNotSupported failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.device_backing_not_supported import DeviceBackingNotSupported
from vmware_vi.models.device_controller_not_supported import DeviceControllerNotSupported
from vmware_vi.models.digest_not_supported import DigestNotSupported
from vmware_vi.models.dv_port_not_supported import DVPortNotSupported
from vmware_vi.models.file_backed_port_not_supported import FileBackedPortNotSupported
from vmware_vi.models.multi_writer_not_supported import MultiWriterNotSupported
from vmware_vi.models.non_persistent_disks_not_supported import NonPersistentDisksNotSupported
from vmware_vi.models.phys_compat_rdm_not_supported import PhysCompatRDMNotSupported
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.raw_disk_not_supported import RawDiskNotSupported
from vmware_vi.models.rdm_not_supported import RDMNotSupported
from vmware_vi.models.remote_device_not_supported import RemoteDeviceNotSupported
from vmware_vi.models.shared_bus_controller_not_supported import SharedBusControllerNotSupported
from vmware_vi.models.unused_virtual_disk_blocks_not_scrubbed import UnusedVirtualDiskBlocksNotScrubbed
from vmware_vi.models.virtual_disk_blocks_not_fully_provisioned import VirtualDiskBlocksNotFullyProvisioned
from vmware_vi.models.virtual_disk_mode_not_supported import VirtualDiskModeNotSupported
from vmware_vi.models.virtual_ethernet_card_not_supported import VirtualEthernetCardNotSupported
from vmware_vi.models.vmi_not_supported import VMINotSupported
# TODO: Rewrite to not use raise_errors
DeviceNotSupported.model_rebuild(raise_errors=False)

