# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.custom_field_value import CustomFieldValue
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_config_summary import HostConfigSummary
from vmware_vi.models.host_hardware_summary import HostHardwareSummary
from vmware_vi.models.host_list_summary_gateway_summary import HostListSummaryGatewaySummary
from vmware_vi.models.host_list_summary_quick_stats import HostListSummaryQuickStats
from vmware_vi.models.host_runtime_info import HostRuntimeInfo
from vmware_vi.models.host_tpm_attestation_info import HostTpmAttestationInfo
from vmware_vi.models.host_trust_authority_attestation_info import HostTrustAuthorityAttestationInfo
from vmware_vi.models.managed_entity_status_enum import ManagedEntityStatusEnum
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostListSummary(DataObject):
    """
    This data object type encapsulates a typical set of host information that is useful for list views and summary pages.  VirtualCenter can retrieve this information very efficiently, even for a large set of hosts. 
    """ # noqa: E501
    host: Optional[ManagedObjectReference] = None
    hardware: Optional[HostHardwareSummary] = None
    runtime: Optional[HostRuntimeInfo] = None
    config: HostConfigSummary
    quick_stats: HostListSummaryQuickStats = Field(alias="quickStats")
    overall_status: ManagedEntityStatusEnum = Field(alias="overallStatus")
    reboot_required: StrictBool = Field(description="Indicates whether or not the host requires a reboot due to a configuration change. ", alias="rebootRequired")
    custom_value: Optional[List[CustomFieldValue]] = Field(default=None, description="The customized field values. ", alias="customValue")
    management_server_ip: Optional[StrictStr] = Field(default=None, description="IP address of the VirtualCenter server managing this host, if any.  ***Since:*** VI API 2.5 ", alias="managementServerIp")
    max_evc_mode_key: Optional[StrictStr] = Field(default=None, description="The most capable Enhanced VMotion Compatibility mode supported by the host hardware and software; unset if this host cannot participate in any EVC mode.  See also *Capability.supportedEVCMode*.  ***Since:*** vSphere API 4.0 ", alias="maxEVCModeKey")
    current_evc_mode_key: Optional[StrictStr] = Field(default=None, description="The Enhanced VMotion Compatibility mode that is currently in effect for this host.  If the host is in a cluster where EVC is active, this will match the cluster's EVC mode; otherwise this will be unset.  See also *Capability.supportedEVCMode*.  ***Since:*** vSphere API 4.0 ", alias="currentEVCModeKey")
    current_evc_graphics_mode_key: Optional[StrictStr] = Field(default=None, description="The Enhanced VMotion Compatibility Graphics mode that is currently in effect for this host.  If the host is in a cluster where EVC is active, this will match the cluster's EVC Graphics mode; otherwise this will be unset.  See also *Capability.supportedEVCGraphicsMode*.  ***Since:*** vSphere API 7.0.1.0 ", alias="currentEVCGraphicsModeKey")
    gateway: Optional[HostListSummaryGatewaySummary] = None
    tpm_attestation: Optional[HostTpmAttestationInfo] = Field(default=None, alias="tpmAttestation")
    trust_authority_attestation_infos: Optional[List[HostTrustAuthorityAttestationInfo]] = Field(default=None, description="The attestation information for the host as retrieved from any Trust Authority attestation services configured in the host's parent compute resource.  This field will be set only if there is any Trust Authority attestation service configured for the host's parent compute resource, and unset otherwise.  ***Since:*** vSphere API 7.0.1.0 ", alias="trustAuthorityAttestationInfos")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostListSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostListSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


