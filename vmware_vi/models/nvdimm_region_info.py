# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NvdimmRegionInfo(DataObject):
    """
    \\\\brief NVDIMM region information.  This represents a region which is a part of NVDIMM.  ***Since:*** vSphere API 6.7 
    """ # noqa: E501
    region_id: StrictInt = Field(description="NVDIMM region ID  ***Since:*** vSphere API 6.7 ", alias="regionId")
    set_id: StrictInt = Field(description="Interleave set ID.  Interleave set to which this region belongs. A value of 0 indicates that this region is not a part of any interleave set.  ***Since:*** vSphere API 6.7 ", alias="setId")
    range_type: StrictStr = Field(description="Type of region.  Must be one of the values of *NvdimmRangeType_enum*  ***Since:*** vSphere API 6.7 ", alias="rangeType")
    start_addr: StrictInt = Field(description="Region start address.  This represents the address within the NVDIMM to which this NVDIMM region belongs (Dimm physical address). If *NvdimmRegionInfo.setId* is 0, this field is not valid.  ***Since:*** vSphere API 6.7 ", alias="startAddr")
    size: StrictInt = Field(description="Size of region in bytes.  If this region is part of interleave set (represented by non zero *NvdimmRegionInfo.setId*) and the region is interleaved across multiple dimms (represented by more that one element in *NvdimmInterleaveSetInfo.deviceList* for assosiated set id *NvdimmRegionInfo.setId*), this size represents part of the interleave set size - (total interleave set size / number of dimms in *NvdimmInterleaveSetInfo.deviceList*). Example: If Interleave set with set id 5, has a size of 2TB and has 2 NVDIMMs contributing to it (size of *NvdimmInterleaveSetInfo.deviceList* is 2), then this size parameter is 2TB/2 = 1TB. If *NvdimmRegionInfo.setId* is 0, this field is not valid.  ***Since:*** vSphere API 6.7 ")
    offset: StrictInt = Field(description="Offset of nvdimm within interleave set.  This represents offset with respect to base address in *NvdimmInterleaveSetInfo.baseAddress*. If *NvdimmRegionInfo.setId* is 0, this field is not valid.  ***Since:*** vSphere API 6.7 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NvdimmRegionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NvdimmRegionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


