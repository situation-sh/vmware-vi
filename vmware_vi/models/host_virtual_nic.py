# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_port_group_port import HostPortGroupPort
from vmware_vi.models.host_virtual_nic_spec import HostVirtualNicSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostVirtualNic(DataObject):
    """
    The *HostVirtualNic* data object describes a virtual network adapter that connects to a virtual switch.  A host virtual NIC differs from a physical NIC: - A host virtual NIC is a virtual device that is connected to a virtual switch. - A physical NIC (*HostNetworkInfo.pnic*) corresponds to a physical   device that is connected to the physical network.    A host virtual NIC provides access to the external network through a virtual switch that is bridged through a Physical NIC to a physical network. 
    """ # noqa: E501
    device: StrictStr = Field(description="Device name. ")
    key: StrictStr = Field(description="Linkable identifier. ")
    portgroup: StrictStr = Field(description="If the Virtual NIC is connecting to a vSwitch, this property is the name of portgroup connected.  If the Virtual NIC is connecting to a DistributedVirtualSwitch or opaque network, this property is an empty string. ")
    spec: HostVirtualNicSpec
    port: Optional[HostPortGroupPort] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostVirtualNic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostVirtualNic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


