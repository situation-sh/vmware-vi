# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AboutInfo(DataObject):
    """
    This data object type describes system information including the name, type, version, and build number. 
    """ # noqa: E501
    name: StrictStr = Field(description="Short form of the product name. ")
    full_name: StrictStr = Field(description="The complete product name, including the version information. ", alias="fullName")
    vendor: StrictStr = Field(description="Name of the vendor of this product. ")
    version: StrictStr = Field(description="Dot-separated version string.  For example, \"1.2\". ")
    patch_level: Optional[StrictStr] = Field(default=None, description="Patch level for the server.  ***Since:*** vSphere API 7.0.2.0 ", alias="patchLevel")
    build: StrictStr = Field(description="Build string for the server on which this call is made.  For example, x.y.z-num. This string does not apply to the API. ")
    locale_version: Optional[StrictStr] = Field(default=None, description="Version of the message catalog for the current session's locale. ", alias="localeVersion")
    locale_build: Optional[StrictStr] = Field(default=None, description="Build number for the current session's locale.  Typically, this is a small number reflecting a localization change from the normal product build. ", alias="localeBuild")
    os_type: StrictStr = Field(description="Operating system type and architecture.  Examples of values are: - \"win32-x86\" - For x86-based Windows systems. - \"linux-x86\" - For x86-based Linux systems. - \"vmnix-x86\" - For the x86 ESX Server microkernel. - \"vmnix-arm64\" - For the arm64 ESX Server microkernel. ", alias="osType")
    product_line_id: StrictStr = Field(description="The product ID is a unique identifier for a product line.  Examples of values are: - \"gsx\" - For the VMware Server product. - \"esx\" - For the ESX product. - \"embeddedEsx\" - For the ESXi product. - \"esxio\" - For the ESXio product. - \"vpx\" - For the VirtualCenter product. ", alias="productLineId")
    api_type: StrictStr = Field(description="Indicates whether or not the service instance represents a standalone host.  If the service instance represents a standalone host, then the physical inventory for that service instance is fixed to that single host. VirtualCenter server provides additional features over single hosts. For example, VirtualCenter offers multi-host management.  Examples of values are: - \"VirtualCenter\" - For a VirtualCenter instance. - \"HostAgent\" - For host agent on an ESX Server or VMware Server host. ", alias="apiType")
    api_version: StrictStr = Field(description="The version of the API as a dot-separated string.  For example, \"1.0.0\". ", alias="apiVersion")
    instance_uuid: Optional[StrictStr] = Field(default=None, description="A globally unique identifier associated with this service instance.  ***Since:*** vSphere API 4.0 ", alias="instanceUuid")
    license_product_name: Optional[StrictStr] = Field(default=None, description="The license product name  ***Since:*** vSphere API 4.0 ", alias="licenseProductName")
    license_product_version: Optional[StrictStr] = Field(default=None, description="The license product version  ***Since:*** vSphere API 4.0 ", alias="licenseProductVersion")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AboutInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AboutInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


