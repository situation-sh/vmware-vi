# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostListSummaryGatewaySummary(DataObject):
    """
    This data object type describes information about a host gateway server that is used for the connection between vCenter Server and the host.  Gateway servers are identified by type and id. In order to use a gateway server it has to be registered with the respective type and id in the vCenter Lookup Service.  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    gateway_type: StrictStr = Field(description="The type of the gateway server used for communication with the host.  This is an opaque string that depends on how the gateway server is registered with the vCenter Component Manager Service. There might be several gateway servers for the same type.  ***Since:*** vSphere API 6.0 ", alias="gatewayType")
    gateway_id: StrictStr = Field(description="Unique ID of the gateway server used for communication with the host.  This ID must be a unique identifier for the gateway server as registered in the vCenter Component Manager Service. There must be only one gateway server with the same ID.  ***Since:*** vSphere API 6.0 ", alias="gatewayId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostListSummaryGatewaySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostListSummaryGatewaySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


