# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostUnresolvedVmfsResolutionSpec(DataObject):
    """
    An unresolved VMFS volume is reported when one or more device partitions of volume are detected to have copies of extents of the volume.  Such copies can be created via replication or snapshots, for example. This data object type describes how to resolve an unbound VMFS volume. The SCSI device path for each of the VMFS volume extent should be specified. For the current release, only head-extent needs to be specified. In future releases, we will allow user to specify explicitly all the extents which makes up a new Vmfs Volume.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    extent_device_path: List[StrictStr] = Field(description="List of device paths each specifying a VMFS extent.  One extent must be specified. This property is represented as a list to enable future enhancements to the interface.  ***Since:*** vSphere API 4.0 ", alias="extentDevicePath")
    uuid_resolution: StrictStr = Field(description="When set to Resignature, new Uuid is assigned to the VMFS volume.  When set to 'forceMount', existing uuid is assigned to the Vmfs volume and Vmfs volumes metadata doesn't change.  See also *HostUnresolvedVmfsResolutionSpecVmfsUuidResolution_enum*.  ***Since:*** vSphere API 4.0 ", alias="uuidResolution")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostUnresolvedVmfsResolutionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostUnresolvedVmfsResolutionSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


