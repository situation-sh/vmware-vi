# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.extended_description import ExtendedDescription
from vmware_vi.models.profile_metadata_profile_operation_message import ProfileMetadataProfileOperationMessage
from vmware_vi.models.profile_metadata_profile_sort_spec import ProfileMetadataProfileSortSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProfileMetadata(DataObject):
    """
    This data object represents the metadata information of a Profile.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    key: StrictStr = Field(description="Type of the Profile  ***Since:*** vSphere API 4.0 ")
    profile_type_name: Optional[StrictStr] = Field(default=None, description="Type identifier for the ApplyProfile  ***Since:*** vSphere API 5.0 ", alias="profileTypeName")
    description: Optional[ExtendedDescription] = None
    sort_spec: Optional[List[ProfileMetadataProfileSortSpec]] = Field(default=None, description="Property that determines a sorting order for display purposes.  If the list contains more than one sort spec, then the precedence should be determined by the list order (i.e. sort first by the first spec in the list, then sort by the second spec in the list, etc).  ***Since:*** vSphere API 5.0 ", alias="sortSpec")
    profile_category: Optional[StrictStr] = Field(default=None, description="Identifies the profile category that this subprofile is a part of.  The value of this string should correspond to the key value of a *ProfileCategoryMetadata* object's *ElementDescription.key* in its *ProfileCategoryMetadata.id* property.  ***Since:*** vSphere API 5.1 ", alias="profileCategory")
    profile_component: Optional[StrictStr] = Field(default=None, description="Property indicating that the subprofile described by this <code>ProfileMetadata</code> object is declared in the *ProfileComponentMetadata.profileTypeNames* of the specified profile component.  The value of this property should correspond to the key value of the *ProfileComponentMetadata* object's *ElementDescription.key* in its *ProfileComponentMetadata.id* property. This property should not be present for subprofiles that are not directly declared in the *ProfileComponentMetadata.profileTypeNames* property of a *ProfileComponentMetadata* object.  ***Since:*** vSphere API 5.1 ", alias="profileComponent")
    operation_messages: Optional[List[ProfileMetadataProfileOperationMessage]] = Field(default=None, description="A list of <code>ProfileOperationMessage</code> for this profile.  ***Since:*** vSphere API 6.7 ", alias="operationMessages")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProfileMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProfileMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


