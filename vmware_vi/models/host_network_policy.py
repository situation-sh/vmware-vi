# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_net_offload_capabilities import HostNetOffloadCapabilities
from vmware_vi.models.host_network_security_policy import HostNetworkSecurityPolicy
from vmware_vi.models.host_network_traffic_shaping_policy import HostNetworkTrafficShapingPolicy
from vmware_vi.models.host_nic_teaming_policy import HostNicTeamingPolicy
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostNetworkPolicy(DataObject):
    """
    This data object type describes network policies that can be configured for both virtual switches and port groups.  The policy settings on the port group can inherit policy settings from their containing virtual switch. These policy settings are inherited if the settings on the port group are not set. Since every policy setting on a port group is optional, every individual policy setting can be inherited.  By contrast, if a host is capable of implementing a policy setting, every virtual switch has some value assigned to the policy setting. In this case, although all of the policy settings are optional, they always have some value either by inheritance or by direct setting.  Policy settings are organized into policy groups such as SecurityPolicy. Policy groups are optional since it is possible that a host may not implement such policies. If a host does not support a policy group, the policy group is not set on both the virtual switches and the port groups.  See also *HostNetCapabilities*. 
    """ # noqa: E501
    security: Optional[HostNetworkSecurityPolicy] = None
    nic_teaming: Optional[HostNicTeamingPolicy] = Field(default=None, alias="nicTeaming")
    offload_policy: Optional[HostNetOffloadCapabilities] = Field(default=None, alias="offloadPolicy")
    shaping_policy: Optional[HostNetworkTrafficShapingPolicy] = Field(default=None, alias="shapingPolicy")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostNetworkPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostNetworkPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


