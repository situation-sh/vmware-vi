# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from typing_extensions import Annotated
from vmware_vi.models.host_tpm_event_details import HostTpmEventDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostTpmOptionEventDetails(HostTpmEventDetails):
    """
    Details of a Trusted Platform Module (TPM) event recording boot-time options.  The boot-time options set on the system are packaged into a file that is supplied to the kernel at boot time. The boot options may be a string of key=value pairs (possibly separated by a new line) or a blob of arbitrary data.  ***Since:*** vSphere API 5.1 
    """ # noqa: E501
    options_file_name: StrictStr = Field(description="Name of the file containing the boot options.  ***Since:*** vSphere API 5.1 ", alias="optionsFileName")
    boot_options: Optional[List[Annotated[int, Field(le=127, strict=True, ge=-128)]]] = Field(default=None, description="Options set by the boot option package.  This array exposes the raw contents of the settings file (or files) that were passed to kernel during the boot up process, and, therefore, should be treated accordingly.  ***Since:*** vSphere API 5.1 ", alias="bootOptions")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostTpmOptionEventDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostTpmOptionEventDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


