# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union

from vmware_vi.models.vim_fault import VimFault
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostConnectFault(VimFault):
    """
    A base clase for faults that are related to connecting or adding a host to the inventory. 
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','AgentInstallFailed': 'AgentInstallFailed','AlreadyBeingManaged': 'AlreadyBeingManaged','AlreadyConnected': 'AlreadyConnected','CannotAddHostWithFTVmAsStandalone': 'CannotAddHostWithFTVmAsStandalone','CannotAddHostWithFTVmToDifferentCluster': 'CannotAddHostWithFTVmToDifferentCluster','CannotAddHostWithFTVmToNonHACluster': 'CannotAddHostWithFTVmToNonHACluster','EVCAdmissionFailed': 'EVCAdmissionFailed','EVCAdmissionFailedCPUFeaturesForMode': 'EVCAdmissionFailedCPUFeaturesForMode','EVCAdmissionFailedCPUModel': 'EVCAdmissionFailedCPUModel','EVCAdmissionFailedCPUModelForMode': 'EVCAdmissionFailedCPUModelForMode','EVCAdmissionFailedCPUVendor': 'EVCAdmissionFailedCPUVendor','EVCAdmissionFailedCPUVendorUnknown': 'EVCAdmissionFailedCPUVendorUnknown','EVCAdmissionFailedHostDisconnected': 'EVCAdmissionFailedHostDisconnected','EVCAdmissionFailedHostSoftware': 'EVCAdmissionFailedHostSoftware','EVCAdmissionFailedHostSoftwareForMode': 'EVCAdmissionFailedHostSoftwareForMode','EVCAdmissionFailedVmActive': 'EVCAdmissionFailedVmActive','GatewayConnectFault': 'GatewayConnectFault','GatewayHostNotReachable': 'GatewayHostNotReachable','GatewayNotFound': 'GatewayNotFound','GatewayNotReachable': 'GatewayNotReachable','GatewayOperationRefused': 'GatewayOperationRefused','GatewayToHostAuthFault': 'GatewayToHostAuthFault','GatewayToHostConnectFault': 'GatewayToHostConnectFault','GatewayToHostTrustVerifyFault': 'GatewayToHostTrustVerifyFault','MultipleCertificatesVerifyFault': 'MultipleCertificatesVerifyFault','NoHost': 'NoHost','NoPermissionOnHost': 'NoPermissionOnHost','NonVmwareOuiMacNotSupportedHost': 'NonVmwareOuiMacNotSupportedHost','NotSupportedHost': 'NotSupportedHost','NotSupportedHostForVFlash': 'NotSupportedHostForVFlash','NotSupportedHostForVmcp': 'NotSupportedHostForVmcp','NotSupportedHostForVmemFile': 'NotSupportedHostForVmemFile','NotSupportedHostForVsan': 'NotSupportedHostForVsan','NotSupportedHostInCluster': 'NotSupportedHostInCluster','NotSupportedHostInDvs': 'NotSupportedHostInDvs','NotSupportedHostInHACluster': 'NotSupportedHostInHACluster','ReadHostResourcePoolTreeFailed': 'ReadHostResourcePoolTreeFailed','SSLDisabledFault': 'SSLDisabledFault','SSLVerifyFault': 'SSLVerifyFault','TooManyHosts': 'TooManyHosts'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of HostConnectFault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of HostConnectFault from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("HostConnectFault failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.agent_install_failed import AgentInstallFailed
from vmware_vi.models.already_being_managed import AlreadyBeingManaged
from vmware_vi.models.already_connected import AlreadyConnected
from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.cannot_add_host_with_ftvm_as_standalone import CannotAddHostWithFTVmAsStandalone
from vmware_vi.models.cannot_add_host_with_ftvm_to_different_cluster import CannotAddHostWithFTVmToDifferentCluster
from vmware_vi.models.cannot_add_host_with_ftvm_to_non_ha_cluster import CannotAddHostWithFTVmToNonHACluster
from vmware_vi.models.evc_admission_failed import EVCAdmissionFailed
from vmware_vi.models.evc_admission_failed_cpu_features_for_mode import EVCAdmissionFailedCPUFeaturesForMode
from vmware_vi.models.evc_admission_failed_cpu_model import EVCAdmissionFailedCPUModel
from vmware_vi.models.evc_admission_failed_cpu_model_for_mode import EVCAdmissionFailedCPUModelForMode
from vmware_vi.models.evc_admission_failed_cpu_vendor import EVCAdmissionFailedCPUVendor
from vmware_vi.models.evc_admission_failed_cpu_vendor_unknown import EVCAdmissionFailedCPUVendorUnknown
from vmware_vi.models.evc_admission_failed_host_disconnected import EVCAdmissionFailedHostDisconnected
from vmware_vi.models.evc_admission_failed_host_software import EVCAdmissionFailedHostSoftware
from vmware_vi.models.evc_admission_failed_host_software_for_mode import EVCAdmissionFailedHostSoftwareForMode
from vmware_vi.models.evc_admission_failed_vm_active import EVCAdmissionFailedVmActive
from vmware_vi.models.gateway_connect_fault import GatewayConnectFault
from vmware_vi.models.gateway_host_not_reachable import GatewayHostNotReachable
from vmware_vi.models.gateway_not_found import GatewayNotFound
from vmware_vi.models.gateway_not_reachable import GatewayNotReachable
from vmware_vi.models.gateway_operation_refused import GatewayOperationRefused
from vmware_vi.models.gateway_to_host_auth_fault import GatewayToHostAuthFault
from vmware_vi.models.gateway_to_host_connect_fault import GatewayToHostConnectFault
from vmware_vi.models.gateway_to_host_trust_verify_fault import GatewayToHostTrustVerifyFault
from vmware_vi.models.multiple_certificates_verify_fault import MultipleCertificatesVerifyFault
from vmware_vi.models.no_host import NoHost
from vmware_vi.models.no_permission_on_host import NoPermissionOnHost
from vmware_vi.models.non_vmware_oui_mac_not_supported_host import NonVmwareOuiMacNotSupportedHost
from vmware_vi.models.not_supported_host import NotSupportedHost
from vmware_vi.models.not_supported_host_for_v_flash import NotSupportedHostForVFlash
from vmware_vi.models.not_supported_host_for_vmcp import NotSupportedHostForVmcp
from vmware_vi.models.not_supported_host_for_vmem_file import NotSupportedHostForVmemFile
from vmware_vi.models.not_supported_host_for_vsan import NotSupportedHostForVsan
from vmware_vi.models.not_supported_host_in_cluster import NotSupportedHostInCluster
from vmware_vi.models.not_supported_host_in_dvs import NotSupportedHostInDvs
from vmware_vi.models.not_supported_host_in_ha_cluster import NotSupportedHostInHACluster
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.read_host_resource_pool_tree_failed import ReadHostResourcePoolTreeFailed
from vmware_vi.models.ssl_disabled_fault import SSLDisabledFault
from vmware_vi.models.ssl_verify_fault import SSLVerifyFault
from vmware_vi.models.too_many_hosts import TooManyHosts
# TODO: Rewrite to not use raise_errors
HostConnectFault.model_rebuild(raise_errors=False)

