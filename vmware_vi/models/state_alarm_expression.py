# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.alarm_expression import AlarmExpression
from vmware_vi.models.state_alarm_operator_enum import StateAlarmOperatorEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StateAlarmExpression(AlarmExpression):
    """
    An alarm expression that uses the running state of either a virtual machine or a host as the condition that triggers the alarm.  Base type.  There are two alarm operands: yellow and red. At least one of them must be set. The value of the alarm expression is determined as follows: - If the red state is set but the yellow state is not: the expression is red when   the state operand matches (isEqual operator) or does not match (isUnequal operator)   the state of the managed entity. The expression is green otherwise. - If yellow is set but red is not: the expression is yellow when   the state operand matches (isEqual) or does not match (isUnequal)   the state of the managed entity. The expression is green otherwise. - If both yellow and red are set, the value of the expression is red when   the red state operand matches (isEqual) or does not match (isUnequal)   the state of the managed entity. Otherwise, the expression is   yellow when the yellow state operand matches (isEqual) or does not match (isUnequal)   the state of the managed entity. Otherwise, the expression is green. 
    """ # noqa: E501
    operator: StateAlarmOperatorEnum
    type: StrictStr = Field(description="Name of the object type containing the property. ")
    state_path: StrictStr = Field(description="Path of the state property.  The supported values: - for vim.VirtualMachine type: - runtime.powerState or summary.quickStats.guestHeartbeatStatus - for vim.HostSystem type: runtime.connectionState ", alias="statePath")
    yellow: Optional[StrictStr] = Field(default=None, description="Whether or not to test for a yellow condition.  If this property is not set, do not calculate yellow status. ")
    red: Optional[StrictStr] = Field(default=None, description="Whether or not to test for a red condition.  If this property is not set, do not calculate red status. ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StateAlarmExpression from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StateAlarmExpression from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


