# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import SecretStr, StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_gateway_spec import HostGatewaySpec
from vmware_vi.models.host_lockdown_mode_enum import HostLockdownModeEnum
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostConnectSpec(DataObject):
    """
    Specifies the parameters needed to add a single host.  This includes a small set of optional information about the host configuration. This allows the network and datastore configuration of the host to be synchronized with the naming conventions of the datacenter, as well as the configuration of a vim account (the username/password for the virtual machine files that is created on disk). 
    """ # noqa: E501
    host_name: Optional[StrictStr] = Field(default=None, description="The DNS name or IP address of the host.  (Required for adding a host.) ", alias="hostName")
    port: Optional[StrictInt] = Field(default=None, description="The port number for the connection.  If this is not specified, the default port number is used. For ESX 2.x hosts this is the authd port (902 by default). For ESX 3.x and above and VMware Server hosts this is the https port (443 by default). If this is a reconnect, the port number is unchanged. ")
    ssl_thumbprint: Optional[StrictStr] = Field(default=None, description="The thumbprint of the SSL certificate, which the host is expected to have.  If this value is set and matches the certificate thumbprint presented by the host, then the host is authenticated. If this value is not set or does not match the certificate thumbprint presented by the host, then the host's certificate is verified by checking whether it was signed by a recognized CA.  The thumbprint is always computed using the SHA1 hash and is the string representation of that hash in the format: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx where, 'x' represents a hexadecimal digit  ***Since:*** VI API 2.5 ", alias="sslThumbprint")
    user_name: Optional[StrictStr] = Field(default=None, description="The administration account on the host.  (Required for adding a host.) ", alias="userName")
    password: Optional[SecretStr] = Field(default=None, description="The password for the administration account.  (Required for adding a host.) ")
    vm_folder: Optional[ManagedObjectReference] = Field(default=None, alias="vmFolder")
    force: StrictBool = Field(description="If this flag is set to \"true\", then the connection succeeds even if the host is already being managed by another VirtualCenter server.  The original VirtualCenter server loses connection to the host. ")
    vim_account_name: Optional[StrictStr] = Field(default=None, description="The username to be used for accessing the virtual machine files on the disk. ", alias="vimAccountName")
    vim_account_password: Optional[SecretStr] = Field(default=None, description="The password to be used with the *vimAccountName* property for accessing the virtual machine files on the disk. ", alias="vimAccountPassword")
    management_ip: Optional[StrictStr] = Field(default=None, description="The IP address of the VirtualCenter server that will manage this host.  This field can be used to control which IP address the VirtualCenter agent will send heartbeats to. If it is not set, VirtualCenter will use the local IP address used when communicating with the host. Setting this field is useful when the VirtualCenter server is behind a NAT in which case the external NAT address must be used.  ***Since:*** vSphere API 4.0 ", alias="managementIp")
    lockdown_mode: Optional[HostLockdownModeEnum] = Field(default=None, alias="lockdownMode")
    host_gateway: Optional[HostGatewaySpec] = Field(default=None, alias="hostGateway")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostConnectSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostConnectSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


