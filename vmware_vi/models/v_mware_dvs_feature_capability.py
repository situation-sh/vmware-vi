# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.dvs_feature_capability import DVSFeatureCapability
from vmware_vi.models.v_mware_dvs_dpu_capability import VMwareDvsDpuCapability
from vmware_vi.models.v_mware_dvs_ipfix_capability import VMwareDvsIpfixCapability
from vmware_vi.models.v_mware_dvs_lacp_capability import VMwareDvsLacpCapability
from vmware_vi.models.v_mware_dvs_mtu_capability import VMwareDvsMtuCapability
from vmware_vi.models.v_mware_dvs_vspan_capability import VMwareDVSVspanCapability
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VMwareDVSFeatureCapability(DVSFeatureCapability):
    """
    Indicators of support for version-specific DVS features that are only available on a VMware-class switch.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    vspan_supported: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether vspan(DVMirror) is supported on the vSphere Distributed Switch.  Distributed Port Mirroring is supported in vSphere Distributed Switch Version 5.0 or later.  ***Since:*** vSphere API 5.0 ", alias="vspanSupported")
    lldp_supported: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether LLDP(Link Layer Discovery Protocol) is supported on the vSphere Distributed Switch.  LLDP is supported in vSphere Distributed Switch Version 5.0 or later.  ***Since:*** vSphere API 5.0 ", alias="lldpSupported")
    ipfix_supported: Optional[StrictBool] = Field(default=None, description="Deprecated as of vSphere API 6.0, use *VMwareDvsIpfixCapability*.  Flag to indicate whether IPFIX(NetFlow) is supported on the vSphere Distributed Switch.  IPFIX is supported in vSphere Distributed Switch Version 5.0 or later.  ***Since:*** vSphere API 5.0 ", alias="ipfixSupported")
    ipfix_capability: Optional[VMwareDvsIpfixCapability] = Field(default=None, alias="ipfixCapability")
    multicast_snooping_supported: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether multicast snooping(IGMP/MLD Snooping) is supported on the vSphere Distributed Switch.  IGMP/MLD Snooping is supported in vSphere Distributed Switch Version 6.0 or later.  ***Since:*** vSphere API 6.0 ", alias="multicastSnoopingSupported")
    vspan_capability: Optional[VMwareDVSVspanCapability] = Field(default=None, alias="vspanCapability")
    lacp_capability: Optional[VMwareDvsLacpCapability] = Field(default=None, alias="lacpCapability")
    dpu_capability: Optional[VMwareDvsDpuCapability] = Field(default=None, alias="dpuCapability")
    nsx_supported: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether NSX is supported on the vSphere Distributed Switch.  NSX is supported in vSphere Distributed Switch Version 7.0 or later.  ***Since:*** vSphere API 7.0 ", alias="nsxSupported")
    mtu_capability: Optional[VMwareDvsMtuCapability] = Field(default=None, alias="mtuCapability")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VMwareDVSFeatureCapability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VMwareDVSFeatureCapability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


