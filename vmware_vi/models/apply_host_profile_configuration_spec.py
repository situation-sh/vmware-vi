# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.localizable_message import LocalizableMessage
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.method_fault import MethodFault
from vmware_vi.models.profile_execute_result import ProfileExecuteResult
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApplyHostProfileConfigurationSpec(ProfileExecuteResult):
    """
    The data object that contains the objects needed to remediate a host in host profile batch apply.  ***Since:*** vSphere API 6.5 
    """ # noqa: E501
    host: ManagedObjectReference
    task_list_requirement: Optional[List[StrictStr]] = Field(default=None, description="The task requirements from the results of *HostProfileManager.GenerateConfigTaskList* method  ***Since:*** vSphere API 6.5 ", alias="taskListRequirement")
    task_description: Optional[List[LocalizableMessage]] = Field(default=None, description="Description of tasks that will be performed on the host to carry out HostProfile application.  ***Since:*** vSphere API 6.5 ", alias="taskDescription")
    reboot_stateless: Optional[StrictBool] = Field(default=None, description="For a stateless host, there are two approaches to apply a host profile: (1) Reboot the host and apply the host profile at boot time.  (2) Apply the host profile directly from VC. We call this as regular apply. The variable rebootStateless allows users to choose the first approach from the two approaches above: apply host profile by rebooting this host.  ***Since:*** vSphere API 6.5 ", alias="rebootStateless")
    reboot_host: Optional[StrictBool] = Field(default=None, description="For regular apply, when some of the tasks requires reboot, that this variable is<code>true</code> indicates that the reboot automatically happens in the batch profile apply than that the user will manually reboot the system later.  For stateless host, this variable takes effect only when the variable <code>rebootStateless</code> above is <code>false</code>.  ***Since:*** vSphere API 6.5 ", alias="rebootHost")
    fault_data: Optional[MethodFault] = Field(default=None, alias="faultData")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApplyHostProfileConfigurationSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApplyHostProfileConfigurationSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


