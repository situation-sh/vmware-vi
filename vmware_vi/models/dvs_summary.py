# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.distributed_virtual_switch_product_spec import DistributedVirtualSwitchProductSpec
from vmware_vi.models.dvs_contact_info import DVSContactInfo
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DVSSummary(DataObject):
    """
    Summary of the distributed switch configuration.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the switch.  ***Since:*** vSphere API 4.0 ")
    uuid: StrictStr = Field(description="The generated UUID of the switch.  ***Since:*** vSphere API 4.0 ")
    num_ports: StrictInt = Field(description="Current number of ports, not including conflict ports.  ***Since:*** vSphere API 4.0 ", alias="numPorts")
    product_info: Optional[DistributedVirtualSwitchProductSpec] = Field(default=None, alias="productInfo")
    host_member: Optional[List[ManagedObjectReference]] = Field(default=None, description="The names of the hosts that join the switch.  ***Since:*** vSphere API 4.0  Refers instances of *HostSystem*. ", alias="hostMember")
    vm: Optional[List[ManagedObjectReference]] = Field(default=None, description="The Virtual Machines with Virtual NICs that connect to the switch.  In releases after vSphere API 5.0, vSphere Servers might not generate property collector update notifications for this property. To obtain the latest value of the property, you can use PropertyCollector methods RetrievePropertiesEx or WaitForUpdatesEx. If you use the PropertyCollector.WaitForUpdatesEx method, specify an empty string for the version parameter. Since this property is on a DataObject, an update returned by WaitForUpdatesEx may contain values for this property when some other property on the DataObject changes. If this update is a result of a call to WaitForUpdatesEx with a non-empty version parameter, the value for this property may not be current.  ***Since:*** vSphere API 4.0  Refers instances of *VirtualMachine*. ")
    host: Optional[List[ManagedObjectReference]] = Field(default=None, description="The hosts with Virtual NICs that connect to the switch.  ***Since:*** vSphere API 4.0  Refers instances of *HostSystem*. ")
    portgroup_name: Optional[List[StrictStr]] = Field(default=None, description="The names of the portgroups that are defined on the switch.  ***Since:*** vSphere API 4.0 ", alias="portgroupName")
    description: Optional[StrictStr] = Field(default=None, description="A description string of the switch.  ***Since:*** vSphere API 4.0 ")
    contact: Optional[DVSContactInfo] = None
    num_hosts: Optional[StrictInt] = Field(default=None, description="The number of hosts in the switch.  The value of this property is not affected by the privileges granted to the current user.  ***Since:*** vSphere API 5.5 ", alias="numHosts")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DVSSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DVSSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


