# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StorageDrsIoLoadBalanceConfig(DataObject):
    """
    Storage DRS configuration for I/O load balancing.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    reservable_percent_threshold: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if total IOPs reservation of all VMs running on a datastore is higher than the specified threshold.  Storage DRS recommends migration out of all such datastores, if more than one datastore exceed their reserved IOPs threshold.  The actual Iops used to determine threshold are computed from Storage DRS estimation of IOPs capacity of a datastore. The absolute value may change over time, according to storage response to workloads.  The valid values are in the range of 30 (i.e., 30%) to 100 (i.e., 100%). If not specified, the default value is 60%.  ***Since:*** vSphere API 6.0 ", alias="reservablePercentThreshold")
    reservable_iops_threshold: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if total IOPs reservation of all VMs running on a datastore is higher than the specified threshold.  Storage DRS recommends migration out of all such datastores, if more than one datastore exceed their reserved IOPs threshold.  This is an advanced option, and should only be used if Storage DRS estimated IOPs capacity is incorrect for datastores. The value should be based on conservative estimate of storage performance, and ideally should be set to about 50-60% of worse case peak performance of backing LUN.  ***Since:*** vSphere API 6.0 ", alias="reservableIopsThreshold")
    reservable_threshold_mode: Optional[StrictStr] = Field(default=None, description="Determines which reservation threshold specification to use.  See *StorageDrsPodConfigInfoBehavior_enum*. If unspecified, the mode is assumed automatic by default. Storage DRS uses percentage value in that case. If mode is specified, but corresponding reservationThreshold value is absent, option specific defaults are used.  ***Since:*** vSphere API 6.0 ", alias="reservableThresholdMode")
    io_latency_threshold: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if I/O latency on one (or more) of the datastores is higher than the specified threshold.  Unit: millisecond. The valid values are in the range of 5 to 100. If not specified, the default value is 15.  ***Since:*** vSphere API 5.0 ", alias="ioLatencyThreshold")
    io_load_imbalance_threshold: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if I/O load imbalance level is higher than the specified threshold.  Unit: a number. The valid values are in the range of 1 to 100. If not specified, the default value is 5.  ***Since:*** vSphere API 5.0 ", alias="ioLoadImbalanceThreshold")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StorageDrsIoLoadBalanceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StorageDrsIoLoadBalanceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


