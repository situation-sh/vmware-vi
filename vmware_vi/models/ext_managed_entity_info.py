# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExtManagedEntityInfo(DataObject):
    """
    This data object contains information about entities managed by this extension.  The data can be used by clients to show extra information about managed virtual machines or vApps, such as a custom icon and a description of the entity.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    type: StrictStr = Field(description="Managed entity type, as defined by the extension.  This matches the *type* field in the configuration about a virtual machine or vApp.  ***Since:*** vSphere API 5.0 ")
    small_icon_url: Optional[StrictStr] = Field(default=None, description="The URL to a 16x16 pixel icon in PNG format for entities of this type managed by this extension.  The design of the icon should allow for the possibility of it being badged with the power state of the entity by the vSphere client. If you do not provide this icon, the icon at *iconUrl*, if found, is scaled down to 16x16 pixels.  ***Since:*** vSphere API 5.0 ", alias="smallIconUrl")
    icon_url: Optional[StrictStr] = Field(default=None, description="The URL to an icon in PNG format that is no larger than 256x256 pixels.  This icon will be scaled to 16x16, 32x32, 64x64, and 128x128 if needed. The icon is shown for all entities of this type managed by this extension.  ***Since:*** vSphere API 5.1 ", alias="iconUrl")
    description: Optional[StrictStr] = Field(default=None, description="Description of this managed entity type.  This is typically displayed by clients, and should provide users with information about the function of entities of this type.  ***Since:*** vSphere API 5.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExtManagedEntityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExtManagedEntityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


