# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.datastore_capability import DatastoreCapability
from vmware_vi.models.datastore_summary import DatastoreSummary
from vmware_vi.models.virtual_machine_target_info import VirtualMachineTargetInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineDatastoreInfo(VirtualMachineTargetInfo):
    """
    DatastoreInfo describes a datastore that a virtual disk can be stored on. 
    """ # noqa: E501
    datastore: DatastoreSummary
    capability: DatastoreCapability
    max_file_size: StrictInt = Field(description="The maximum size of a file that can reside on this datastore. ", alias="maxFileSize")
    max_virtual_disk_capacity: Optional[StrictInt] = Field(default=None, description="The maximum capacity of a virtual disk which can be created on this volume  ***Since:*** vSphere API 5.5 ", alias="maxVirtualDiskCapacity")
    max_physical_rdm_file_size: Optional[StrictInt] = Field(default=None, description="Maximum raw device mapping size (physical compatibility)  ***Since:*** vSphere API 6.0 ", alias="maxPhysicalRDMFileSize")
    max_virtual_rdm_file_size: Optional[StrictInt] = Field(default=None, description="Maximum raw device mapping size (virtual compatibility)  ***Since:*** vSphere API 6.0 ", alias="maxVirtualRDMFileSize")
    mode: StrictStr = Field(description="Access mode for this datastore.  This is either readOnly or readWrite. A virtual disk needs to be stored on readWrite datastore. ISOs can be read from a readOnly datastore.  See also *HostMountMode_enum*. ")
    v_storage_support: Optional[StrictStr] = Field(default=None, description="Indicate the states of vStorage hardware acceleration support for this datastore.  In the case of a cluster compute resource, this property is aggregated from the values reported by individual hosts as follows: - If at least one host reports   *vStorageSupported*,   then it is set to   *vStorageSupported*. - Else if at least one host reports   *vStorageUnknown*,   it is set to   *vStorageUnknown*. - Else if at least one host reports   *vStorageUnsupported*,   it is set to   *vStorageUnsupported*. - Else it is unset.    See also *FileSystemMountInfoVStorageSupportStatus_enum*.  ***Since:*** vSphere API 5.0 ", alias="vStorageSupport")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineDatastoreInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineDatastoreInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


