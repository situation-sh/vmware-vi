# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NetDnsConfigSpec(DataObject):
    """
    Domain Name Server (DNS) Configuration Specification - a data object for configuring the RFC 1034 client side DNS settings.  TBD: remove this section, only for discussing what goes into this object. Place properties here that are specific to the RFC/common to all systems. Properties that are platform specific should go into a separate config spec. http://technet.microsoft.com/en-us/library/cc778792.aspx http://en.wikipedia.org/wiki/Microsoft\\_DNS  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    dhcp: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether or not dynamic host control protocol (DHCP) will be used to set DNS configuration automatically.  See vim.net.DhcpConfigSpec  ***Since:*** vSphere API 4.1 ")
    host_name: Optional[StrictStr] = Field(default=None, description="The host name portion of DNS name.  For example, \"esx01\" part of esx01.example.com. The rules for forming a hostname are specified in RFC 1034.  ***Since:*** vSphere API 4.1 ", alias="hostName")
    domain_name: Optional[StrictStr] = Field(default=None, description="The domain name portion of the DNS name.  This would be the \"example.com\" part of esx01.example.com. The rules for forming a domain name are defined in RFC 1034.  ***Since:*** vSphere API 4.1 ", alias="domainName")
    ip_address: Optional[List[StrictStr]] = Field(default=None, description="Unicast IP address(s) of one or more DNS servers in order of use.  IPv4 addresses are specified using dotted decimal notation. For example, \"192.0.2.1\". IPv6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.  ***Since:*** vSphere API 4.1 ", alias="ipAddress")
    search_domain: Optional[List[StrictStr]] = Field(default=None, description="The domain in which to search for hosts in order of preference.  ***Since:*** vSphere API 4.1 ", alias="searchDomain")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NetDnsConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NetDnsConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


