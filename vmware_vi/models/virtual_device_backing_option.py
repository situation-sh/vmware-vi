# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualDeviceBackingOption(DataObject):
    """
    The *VirtualDeviceBackingOption* data class defines options for device-specific virtual backing objects. 
    """ # noqa: E501
    type: StrictStr = Field(description="The name of the class the client should use to instantiate backing for the virtual device. ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','VirtualCdromAtapiBackingOption': 'VirtualCdromAtapiBackingOption','VirtualCdromIsoBackingOption': 'VirtualCdromIsoBackingOption','VirtualCdromPassthroughBackingOption': 'VirtualCdromPassthroughBackingOption','VirtualCdromRemoteAtapiBackingOption': 'VirtualCdromRemoteAtapiBackingOption','VirtualCdromRemotePassthroughBackingOption': 'VirtualCdromRemotePassthroughBackingOption','VirtualDeviceDeviceBackingOption': 'VirtualDeviceDeviceBackingOption','VirtualDeviceFileBackingOption': 'VirtualDeviceFileBackingOption','VirtualDevicePipeBackingOption': 'VirtualDevicePipeBackingOption','VirtualDeviceRemoteDeviceBackingOption': 'VirtualDeviceRemoteDeviceBackingOption','VirtualDeviceURIBackingOption': 'VirtualDeviceURIBackingOption','VirtualDiskFlatVer1BackingOption': 'VirtualDiskFlatVer1BackingOption','VirtualDiskFlatVer2BackingOption': 'VirtualDiskFlatVer2BackingOption','VirtualDiskLocalPMemBackingOption': 'VirtualDiskLocalPMemBackingOption','VirtualDiskPartitionedRawDiskVer2BackingOption': 'VirtualDiskPartitionedRawDiskVer2BackingOption','VirtualDiskRawDiskMappingVer1BackingOption': 'VirtualDiskRawDiskMappingVer1BackingOption','VirtualDiskRawDiskVer2BackingOption': 'VirtualDiskRawDiskVer2BackingOption','VirtualDiskSeSparseBackingOption': 'VirtualDiskSeSparseBackingOption','VirtualDiskSparseVer1BackingOption': 'VirtualDiskSparseVer1BackingOption','VirtualDiskSparseVer2BackingOption': 'VirtualDiskSparseVer2BackingOption','VirtualEthernetCardDVPortBackingOption': 'VirtualEthernetCardDVPortBackingOption','VirtualEthernetCardLegacyNetworkBackingOption': 'VirtualEthernetCardLegacyNetworkBackingOption','VirtualEthernetCardNetworkBackingOption': 'VirtualEthernetCardNetworkBackingOption','VirtualEthernetCardOpaqueNetworkBackingOption': 'VirtualEthernetCardOpaqueNetworkBackingOption','VirtualFloppyDeviceBackingOption': 'VirtualFloppyDeviceBackingOption','VirtualFloppyImageBackingOption': 'VirtualFloppyImageBackingOption','VirtualFloppyRemoteDeviceBackingOption': 'VirtualFloppyRemoteDeviceBackingOption','VirtualPCIPassthroughDeviceBackingOption': 'VirtualPCIPassthroughDeviceBackingOption','VirtualPCIPassthroughDvxBackingOption': 'VirtualPCIPassthroughDvxBackingOption','VirtualPCIPassthroughDynamicBackingOption': 'VirtualPCIPassthroughDynamicBackingOption','VirtualPCIPassthroughPluginBackingOption': 'VirtualPCIPassthroughPluginBackingOption','VirtualPCIPassthroughVmiopBackingOption': 'VirtualPCIPassthroughVmiopBackingOption','VirtualParallelPortDeviceBackingOption': 'VirtualParallelPortDeviceBackingOption','VirtualParallelPortFileBackingOption': 'VirtualParallelPortFileBackingOption','VirtualPointingDeviceBackingOption': 'VirtualPointingDeviceBackingOption','VirtualPrecisionClockSystemClockBackingOption': 'VirtualPrecisionClockSystemClockBackingOption','VirtualSCSIPassthroughDeviceBackingOption': 'VirtualSCSIPassthroughDeviceBackingOption','VirtualSerialPortDeviceBackingOption': 'VirtualSerialPortDeviceBackingOption','VirtualSerialPortFileBackingOption': 'VirtualSerialPortFileBackingOption','VirtualSerialPortPipeBackingOption': 'VirtualSerialPortPipeBackingOption','VirtualSerialPortThinPrintBackingOption': 'VirtualSerialPortThinPrintBackingOption','VirtualSerialPortURIBackingOption': 'VirtualSerialPortURIBackingOption','VirtualSoundCardDeviceBackingOption': 'VirtualSoundCardDeviceBackingOption','VirtualSriovEthernetCardSriovBackingOption': 'VirtualSriovEthernetCardSriovBackingOption','VirtualUSBRemoteClientBackingOption': 'VirtualUSBRemoteClientBackingOption','VirtualUSBRemoteHostBackingOption': 'VirtualUSBRemoteHostBackingOption','VirtualUSBUSBBackingOption': 'VirtualUSBUSBBackingOption'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualDeviceBackingOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualDeviceBackingOption from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("VirtualDeviceBackingOption failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.virtual_cdrom_atapi_backing_option import VirtualCdromAtapiBackingOption
from vmware_vi.models.virtual_cdrom_iso_backing_option import VirtualCdromIsoBackingOption
from vmware_vi.models.virtual_cdrom_passthrough_backing_option import VirtualCdromPassthroughBackingOption
from vmware_vi.models.virtual_cdrom_remote_atapi_backing_option import VirtualCdromRemoteAtapiBackingOption
from vmware_vi.models.virtual_cdrom_remote_passthrough_backing_option import VirtualCdromRemotePassthroughBackingOption
from vmware_vi.models.virtual_device_device_backing_option import VirtualDeviceDeviceBackingOption
from vmware_vi.models.virtual_device_file_backing_option import VirtualDeviceFileBackingOption
from vmware_vi.models.virtual_device_pipe_backing_option import VirtualDevicePipeBackingOption
from vmware_vi.models.virtual_device_remote_device_backing_option import VirtualDeviceRemoteDeviceBackingOption
from vmware_vi.models.virtual_device_uri_backing_option import VirtualDeviceURIBackingOption
from vmware_vi.models.virtual_disk_flat_ver1_backing_option import VirtualDiskFlatVer1BackingOption
from vmware_vi.models.virtual_disk_flat_ver2_backing_option import VirtualDiskFlatVer2BackingOption
from vmware_vi.models.virtual_disk_local_p_mem_backing_option import VirtualDiskLocalPMemBackingOption
from vmware_vi.models.virtual_disk_partitioned_raw_disk_ver2_backing_option import VirtualDiskPartitionedRawDiskVer2BackingOption
from vmware_vi.models.virtual_disk_raw_disk_mapping_ver1_backing_option import VirtualDiskRawDiskMappingVer1BackingOption
from vmware_vi.models.virtual_disk_raw_disk_ver2_backing_option import VirtualDiskRawDiskVer2BackingOption
from vmware_vi.models.virtual_disk_se_sparse_backing_option import VirtualDiskSeSparseBackingOption
from vmware_vi.models.virtual_disk_sparse_ver1_backing_option import VirtualDiskSparseVer1BackingOption
from vmware_vi.models.virtual_disk_sparse_ver2_backing_option import VirtualDiskSparseVer2BackingOption
from vmware_vi.models.virtual_ethernet_card_dv_port_backing_option import VirtualEthernetCardDVPortBackingOption
from vmware_vi.models.virtual_ethernet_card_legacy_network_backing_option import VirtualEthernetCardLegacyNetworkBackingOption
from vmware_vi.models.virtual_ethernet_card_network_backing_option import VirtualEthernetCardNetworkBackingOption
from vmware_vi.models.virtual_ethernet_card_opaque_network_backing_option import VirtualEthernetCardOpaqueNetworkBackingOption
from vmware_vi.models.virtual_floppy_device_backing_option import VirtualFloppyDeviceBackingOption
from vmware_vi.models.virtual_floppy_image_backing_option import VirtualFloppyImageBackingOption
from vmware_vi.models.virtual_floppy_remote_device_backing_option import VirtualFloppyRemoteDeviceBackingOption
from vmware_vi.models.virtual_parallel_port_device_backing_option import VirtualParallelPortDeviceBackingOption
from vmware_vi.models.virtual_parallel_port_file_backing_option import VirtualParallelPortFileBackingOption
from vmware_vi.models.virtual_pci_passthrough_device_backing_option import VirtualPCIPassthroughDeviceBackingOption
from vmware_vi.models.virtual_pci_passthrough_dvx_backing_option import VirtualPCIPassthroughDvxBackingOption
from vmware_vi.models.virtual_pci_passthrough_dynamic_backing_option import VirtualPCIPassthroughDynamicBackingOption
from vmware_vi.models.virtual_pci_passthrough_plugin_backing_option import VirtualPCIPassthroughPluginBackingOption
from vmware_vi.models.virtual_pci_passthrough_vmiop_backing_option import VirtualPCIPassthroughVmiopBackingOption
from vmware_vi.models.virtual_pointing_device_backing_option import VirtualPointingDeviceBackingOption
from vmware_vi.models.virtual_precision_clock_system_clock_backing_option import VirtualPrecisionClockSystemClockBackingOption
from vmware_vi.models.virtual_scsi_passthrough_device_backing_option import VirtualSCSIPassthroughDeviceBackingOption
from vmware_vi.models.virtual_serial_port_device_backing_option import VirtualSerialPortDeviceBackingOption
from vmware_vi.models.virtual_serial_port_file_backing_option import VirtualSerialPortFileBackingOption
from vmware_vi.models.virtual_serial_port_pipe_backing_option import VirtualSerialPortPipeBackingOption
from vmware_vi.models.virtual_serial_port_thin_print_backing_option import VirtualSerialPortThinPrintBackingOption
from vmware_vi.models.virtual_serial_port_uri_backing_option import VirtualSerialPortURIBackingOption
from vmware_vi.models.virtual_sound_card_device_backing_option import VirtualSoundCardDeviceBackingOption
from vmware_vi.models.virtual_sriov_ethernet_card_sriov_backing_option import VirtualSriovEthernetCardSriovBackingOption
from vmware_vi.models.virtual_usb_remote_client_backing_option import VirtualUSBRemoteClientBackingOption
from vmware_vi.models.virtual_usb_remote_host_backing_option import VirtualUSBRemoteHostBackingOption
from vmware_vi.models.virtual_usbusb_backing_option import VirtualUSBUSBBackingOption
# TODO: Rewrite to not use raise_errors
VirtualDeviceBackingOption.model_rebuild(raise_errors=False)

