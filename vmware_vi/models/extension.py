# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.description import Description
from vmware_vi.models.ext_extended_product_info import ExtExtendedProductInfo
from vmware_vi.models.ext_managed_entity_info import ExtManagedEntityInfo
from vmware_vi.models.ext_solution_manager_info import ExtSolutionManagerInfo
from vmware_vi.models.extension_client_info import ExtensionClientInfo
from vmware_vi.models.extension_event_type_info import ExtensionEventTypeInfo
from vmware_vi.models.extension_fault_type_info import ExtensionFaultTypeInfo
from vmware_vi.models.extension_health_info import ExtensionHealthInfo
from vmware_vi.models.extension_ovf_consumer_info import ExtensionOvfConsumerInfo
from vmware_vi.models.extension_privilege_info import ExtensionPrivilegeInfo
from vmware_vi.models.extension_resource_info import ExtensionResourceInfo
from vmware_vi.models.extension_server_info import ExtensionServerInfo
from vmware_vi.models.extension_task_type_info import ExtensionTaskTypeInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Extension(DataObject):
    """
    This data object type contains all information about an extension.  An extension may contain zero or more server interfaces and zero or more clients.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    description: Description
    key: StrictStr = Field(description="Extension key.  Should follow java package naming conventions for uniqueness (e.g. \"com.example.management\").  Extension names can only contain characters belonging to the lower ASCII character set (UTF-7) with the exception of the following characters: 1. All whitespace characters (\"space\" - ascii character 0x20 is allowed) 2. Control characters 3. Comma (ascii 0x2c), Forward slash (ascii 0x2f), Backward slash (ascii 0x5c),    Hash/Pound (ascii 0x23), Plus (ascii 0x2b), Greater (ascii 0x3e), Lesser (ascii 0x3c),    Equals (ascii 0x3d), Semi-colon (ascii 0x3b) and Double quote (ascii 0x22).     ***Since:*** VI API 2.5 ")
    company: Optional[StrictStr] = Field(default=None, description="Company information.  ***Since:*** vSphere API 4.0 ")
    type: Optional[StrictStr] = Field(default=None, description="Type of extension (example may include CP-DVS, NUOVA-DVS, etc.).  ***Since:*** vSphere API 4.0 ")
    version: StrictStr = Field(description="Extension version number as a dot-separated string.  For example, \"1.0.0\"  ***Since:*** VI API 2.5 ")
    subject_name: Optional[StrictStr] = Field(default=None, description="Subject name from client certificate.  ***Since:*** VI API 2.5 ", alias="subjectName")
    server: Optional[List[ExtensionServerInfo]] = Field(default=None, description="Servers for this extension.  ***Since:*** VI API 2.5 ")
    client: Optional[List[ExtensionClientInfo]] = Field(default=None, description="Clients for this extension.  ***Since:*** VI API 2.5 ")
    task_list: Optional[List[ExtensionTaskTypeInfo]] = Field(default=None, description="Definitions of tasks defined by this extension.  ***Since:*** VI API 2.5 ", alias="taskList")
    event_list: Optional[List[ExtensionEventTypeInfo]] = Field(default=None, description="Definitions of events defined by this extension.  ***Since:*** VI API 2.5 ", alias="eventList")
    fault_list: Optional[List[ExtensionFaultTypeInfo]] = Field(default=None, description="Definitions of faults defined by this extension.  ***Since:*** VI API 2.5 ", alias="faultList")
    privilege_list: Optional[List[ExtensionPrivilegeInfo]] = Field(default=None, description="Definitions privileges defined by this extension.  ***Since:*** VI API 2.5 ", alias="privilegeList")
    resource_list: Optional[List[ExtensionResourceInfo]] = Field(default=None, description="Resource data for all locales  ***Since:*** VI API 2.5 ", alias="resourceList")
    last_heartbeat_time: datetime = Field(description="Last extension heartbeat time.  ***Since:*** VI API 2.5 ", alias="lastHeartbeatTime")
    health_info: Optional[ExtensionHealthInfo] = Field(default=None, alias="healthInfo")
    ovf_consumer_info: Optional[ExtensionOvfConsumerInfo] = Field(default=None, alias="ovfConsumerInfo")
    extended_product_info: Optional[ExtExtendedProductInfo] = Field(default=None, alias="extendedProductInfo")
    managed_entity_info: Optional[List[ExtManagedEntityInfo]] = Field(default=None, description="Information about entities managed by this extension.  An extension can register virtual machines as managed by itself, by setting the *managedBy* property of the virtual machine.  ***Since:*** vSphere API 5.0 ", alias="managedEntityInfo")
    shown_in_solution_manager: Optional[StrictBool] = Field(default=None, description="Opt-in to the Solution Manager.  If set to true, this extension will be shown in the Solution Manager. If not set, or set to false, this extension is not shown in the Solution Manager.  ***Since:*** vSphere API 5.0 ", alias="shownInSolutionManager")
    solution_manager_info: Optional[ExtSolutionManagerInfo] = Field(default=None, alias="solutionManagerInfo")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Extension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Extension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


