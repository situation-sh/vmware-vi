# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.virtual_device_backing_info import VirtualDeviceBackingInfo
from vmware_vi.models.virtual_machine_base_independent_filter_spec import VirtualMachineBaseIndependentFilterSpec
from vmware_vi.models.virtual_machine_profile_spec import VirtualMachineProfileSpec
from vmware_vi.models.virtual_machine_relocate_spec_disk_locator_backing_spec import VirtualMachineRelocateSpecDiskLocatorBackingSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineRelocateSpecDiskLocator(DataObject):
    """
    The DiskLocator data object type specifies a virtual disk device (by ID) and a datastore locator for the disk's storage. 
    """ # noqa: E501
    disk_id: StrictInt = Field(description="Device ID of the virtual disk. ", alias="diskId")
    datastore: ManagedObjectReference
    disk_move_type: Optional[StrictStr] = Field(default=None, description="Manner in which to move the virtual disk to the *target datastore*.  The set of possible values is described in *VirtualMachineRelocateDiskMoveOptions_enum*.  This property can only be set if *HostCapability.deltaDiskBackingsSupported* is true.  If left unset then *moveAllDiskBackingsAndDisallowSharing* is assumed.  ***Since:*** vSphere API 4.0 ", alias="diskMoveType")
    disk_backing_info: Optional[VirtualDeviceBackingInfo] = Field(default=None, alias="diskBackingInfo")
    profile: Optional[List[VirtualMachineProfileSpec]] = Field(default=None, description="Virtual Disk Profile requirement.  Profiles are solution specific. Profile Based Storage Management is a vSphere server extension. The API users who want to provision VMs using Storage Profiles, need to interact with it. This is an optional parameter and if user doesn't specify profile, the default behavior will apply.  ***Since:*** vSphere API 5.5 ")
    backing: Optional[VirtualMachineRelocateSpecDiskLocatorBackingSpec] = None
    filter_spec: Optional[List[VirtualMachineBaseIndependentFilterSpec]] = Field(default=None, description="List of independent filters *VirtualMachineIndependentFilterSpec* to be configured on the virtual disk after the relocate.  ***Since:*** vSphere API 7.0.2.1 ", alias="filterSpec")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineRelocateSpecDiskLocator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineRelocateSpecDiskLocator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


