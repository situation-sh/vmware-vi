# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from vmware_vi.models.crypto_spec import CryptoSpec
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.fault_tolerance_config_info import FaultToleranceConfigInfo
from vmware_vi.models.latency_sensitivity import LatencySensitivity
from vmware_vi.models.managed_by_info import ManagedByInfo
from vmware_vi.models.option_value import OptionValue
from vmware_vi.models.replication_config_spec import ReplicationConfigSpec
from vmware_vi.models.resource_allocation_info import ResourceAllocationInfo
from vmware_vi.models.scheduled_hardware_upgrade_info import ScheduledHardwareUpgradeInfo
from vmware_vi.models.tools_config_info import ToolsConfigInfo
from vmware_vi.models.virtual_device_config_spec import VirtualDeviceConfigSpec
from vmware_vi.models.virtual_machine_affinity_info import VirtualMachineAffinityInfo
from vmware_vi.models.virtual_machine_boot_options import VirtualMachineBootOptions
from vmware_vi.models.virtual_machine_console_preferences import VirtualMachineConsolePreferences
from vmware_vi.models.virtual_machine_cpu_id_info_spec import VirtualMachineCpuIdInfoSpec
from vmware_vi.models.virtual_machine_default_power_op_info import VirtualMachineDefaultPowerOpInfo
from vmware_vi.models.virtual_machine_file_info import VirtualMachineFileInfo
from vmware_vi.models.virtual_machine_flag_info import VirtualMachineFlagInfo
from vmware_vi.models.virtual_machine_guest_monitoring_mode_info import VirtualMachineGuestMonitoringModeInfo
from vmware_vi.models.virtual_machine_network_shaper_info import VirtualMachineNetworkShaperInfo
from vmware_vi.models.virtual_machine_profile_spec import VirtualMachineProfileSpec
from vmware_vi.models.virtual_machine_sgx_info import VirtualMachineSgxInfo
from vmware_vi.models.virtual_machine_vcpu_config import VirtualMachineVcpuConfig
from vmware_vi.models.virtual_machine_virtual_device_groups import VirtualMachineVirtualDeviceGroups
from vmware_vi.models.virtual_machine_virtual_device_swap import VirtualMachineVirtualDeviceSwap
from vmware_vi.models.virtual_machine_virtual_numa import VirtualMachineVirtualNuma
from vmware_vi.models.virtual_machine_virtual_p_mem import VirtualMachineVirtualPMem
from vmware_vi.models.vm_config_spec import VmConfigSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineConfigSpec(DataObject):
    """
    This data object type encapsulates configuration settings when creating or reconfiguring a virtual machine.  To support incremental changes, these properties are all optional. If an optional property is unset, or any nested optional property is unset, the property will not be changed unless 'unset' is a valid value for the property. To determine whether 'unset' is a valid value for a particular property, refer to the documentation for that property. 
    """ # noqa: E501
    change_version: Optional[StrictStr] = Field(default=None, description="If specified, the changes are only applied if the current changeVersion matches the specified changeVersion.  This field can be used to guard against updates that have happened between when configInfo is read and when it is applied.  For more information about how configurations are uniquely identified, see *VirtualMachineConfigInfo.changeVersion*. ", alias="changeVersion")
    name: Optional[StrictStr] = Field(default=None, description="Display name of the virtual machine.  Any % (percent) character used in this name parameter must be escaped, unless it is used to start an escape sequence. Clients may also escape any other characters in this name parameter. Snapshots of virtual machines that have spaces in their names and are associated with ESX 2.x servers are not supported. Therefore, if you want the option to take snapshots of this virtual machine and you are associating it with an ESX 2.x server, do not use spaces in the name.  Reconfigure privilege: VirtualMachine.Config.Rename ")
    version: Optional[StrictStr] = Field(default=None, description="The version string for this virtual machine.  This is used only while creating a new virtual machine, and can be updated by invoking *VirtualMachine.UpgradeVM_Task* for this virtual machine. ")
    create_date: Optional[datetime] = Field(default=None, description="Creation date of a virtual machine represented in DateTime format.  This property is populated by the vCenter Server with the date and time of creation of the virtual machine. Values provided by the client will be ignored.  Reconfigure privilege: VirtualMachine.Config.Settings  ***Since:*** vSphere API 6.7 ", alias="createDate")
    uuid: Optional[StrictStr] = Field(default=None, description="128-bit SMBIOS UUID of a virtual machine represented as a hexadecimal string in \"12345678-abcd-1234-cdef-123456789abc\" format.  Normally, this property is not set by a client, allowing the Virtual Infrastructure environment to assign a UUID when the virtual machine is created. However, in some rare cases, such as a manual copy of a virtual machine, it may be necessary to set this property.  Reconfigure privilege: VirtualMachine.Config.Settings ")
    instance_uuid: Optional[StrictStr] = Field(default=None, description="VirtualCenter-specific 128-bit UUID of a virtual machine, represented as a hexadecimal string.  This identifier is used by VirtalCenter to uniquely identify all virtual machine instances in the Virtual Infrastructure environment, including those that may share the same SMBIOS UUID.  Normally, this property is not set by a client, allowing the Virtual Infrastructure environment to assign or change it when VirtualCenter detects an identifier conflict between virtual machines. This identifier can be modified even when a virtual machine is powered on. Clients can specify that vCenter Server reassign a new identifier by a providing an empty string. Reassigning the identifer is not allowed for Fault Tolerance virtual machines.  Reconfigure privilege: VirtualMachine.Config.Settings  ***Since:*** vSphere API 4.0 ", alias="instanceUuid")
    npiv_node_world_wide_name: Optional[List[StrictInt]] = Field(default=None, description="The NPIV node WWN to be assigned to a virtual machine.  This property should only be used or set when the value of *VirtualMachineConfigSpec.npivWorldWideNameOp* property is \"set\". Otherwise, an *InvalidVmConfig* fault will be thrown. If the specified node WWN is currently being used by another virtual machine, a *VmWwnConflict* fault will be thrown.  For detail description on WWN, see *VirtualMachineConfigInfo.npivNodeWorldWideName*.  Reconfigure privilege: VirtualMachine.Config.Settings.  ***Since:*** VI API 2.5 ", alias="npivNodeWorldWideName")
    npiv_port_world_wide_name: Optional[List[StrictInt]] = Field(default=None, description="The NPIV port WWN to be assigned to a virtual machine.  This property should only be used or set when the value of *VirtualMachineConfigSpec.npivWorldWideNameOp* property is \"set\". Otherwise, an *InvalidVmConfig* fault will be thrown. If the specified port WWN is currently being used by another virtual machine, a *VmWwnConflict* fault will be thrown.  For detail description on WWN, see *VirtualMachineConfigInfo.npivPortWorldWideName*.  Reconfigure privilege: VirtualMachine.Config.Settings.  ***Since:*** VI API 2.5 ", alias="npivPortWorldWideName")
    npiv_world_wide_name_type: Optional[StrictStr] = Field(default=None, description="This property is used internally in the communication between the VirtualCenter server and ESX Server to indicate the source for *VirtualMachineConfigSpec.npivNodeWorldWideName* and *VirtualMachineConfigSpec.npivPortWorldWideName* when *VirtualMachineConfigSpec.npivWorldWideNameOp* is \"set\".  This property should only be set by the VirtualCenter server.  If this property is set in a call to a VirtualCenter server, an *InvalidVmConfig* fault will always be thrown. In a call to an ESX Server host, an *InvalidVmConfig* fault will be thrown if the value of *VirtualMachineConfigSpec.npivWorldWideNameOp* is not set to \"set\".  Reconfigure privilege: VirtualMachine.Config.Settings.  ***Since:*** VI API 2.5 ", alias="npivWorldWideNameType")
    npiv_desired_node_wwns: Optional[Annotated[int, Field(le=32767, strict=True, ge=-32768)]] = Field(default=None, description="The NPIV node WWNs to be extended from the original list of WWN nummbers.  This property should be set to desired number which is an aggregate of existing plus new numbers. Desired Node WWNs should always be greater than the existing number of node WWNs  ***Since:*** vSphere API 4.0 ", alias="npivDesiredNodeWwns")
    npiv_desired_port_wwns: Optional[Annotated[int, Field(le=32767, strict=True, ge=-32768)]] = Field(default=None, description="The NPIV port WWNs to be extended from the original list of WWN nummbers.  This property should be set to desired number which is an aggregate of existing plus new numbers. Desired Node WWNs should always be greater than the existing number of port WWNs  ***Since:*** vSphere API 4.0 ", alias="npivDesiredPortWwns")
    npiv_temporary_disabled: Optional[StrictBool] = Field(default=None, description="This property is used to enable or disable the NPIV capability on a desired virtual machine on a temporary basis.  When this property is set NPIV Vport will not be instantiated by the VMX process of the Virtual Machine. When this property is set port WWNs and node WWNs in the VM configuration are preserved.  Reconfigure privilege: VirtualMachine.Config.Settings.  ***Since:*** vSphere API 4.0 ", alias="npivTemporaryDisabled")
    npiv_on_non_rdm_disks: Optional[StrictBool] = Field(default=None, description="This property is used to check whether the NPIV can be enabled on the Virtual machine with non-rdm disks in the configuration, so this is potentially not enabling npiv on vmfs disks.  Also this property is used to check whether RDM is required to generate WWNs for a virtual machine.  ***Since:*** vSphere API 4.0 ", alias="npivOnNonRdmDisks")
    npiv_world_wide_name_op: Optional[StrictStr] = Field(default=None, description="The flag to indicate what type of NPIV WWN operation is going to be performed on the virtual machine.  If unset, it indicates no change to existing NPIV WWN assignment (or not assigned) in the virtual machine.  Reconfigure privilege: VirtualMachine.Config.Settings.  See also *VirtualMachineConfigSpecNpivWwnOp_enum*.  ***Since:*** VI API 2.5 ", alias="npivWorldWideNameOp")
    location_id: Optional[StrictStr] = Field(default=None, description="128-bit hash based on the virtual machine's configuration file location and the UUID of the host assigned to run the virtual machine.  Normally, this property is not set by a client, allowing the Virtual Infrastructure environment to assign a location ID when the virtual machine is created. However, if the virtual machine's configuration file has been manually moved, it may be desirable to clear this property, setting it to an empty string, so the property is regenerated.  Reconfigure privilege: VirtualMachine.Config.Settings ", alias="locationId")
    guest_id: Optional[StrictStr] = Field(default=None, description="Short guest operating system identifier.  Reconfigure privilege: VirtualMachine.Config.Settings ", alias="guestId")
    alternate_guest_name: Optional[StrictStr] = Field(default=None, description="Full name for guest, if guestId is specified as `other` or `other-64`.  Reconfigure privilege: VirtualMachine.Config.Settings  ***Since:*** VI API 2.5 ", alias="alternateGuestName")
    annotation: Optional[StrictStr] = Field(default=None, description="User-provided description of the virtual machine.  Because this property is optional in the virtual machine configuration, it is necessary to pass an explicit empty string in a ConfigSpec object to remove an annotation that is already present in the *VirtualMachineConfigInfo* for a virtual machine.  Reconfigure privilege: VirtualMachine.Config.Rename ")
    files: Optional[VirtualMachineFileInfo] = None
    tools: Optional[ToolsConfigInfo] = None
    flags: Optional[VirtualMachineFlagInfo] = None
    console_preferences: Optional[VirtualMachineConsolePreferences] = Field(default=None, alias="consolePreferences")
    power_op_info: Optional[VirtualMachineDefaultPowerOpInfo] = Field(default=None, alias="powerOpInfo")
    reboot_power_off: Optional[StrictBool] = Field(default=None, description="Whether the next reboot will result in a power off.  Reconfigure privilege: VirtualMachine.Config.Settings ", alias="rebootPowerOff")
    num_cpus: Optional[StrictInt] = Field(default=None, description="Number of virtual processors in a virtual machine.  Reconfigure privilege: VirtualMachine.Config.CpuCount ", alias="numCPUs")
    vcpu_config: Optional[List[VirtualMachineVcpuConfig]] = Field(default=None, description="Vcpu configuration.  The <code>vcpuConfig</code> array is indexed by vcpu number.  ***Since:*** vSphere API 7.0 ", alias="vcpuConfig")
    num_cores_per_socket: Optional[StrictInt] = Field(default=None, description="Number of cores among which to distribute CPUs in this virtual machine.  Set \"numCoresPerSocket\" with a non-zero value to manually configure coresPerSocket size. Set \"numCoresPerSocket\" with zero to remove any manual size if present, and use default coresPerSocket behavior. Leave \"numCoresPerSocket\" unset to continue with existing configuration (either manual or default).  ***Since:*** vSphere API 5.0 ", alias="numCoresPerSocket")
    memory_mb: Optional[StrictInt] = Field(default=None, description="Size of a virtual machine's memory, in MB.  Reconfigure privilege: VirtualMachine.Config.Memory ", alias="memoryMB")
    memory_hot_add_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether or not memory can be added to the virtual machine while it is running.  This attribute can only be set when the virtual machine is powered-off.  Reconfigure privilege: VirtualMachine.Config.Memory  ***Since:*** vSphere API 4.0 ", alias="memoryHotAddEnabled")
    cpu_hot_add_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether or not virtual processors can be added to the virtual machine while it is running.  This attribute can only be set when the virtual machine is powered-off.  Reconfigure privilege: VirtualMachine.Config.CpuCount  ***Since:*** vSphere API 4.0 ", alias="cpuHotAddEnabled")
    cpu_hot_remove_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether or not virtual processors can be removed from the virtual machine while it is running.  This attribute can only be set when the virtual machine is powered-off.  Reconfigure privilege: VirtualMachine.Config.CpuCount  ***Since:*** vSphere API 4.0 ", alias="cpuHotRemoveEnabled")
    virtual_ich7_m_present: Optional[StrictBool] = Field(default=None, description="Does this virtual machine have Virtual Intel I/O Controller Hub 7  ***Since:*** vSphere API 5.0 ", alias="virtualICH7MPresent")
    virtual_smc_present: Optional[StrictBool] = Field(default=None, description="Does this virtual machine have System Management Controller  ***Since:*** vSphere API 5.0 ", alias="virtualSMCPresent")
    device_change: Optional[List[VirtualDeviceConfigSpec]] = Field(default=None, description="Set of virtual devices being modified by the configuration operation.  Reconfigure privileges: - VirtualMachine.Config.Resource if setting the \"shares\" property of   a new or existing VirtualDisk device - VirtualMachine.Config.RawDevice if adding, removing, or modifying a   raw device (also required when creating a virtual machine) - VirtualMachine.Config.HostUSBDevice if adding, removing, or   modifying a VirtualUSB device backed by a host USB device (also   required when creating a virtual machine). - VirtualMachine.Interact.DeviceConnection if setting the \"connectable\"   property of a connectable device - VirtualMachine.Interact.SetCDMedia if setting the \"backing\" property   of a VirtualCdrom device - VirtualMachine.Interact.SetFloppyMedia if setting the \"backing\" property   of a VirtualFloppy device - VirtualMachine.Config.EditDevice if setting any property of a   non-CDROM non-Floppy device - VirtualMachine.Config.AddExistingDisk if adding a VirtualDisk, and   the fileOperation is unset (also required when creating a virtual machine) - VirtualMachine.Config.AddNewDisk if adding a VirtualDisk and the   fileOperation is set (also required when creating a virtual machine) - VirtualMachine.Config.RemoveDisk if removing a VirtualDisk device - VirtualMachine.Config.AddRemoveDevice if adding or removing any   device other than disk, raw, or USB device. - Network.Assign if if setting the \"backing\" property of a   VirtualEthernetCard device. ", alias="deviceChange")
    cpu_allocation: Optional[ResourceAllocationInfo] = Field(default=None, alias="cpuAllocation")
    memory_allocation: Optional[ResourceAllocationInfo] = Field(default=None, alias="memoryAllocation")
    latency_sensitivity: Optional[LatencySensitivity] = Field(default=None, alias="latencySensitivity")
    cpu_affinity: Optional[VirtualMachineAffinityInfo] = Field(default=None, alias="cpuAffinity")
    memory_affinity: Optional[VirtualMachineAffinityInfo] = Field(default=None, alias="memoryAffinity")
    network_shaper: Optional[VirtualMachineNetworkShaperInfo] = Field(default=None, alias="networkShaper")
    cpu_feature_mask: Optional[List[VirtualMachineCpuIdInfoSpec]] = Field(default=None, description="Specifies the CPU feature compatibility masks.  Reconfigure privilege: VirtualMachine.Config.Settings As of vSphere API 6.5 *FeatureMask* is the recommended method for masking virtual machines with hardware version 9 and above (newer). ", alias="cpuFeatureMask")
    extra_config: Optional[List[OptionValue]] = Field(default=None, description="Additional configuration information for the virtual machine.  This describes a set of modifications to the additional options. If the key is already present, it will be reset with the new value provided. Otherwise, a new option is added. Keys with empty values will be removed.  Configuration keys that would conflict with parameters that are explicitly configurable through other fields in the ConfigSpec object are silently ignored.  Reconfigure privilege: VirtualMachine.Config.AdvancedConfig (also required when setting this property while creating a virtual machine) ", alias="extraConfig")
    swap_placement: Optional[StrictStr] = Field(default=None, description="Virtual machine swapfile placement policy.  This may only be set if the *swapPlacementSupported* capability is true for this virtual machine. Any change to this policy will take effect the next time the virtual machine powers on, resumes from a suspended state, or migrates while powered on.  Reconfigure privilege: VirtualMachine.Config.SwapPlacement (also required when setting this property while creating a virtual machine)  See also *VirtualMachineConfigInfoSwapPlacementType_enum*.  ***Since:*** VI API 2.5 ", alias="swapPlacement")
    boot_options: Optional[VirtualMachineBootOptions] = Field(default=None, alias="bootOptions")
    v_app_config: Optional[VmConfigSpec] = Field(default=None, alias="vAppConfig")
    ft_info: Optional[FaultToleranceConfigInfo] = Field(default=None, alias="ftInfo")
    rep_config: Optional[ReplicationConfigSpec] = Field(default=None, alias="repConfig")
    v_app_config_removed: Optional[StrictBool] = Field(default=None, description="Set to true, if the vApp configuration should be removed  Reconfigure privilege: VApp.ApplicationConfig  ***Since:*** vSphere API 4.0 ", alias="vAppConfigRemoved")
    v_asserts_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether user-configured virtual asserts will be triggered during virtual machine replay.  This setting takes effect during the next replay of the virtual machine.  Enabling this functionality can potentially cause some performance overhead during virtual machine execution.  ***Since:*** vSphere API 4.0 ", alias="vAssertsEnabled")
    change_tracking_enabled: Optional[StrictBool] = Field(default=None, description="Setting to control enabling/disabling changed block tracking for the virtual disks of this VM.  This may only be set if the *changeTrackingSupported* capability is true for this virtual machine. Any change to this property will take effect the next time the virtual machine powers on, resumes from a suspended state, performs a snapshot create/delete/revert operation or migrates while powered on.  Reconfigure privilege: VirtualMachine.Config.ChangeTracking (also required when setting this property while creating a virtual machine)  ***Since:*** vSphere API 4.0 ", alias="changeTrackingEnabled")
    firmware: Optional[StrictStr] = Field(default=None, description="Set the desired firmware type for this Virtual Machine.  Possible values are described in *GuestOsDescriptorFirmwareType_enum*  ***Since:*** vSphere API 5.0 ")
    max_mks_connections: Optional[StrictInt] = Field(default=None, description="If set, this setting limits the maximum number of active remote display connections that the virtual machine will support to the specified value.  Reconfigure privilege: VirtualMachine.Config.MksControl  ***Since:*** vSphere API 5.0 ", alias="maxMksConnections")
    guest_auto_lock_enabled: Optional[StrictBool] = Field(default=None, description="If set to True, this causes the guest operating system to automatically logout any active sessions whenever there are no remote display connections open to the virtual machine.  Reconfigure privilege: VirtualMachine.Config.MksControl  ***Since:*** vSphere API 5.0 ", alias="guestAutoLockEnabled")
    managed_by: Optional[ManagedByInfo] = Field(default=None, alias="managedBy")
    memory_reservation_locked_to_max: Optional[StrictBool] = Field(default=None, description="If set true, memory resource reservation for this virtual machine will always be equal to the virtual machine's memory size; increases in memory size will be rejected when a corresponding reservation increase is not possible.  This feature may only be enabled if it is currently possible to reserve all of the virtual machine's memory.  Reconfigure privilege: VirtualMachine.Config.Resource  ***Since:*** vSphere API 5.0 ", alias="memoryReservationLockedToMax")
    nested_hv_enabled: Optional[StrictBool] = Field(default=None, description="Specifies that this VM will use nested hardware-assisted virtualization.  When creating a new VM: \\- If vim.vm.FlagInfo.vbsEnabled is set to <code>true</code>, and this flag is set to <code>false</code> error is returned. \\- If this flag is unset and vim.vm.FlagInfo.vbsEnabled is set to <code>true</code>, the value of this flag is set to <code>true</code>.  Reconfigure privilege: VirtualMachine.Config.Settings  ***Since:*** vSphere API 5.1 ", alias="nestedHVEnabled")
    v_pmc_enabled: Optional[StrictBool] = Field(default=None, description="Specifies that this VM will have virtual CPU performance counters enabled.  Reconfigure privilege: VirtualMachine.Config.Settings  ***Since:*** vSphere API 5.1 ", alias="vPMCEnabled")
    scheduled_hardware_upgrade_info: Optional[ScheduledHardwareUpgradeInfo] = Field(default=None, alias="scheduledHardwareUpgradeInfo")
    vm_profile: Optional[List[VirtualMachineProfileSpec]] = Field(default=None, description="Virtual Machine Profile requirement.  Profiles are solution specific. Profile Based Storage Management is a vSphere server extension. API users who want to provision VMs using Storage Profiles, need to interact with it. This is an optional parameter and if user doesn't specify profile, the default behavior will apply.  ***Since:*** vSphere API 5.5 ", alias="vmProfile")
    message_bus_tunnel_enabled: Optional[StrictBool] = Field(default=None, description="Whether to allow tunneling of clients from the guest VM into the common message bus on the host network.  ***Since:*** vSphere API 6.0 ", alias="messageBusTunnelEnabled")
    crypto: Optional[CryptoSpec] = None
    migrate_encryption: Optional[StrictStr] = Field(default=None, description="An enum describing whether encrypted vMotion is required for this VM.  Supported values are listed in *VirtualMachineConfigSpecEncryptedVMotionModes_enum*. This defaults to opportunistic for a regular VM, and will be set to required for an encrypted VM.  ***Since:*** vSphere API 6.5 ", alias="migrateEncryption")
    sgx_info: Optional[VirtualMachineSgxInfo] = Field(default=None, alias="sgxInfo")
    ft_encryption_mode: Optional[StrictStr] = Field(default=None, description="An enum describing whether encrypted Fault Tolerance is required for this VM.  Supported values are listed in *VirtualMachineConfigSpecEncryptedFtModes_enum*. \\- This defaults to opportunistic for a regular VM, and will be set to required for an encrypted VM. \\- If this property is unset, the mode of encrypted Fault Tolerance will be set to opportunistic.  ***Since:*** vSphere API 7.0.2.0 ", alias="ftEncryptionMode")
    guest_monitoring_mode_info: Optional[VirtualMachineGuestMonitoringModeInfo] = Field(default=None, alias="guestMonitoringModeInfo")
    sev_enabled: Optional[StrictBool] = Field(default=None, description="SEV (Secure Encrypted Virtualization) enabled or not.  SEV is enabled when set to true, and disabled otherwise.  ***Since:*** vSphere API 7.0.1.0 ", alias="sevEnabled")
    virtual_numa: Optional[VirtualMachineVirtualNuma] = Field(default=None, alias="virtualNuma")
    motherboard_layout: Optional[StrictStr] = Field(default=None, description="One of motherboardLayout choices.  Default is i440bxHostBridge. See *VirtualHardware.motherboardLayout* ", alias="motherboardLayout")
    pmem_failover_enabled: Optional[StrictBool] = Field(default=None, description="Property to enable/disable PMem HA failover.  \\- When set to TRUE, VMs configured to use PMem will be failed over to other hosts by HA, but the data in NVDIMM is not persistent. \\- When set to FALSE, VMs configured to use PMem will not be failed over to other hosts by HA. Property is currently only applicable to VMs with NVDimms and will fail to set True if vPMem disks are present.  ***Since:*** vSphere API 7.0.2.0 ", alias="pmemFailoverEnabled")
    vmx_stats_collection_enabled: Optional[StrictBool] = Field(default=None, description="Property to enable/disable VMXStats Collection.  \\- Setting this property is only allowed when the VM is powered off and will fail otherwise. \\- When set to TRUE, VMs will be configured to create a scoreboard file to store certain stats for various VMX components. ", alias="vmxStatsCollectionEnabled")
    vm_op_notification_to_app_enabled: Optional[StrictBool] = Field(default=None, description="Property to enable/disable operation notification to applications.  \\- When set to TRUE, application running inside the VM will be notified of operations for which they have registered. \\- If unset defaults to FALSE, no notifications are sent to the application.  ***Since:*** vSphere API 7.0.3.0 ", alias="vmOpNotificationToAppEnabled")
    vm_op_notification_timeout: Optional[StrictInt] = Field(default=None, description="Operation notification timeout in seconds.  \\- Specifies the maximum time duration the applications may take to prepare for the operation after its been notified. This value is used only if *VirtualMachineConfigSpec.vmOpNotificationToAppEnabled* is set to TRUE. \\- Timeout has to be a non-zero positive value for applications to be able to register and get notifications. ", alias="vmOpNotificationTimeout")
    device_swap: Optional[VirtualMachineVirtualDeviceSwap] = Field(default=None, alias="deviceSwap")
    simultaneous_threads: Optional[StrictInt] = Field(default=None, description="Number of SMT (Simultaneous multithreading) threads.  \\- Set \"simultaneousThreads\" with a non-zero value to configure threads. \\- If unset, then use system defaults. ", alias="simultaneousThreads")
    pmem: Optional[VirtualMachineVirtualPMem] = None
    device_groups: Optional[VirtualMachineVirtualDeviceGroups] = Field(default=None, alias="deviceGroups")
    fixed_passthru_hot_plug_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether support to add and remove fixed passthrough devices when the VM is running should be enabled.  This property can only be set when the VM is powered off. If set, additional setup will be performed when the VM is powered on so that hot adding and removing fixed passthrough devices will be possible. NOTE: When setting this to true, the memory reservation should be equal to the guest memory size or the option to reserve all guest memory should be selected. If unset, the current value is left unchanged. ", alias="fixedPassthruHotPlugEnabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


