# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CheckTestTypeEnum(str, Enum):
    """
    The types of tests which can requested by any of the methods in either *VirtualMachineCompatibilityChecker* or *VirtualMachineProvisioningChecker*.  Possible values: - `sourceTests`: Tests that examine only the configuration   of the virtual machine and its current host; the destination   resource pool and host or cluster are irrelevant. - `hostTests`: Tests that examine both the virtual   machine and the destination host or cluster; the destination   resource pool is irrelevant.      This set excludes tests that fall   into the datastoreTests group. - `resourcePoolTests`: Tests that check that the destination resource   pool can support the virtual machine if it is powered on.      The   destination host or cluster is relevant because it will affect the   amount of overhead memory required to run the virtual machine. - `datastoreTests`: Tests that check that the   destination host or cluster can see the datastores where the virtual   machine's virtual disks are going to be located.      The destination   resource pool is irrelevant. - `networkTests`: Tests that check that the   destination host or cluster can see the networks that the virtual   machine's virtual nic devices are going to be connected.      ***Since:*** vSphere API 5.5  ***Since:*** vSphere API 4.0 
    """

    """
    allowed enum values
    """
    SOURCETESTS = 'sourceTests'
    HOSTTESTS = 'hostTests'
    RESOURCEPOOLTESTS = 'resourcePoolTests'
    DATASTORETESTS = 'datastoreTests'
    NETWORKTESTS = 'networkTests'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CheckTestTypeEnum from a JSON string"""
        return cls(json.loads(json_str))


