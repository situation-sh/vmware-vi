# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class VirtualDiskTypeEnum(str, Enum):
    """
    The types of virtual disks that can be created or cloned.  Possible values: - `preallocated`: A preallocated disk has all space allocated at creation time   and the space is zeroed on demand as the space is used. - `thin`: Space required for thin-provisioned virtual disk is allocated and   zeroed on demand as the space is used. - `seSparse`: A sparse (allocate on demand) format with additional space   optimizations.      ***Since:*** vSphere API 5.1 - `rdm`: Virtual compatibility mode raw disk mapping.      An rdm virtual disk   grants access to the entire raw disk and the virtual disk can   participate in snapshots. - `rdmp`: Physical compatibility mode (pass-through) raw disk mapping.      An rdmp   virtual disk passes SCSI commands directly to the hardware, but the   virtual disk cannot participate in snapshots. - `raw`: Raw device. - `delta`: A redo log disk.      This format is only applicable as a destination format   in a clone operation, and not usable for disk creation.      ***Since:*** vSphere API 5.5 - `sparse2Gb`: A sparse disk with 2GB maximum extent size.      Disks in this format   can be used with other VMware products. The 2GB extent size   makes these disks easier to burn to dvd or use on filesystems that   don't support large files. This format is only applicable as a   destination format in a clone operation, and not usable for disk   creation. - `thick2Gb`: A thick disk with 2GB maximum extent size.      Disks in this format   can be used with other VMware products. The 2GB extent size   makes these disks easier to burn to dvd or use on filesystems that   don't support large files. This format is only applicable as a   destination format in a clone operation, and not usable for disk   creation. - `eagerZeroedThick`: An eager zeroed thick disk has all space allocated and wiped clean   of any previous contents on the physical media at creation time.      Such disks may take longer time during creation compared to other   disk formats. - `sparseMonolithic`: A sparse monolithic disk.      Disks in this format can be used with other   VMware products. This format is only applicable as a destination   format in a clone operation, and not usable for disk creation.      ***Since:*** vSphere API 4.0 - `flatMonolithic`: A preallocated monolithic disk.      Disks in this format can be used with   other VMware products. This format is only applicable as a destination   format in a clone operation, and not usable for disk creation.      ***Since:*** vSphere API 4.0 - `thick`:       Deprecated as of vSphere API 4.x, use *eagerZeroedThick* instead   for clustering application, and *preallocated* for other applications.      A thick disk has all space allocated at creation time.      This   space may contain stale data on the physical media. Thick disks   are primarily used for virtual machine clustering, but they are   generally insecure and should not be used. Due to better performance   and security properties, the use of the 'preallocated' format is   preferred over this format.  ***Since:*** VI API 2.5 
    """

    """
    allowed enum values
    """
    PREALLOCATED = 'preallocated'
    THIN = 'thin'
    SESPARSE = 'seSparse'
    RDM = 'rdm'
    RDMP = 'rdmp'
    RAW = 'raw'
    DELTA = 'delta'
    SPARSE2GB = 'sparse2Gb'
    THICK2GB = 'thick2Gb'
    EAGERZEROEDTHICK = 'eagerZeroedThick'
    SPARSEMONOLITHIC = 'sparseMonolithic'
    FLATMONOLITHIC = 'flatMonolithic'
    THICK = 'thick'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualDiskTypeEnum from a JSON string"""
        return cls(json.loads(json_str))


