# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictFloat, StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VsanPolicyCost(DataObject):
    """
    PolicyCost -- Structure to describe the cost of satisfying a policy.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    change_data_size: Optional[StrictInt] = Field(default=None, description="Change (in bytes) of size of data stored on the datastore.  This is the max of reserved and used capacity.  ***Since:*** vSphere API 5.5 ", alias="changeDataSize")
    current_data_size: Optional[StrictInt] = Field(default=None, description="Size (in bytes) of data currently stored on the datastore.  This is the max of reserved and used capacity.  ***Since:*** vSphere API 5.5 ", alias="currentDataSize")
    temp_data_size: Optional[StrictInt] = Field(default=None, description="Size (in bytes) for temporary data that will be needed on disk if new policy is applied.  ***Since:*** vSphere API 5.5 ", alias="tempDataSize")
    copy_data_size: Optional[StrictInt] = Field(default=None, description="Size (in bytes) of data we need to write to VSAN Datastore if new policy is applied.  ***Since:*** vSphere API 5.5 ", alias="copyDataSize")
    change_flash_read_cache_size: Optional[StrictInt] = Field(default=None, description="Change (in bytes) of flash space reserved for read cache if new policy is applied.  ***Since:*** vSphere API 5.5 ", alias="changeFlashReadCacheSize")
    current_flash_read_cache_size: Optional[StrictInt] = Field(default=None, description="Size (in bytes) of flash space currently reserved for read cache.  ***Since:*** vSphere API 5.5 ", alias="currentFlashReadCacheSize")
    current_disk_space_to_address_space_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current ratio of physical disk space of an object to the logical VSAN address space.  For eg. an object of size 1GB with two copies of the data has two 1GB replicas and so this ratio is 2.  ***Since:*** vSphere API 6.0 ", alias="currentDiskSpaceToAddressSpaceRatio")
    disk_space_to_address_space_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio of physical disk space of an object to the logical VSAN address space after new policy is applied.  For eg. an object of size 1GB with two copies of the data has two 1GB replicas and so this ratio is 2.  ***Since:*** vSphere API 5.5 ", alias="diskSpaceToAddressSpaceRatio")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VsanPolicyCost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VsanPolicyCost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


