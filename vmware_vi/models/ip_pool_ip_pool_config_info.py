# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IpPoolIpPoolConfigInfo(DataObject):
    """
    Specifications of either IPv4 or IPv6 configuration to be used on this network.  This is a part of network configuration.  IPv4 addresses are in dot-decimal notation, e.g.: 192.0.2.235  IPv6 addresses are in colon-hexadecimal notation, e.g.: 2001:0db8:85a3::0370:7334  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    subnet_address: Optional[StrictStr] = Field(default=None, description="Address of the subnet.  For example: - IPv4: 192.168.5.0 - IPv6: 2001:0db8:85a3::    ***Since:*** vSphere API 4.0 ", alias="subnetAddress")
    netmask: Optional[StrictStr] = Field(default=None, description="Netmask  For example: - IPv4: 255.255.255.0 - IPv6: ffff:ffff:ffff::    ***Since:*** vSphere API 4.0 ")
    gateway: Optional[StrictStr] = Field(default=None, description="Gateway.  This can be an empty string - if no gateway is configured.  Examples: - IPv4: 192.168.5.1 - IPv6: 2001:0db8:85a3::1    ***Since:*** vSphere API 4.0 ")
    range: Optional[StrictStr] = Field(default=None, description="IP range.  This is specified as a set of ranges separated with commas. One range is given by a start address, a hash (#), and the length of the range.  For example: - 192.0.2.235 # 20 is the IPv4 range from 192.0.2.235 to 192.0.2.254 - 2001::7334 # 20 is the IPv6 range from 2001::7334 to 2001::7347    ***Since:*** vSphere API 4.0 ")
    dns: Optional[List[StrictStr]] = Field(default=None, description="DNS servers  For example: - IPv4: \\[\"10.20.0.1\", \"10.20.0.2\"\\] - IPv6: \\[\"2001:0db8:85a3::0370:7334\", \"2001:0db8:85a3::0370:7335\"\\]    If an empty list is passed, the existing value remains unchanged. To clear this list, pass an array containing the empty string as it's only element.  ***Since:*** vSphere API 4.0 ")
    dhcp_server_available: Optional[StrictBool] = Field(default=None, description="Whether a DHCP server is available on this network.  ***Since:*** vSphere API 4.0 ", alias="dhcpServerAvailable")
    ip_pool_enabled: Optional[StrictBool] = Field(default=None, description="IP addresses can only be allocated from the range if the IP pool is enabled.  ***Since:*** vSphere API 4.0 ", alias="ipPoolEnabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IpPoolIpPoolConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IpPoolIpPoolConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


