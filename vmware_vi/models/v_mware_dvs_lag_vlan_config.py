# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.numeric_range import NumericRange
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VMwareDvsLagVlanConfig(DataObject):
    """
    This class defines the vlan configuration of the Link Aggregation Control Protocol group.  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    vlan_id: Optional[List[NumericRange]] = Field(default=None, description="The VlanId range for the Uplink Ports in the Link Aggregation Control Protocol group.  The valid VlanId range is from 0 to 4094. Overlapping ranges are allowed. If set, this property will override the VLAN configuration of Uplink Ports in the Link Aggregation Control Protocol group. Thus they are no longer inheriting VLAN configuration from their Uplink Port Group. Setting this property would require *VMwareDVSPortgroupPolicy.vlanOverrideAllowed* of all the Uplink Port Groups to be true, otherwise ConflictingConfiguration fault will be raised.  ***Since:*** vSphere API 5.5 ", alias="vlanId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VMwareDvsLagVlanConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VMwareDvsLagVlanConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


