# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from vmware_vi.models.array_update_spec import ArrayUpdateSpec
from vmware_vi.models.cluster_drs_vm_config_info import ClusterDrsVmConfigInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterDrsVmConfigSpec(ArrayUpdateSpec):
    """
    Updates the per-virtual-machine DRS configuration.  To update the DRS configuration of a virtual machine, a copy of this object is included in the *ClusterConfigSpecEx* object passed to the method *ComputeResource.ReconfigureComputeResource_Task*.  If _reconfigureEx_ is used to incrementally update the cluster configuration (i.e., the parameter **modify** is true), then three operations are provided for updating the DRS configuration for a virtual machine. These operations are listed below (see *ArrayUpdateSpec* for more information on these operations). - add: add a configuration for the virtual machine, overwritting the existing   configuration if one exists - edit: incrmentally update the existing configuration; an existing configuration   must exist - remove: remove the existing configuration; an existing configuration must exist    If, instead, this method is used to overwrite the cluster configuration (i.e., the parameter **modify** is false) thereby creating a new configuration, only the add operation is allowed. In this case, _add_ creates a DRS configuration for a virtual machine in the new cluster configuration. 
    """ # noqa: E501
    info: Optional[ClusterDrsVmConfigInfo] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterDrsVmConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterDrsVmConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


