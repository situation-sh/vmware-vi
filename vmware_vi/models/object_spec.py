# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.selection_spec import SelectionSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ObjectSpec(DataObject):
    """
    Within a *PropertyFilterSpec*, the *ObjectSpec* data object type specifies the managed object at which the filter begins to collect the managed object references and properties specified by the associated *PropertySpec* set.  If the \"skip\" property is present and set to true, then the filter does not check to see if the starting object's type matches any of the types listed in the associated sets of *PropertySpec* data objects.  If the *ObjectSpec.selectSet* property is present, then this specifies additional objects to filter. These objects are defined by one or more *SelectionSpec* objects. 
    """ # noqa: E501
    obj: ManagedObjectReference
    skip: Optional[StrictBool] = Field(default=None, description="Flag to specify whether or not to report this managed object's properties.  If the flag is true, the filter will not report this managed object's properties. ")
    select_set: Optional[List[SelectionSpec]] = Field(default=None, description="Set of selections to specify additional objects to filter. ", alias="selectSet")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ObjectSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ObjectSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


