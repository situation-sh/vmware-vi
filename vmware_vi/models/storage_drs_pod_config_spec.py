# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.cluster_rule_spec import ClusterRuleSpec
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.storage_drs_automation_config import StorageDrsAutomationConfig
from vmware_vi.models.storage_drs_io_load_balance_config import StorageDrsIoLoadBalanceConfig
from vmware_vi.models.storage_drs_option_spec import StorageDrsOptionSpec
from vmware_vi.models.storage_drs_space_load_balance_config import StorageDrsSpaceLoadBalanceConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StorageDrsPodConfigSpec(DataObject):
    """
    The *StorageDrsPodConfigSpec* data object provides a set of update specifications for pod-wide storage DRS configuration.  To support incremental changes, these properties are all optional.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Flag indicating whether or not storage DRS is enabled.  ***Since:*** vSphere API 5.0 ")
    io_load_balance_enabled: Optional[StrictBool] = Field(default=None, description="Flag indicating whether or not storage DRS takes into account storage I/O workload when making load balancing and initial placement recommendations.  ***Since:*** vSphere API 5.0 ", alias="ioLoadBalanceEnabled")
    default_vm_behavior: Optional[StrictStr] = Field(default=None, description="Specifies the pod-wide default storage DRS behavior for virtual machines.  For currently supported storage DRS behavior, see *StorageDrsPodConfigInfoBehavior_enum*. You can override the default behavior for a virtual machine by using the *StorageDrsVmConfigInfo* object.  ***Since:*** vSphere API 5.0 ", alias="defaultVmBehavior")
    load_balance_interval: Optional[StrictInt] = Field(default=None, description="Specify the interval that storage DRS runs to load balance among datastores within a storage pod.  ***Since:*** vSphere API 5.0 ", alias="loadBalanceInterval")
    default_intra_vm_affinity: Optional[StrictBool] = Field(default=None, description="Specifies whether or not each virtual machine in this pod should have its virtual disks on the same datastore by default.  ***Since:*** vSphere API 5.0 ", alias="defaultIntraVmAffinity")
    space_load_balance_config: Optional[StorageDrsSpaceLoadBalanceConfig] = Field(default=None, alias="spaceLoadBalanceConfig")
    io_load_balance_config: Optional[StorageDrsIoLoadBalanceConfig] = Field(default=None, alias="ioLoadBalanceConfig")
    automation_overrides: Optional[StorageDrsAutomationConfig] = Field(default=None, alias="automationOverrides")
    rule: Optional[List[ClusterRuleSpec]] = Field(default=None, description="Changes to the set of rules.  ***Since:*** vSphere API 5.0 ")
    option: Optional[List[StorageDrsOptionSpec]] = Field(default=None, description="Changes to advance settings.  ***Since:*** vSphere API 5.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StorageDrsPodConfigSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StorageDrsPodConfigSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


