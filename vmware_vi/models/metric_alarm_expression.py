# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.alarm_expression import AlarmExpression
from vmware_vi.models.metric_alarm_operator_enum import MetricAlarmOperatorEnum
from vmware_vi.models.perf_metric_id import PerfMetricId
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MetricAlarmExpression(AlarmExpression):
    """
    An alarm expression that uses a metric as the condition that triggers an alarm.  Base type.  There are two alarm operands: yellow and red. At least one of them must be set. The value of the alarm expression is determined as follows: - If the host is not connected, the host metric expression is gray. - If the vm is not connected, the vm metric expression is gray. - If red is set but yellow is not, the expression is red when   the metric is over (isAbove operator) or under (isBelow operator)   the red value. Otherwise, the expression is green. - If yellow is set but red is not, the expression is yellow when   the metric is over (isAbove) or under (isBelow)   the yellow value. Otherwise, the expression is green. - If both yellow and red are set, the value of the expression is red   when the metric is over (isAbove) or under (isBelow) the red value.   Otherwise, the expression is yellow when the metric is over (isAbove)   or under (isBelow) the yellow value. Otherwise, the expression is green. 
    """ # noqa: E501
    operator: MetricAlarmOperatorEnum
    type: StrictStr = Field(description="Name of the object type containing the property. ")
    metric: PerfMetricId
    yellow: Optional[StrictInt] = Field(default=None, description="Whether or not to test for a yellow condition.  If not set, do not calculate yellow status. If set, it contains the threshold value that triggers yellow status. ")
    yellow_interval: Optional[StrictInt] = Field(default=None, description="Time interval in seconds for which the yellow condition must be true before the yellow status is triggered.  If unset, the yellow status is triggered immediately when the yellow condition becomes true.  ***Since:*** vSphere API 4.0 ", alias="yellowInterval")
    red: Optional[StrictInt] = Field(default=None, description="Whether or not to test for a red condition.  If not set, do not calculate red status. If set, it contains the threshold value that triggers red status. ")
    red_interval: Optional[StrictInt] = Field(default=None, description="Time interval in seconds for which the red condition must be true before the red status is triggered.  If unset, the red status is triggered immediately when the red condition becomes true.  ***Since:*** vSphere API 4.0 ", alias="redInterval")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MetricAlarmExpression from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MetricAlarmExpression from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


