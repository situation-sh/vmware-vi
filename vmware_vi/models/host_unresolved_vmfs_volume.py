# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_unresolved_vmfs_extent import HostUnresolvedVmfsExtent
from vmware_vi.models.host_unresolved_vmfs_volume_resolve_status import HostUnresolvedVmfsVolumeResolveStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostUnresolvedVmfsVolume(DataObject):
    """
    Information about detected unbound, unresolved VMFS volume.  An unresolved VMFS volume is reported when one or more device partitions of volume are detected to have copies of extents of the volume. Such copies can be created via replication or snapshots.  UnresolvedVmfsVolume are not mounted on the host where they are detected. User may choose to resignature the volume in which case a new Uuid is assigned to the volume and contents of the VMFS volume is kept intact.  User may choose to keep the original Uuid and mount the VMFS volume as it is on the given host. In this case, user has chosen to mount the copy of the VMFS volume on that host with no change to the original Uuid. This may fail with VmfsVolumeAlreadyMounted exception if there is an existing VMFS volume with the same Uuid mounted somewhere in the same datacenter.  Simple diagram representing the possible operations on UnresolvedVmfsVolume        ---------------------------------------------------------------------------       |                resignature                 forceMount                   |       |  VmfsVolume <---------------  Unresolved ------------>  VmfsVolume with |       | forceMountedInfo              Vmfs Volume              forceMountedInfo |       |  not set                                                  will be set   |       ---------------------------------------------------------------------------  See also *HostStorageSystem*.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    extent: List[HostUnresolvedVmfsExtent] = Field(description="List of detected copies of VMFS extents.  ***Since:*** vSphere API 4.0 ")
    vmfs_label: StrictStr = Field(description="The detected VMFS label name  ***Since:*** vSphere API 4.0 ", alias="vmfsLabel")
    vmfs_uuid: StrictStr = Field(description="The detected VMFS UUID  ***Since:*** vSphere API 4.0 ", alias="vmfsUuid")
    total_blocks: StrictInt = Field(description="Total number of blocks in this volume.  ***Since:*** vSphere API 4.0 ", alias="totalBlocks")
    resolve_status: HostUnresolvedVmfsVolumeResolveStatus = Field(alias="resolveStatus")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostUnresolvedVmfsVolume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostUnresolvedVmfsVolume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


