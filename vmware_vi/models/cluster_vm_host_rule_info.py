# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.cluster_rule_info import ClusterRuleInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterVmHostRuleInfo(ClusterRuleInfo):
    """
    A *ClusterVmHostRuleInfo* object identifies virtual machines and host groups that determine virtual machine placement. The virtual machines and hosts referenced by a VM-Host rule must be in the same cluster.  A VM-Host rule identifies the following groups. - A virtual machine group (*ClusterVmGroup*). - Two host groups - an affine host group and an anti-affine host group   (*ClusterHostGroup*).   At least one of the groups must contain one or more hosts.    *ClusterVmHostRuleInfo* stores only the names of the relevant virtual machine and host groups. The group contents are stored in the virtual machine and host group objects.  When you modify a VM-Host rule, only the fields that are specified are set.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    vm_group_name: Optional[StrictStr] = Field(default=None, description="Virtual group name (*ClusterVmGroup*.*ClusterGroupInfo.name*).  The virtual group may contain one or more virtual machines.  ***Since:*** vSphere API 4.1 ", alias="vmGroupName")
    affine_host_group_name: Optional[StrictStr] = Field(default=None, description="Name of the affine host group (*ClusterHostGroup*.*ClusterGroupInfo.name*).  The affine host group identifies hosts on which *ClusterVmHostRuleInfo.vmGroupName* virtual machines can be powered-on. The value of the *ClusterRuleInfo.mandatory* property determines how the Server interprets the rule.  ***Since:*** vSphere API 4.1 ", alias="affineHostGroupName")
    anti_affine_host_group_name: Optional[StrictStr] = Field(default=None, description="Name of the anti-affine host group (*ClusterHostGroup*.*ClusterGroupInfo.name*).  The anti-affine host group identifies hosts on which *ClusterVmHostRuleInfo.vmGroupName* virtual machines should not be powered-on. The value of the *ClusterRuleInfo.mandatory* property determines how the Server interprets the rule.  ***Since:*** vSphere API 4.1 ", alias="antiAffineHostGroupName")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterVmHostRuleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterVmHostRuleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


