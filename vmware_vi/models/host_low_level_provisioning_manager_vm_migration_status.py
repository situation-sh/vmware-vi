# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostLowLevelProvisioningManagerVmMigrationStatus(DataObject):
    """
    The status of a virtual machine migration operation.  ***Since:*** vSphere API 5.1 
    """ # noqa: E501
    migration_id: StrictInt = Field(description="Unique identifier for this operation, currently it's unique within one virtual center instance.  ***Since:*** vSphere API 5.1 ", alias="migrationId")
    type: StrictStr = Field(description="Manner in which the migration process is performed.  The set of possible values is described in *HostVMotionManagerVMotionType_enum*.  ***Since:*** vSphere API 5.1 ")
    source: StrictBool = Field(description="Whether the virtual machine is the source of the migration.  For disk only migration, the value is always true.  ***Since:*** vSphere API 5.1 ")
    considered_successful: StrictBool = Field(description="Whether the operation is considered successful.  A migration operation is considered successful if its switch over phase has completed successfully.  More specifically, for an in-progress migration, it is considered successful if it has had a sucessful switch over, otherwise it is considered unsuccessful. Likewise, the status of a completed migration operation is also based on the switch over completion status.  The difference between a completed vs. in-progress migration with the same consideredSuccessful property is that in the former case the server is able to complete the clean up process thus leaves nothing for the recovery process to clean up.  ***Since:*** vSphere API 5.1 ", alias="consideredSuccessful")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostLowLevelProvisioningManagerVmMigrationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostLowLevelProvisioningManagerVmMigrationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


