# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.distributed_virtual_switch_keyed_opaque_blob import DistributedVirtualSwitchKeyedOpaqueBlob
from vmware_vi.models.dv_port_setting import DVPortSetting
from vmware_vi.models.dv_portgroup_policy import DVPortgroupPolicy
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DVPortgroupConfigInfo(DataObject):
    """
    The *DVPortgroupConfigInfo* data object defines the configuration of a *DistributedVirtualPortgroup*.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    key: StrictStr = Field(description="Key of the portgroup.  ***Since:*** vSphere API 4.0 ")
    name: StrictStr = Field(description="Name of the portgroup.  ***Since:*** vSphere API 4.0 ")
    num_ports: StrictInt = Field(description="Number of ports in the portgroup.  ***Since:*** vSphere API 4.0 ", alias="numPorts")
    distributed_virtual_switch: Optional[ManagedObjectReference] = Field(default=None, alias="distributedVirtualSwitch")
    default_port_config: Optional[DVPortSetting] = Field(default=None, alias="defaultPortConfig")
    description: Optional[StrictStr] = Field(default=None, description="Description of the portgroup.  ***Since:*** vSphere API 4.0 ")
    type: StrictStr = Field(description="Type of portgroup.  See *DistributedVirtualPortgroup*.*DistributedVirtualPortgroupPortgroupType_enum* for possible values.  ***Since:*** vSphere API 4.0 ")
    backing_type: Optional[StrictStr] = Field(default=None, description="Backing type of portgroup.  See *DistributedVirtualPortgroup*.*DistributedVirtualPortgroupBackingType_enum* for possible values. The default value is \"standard\"  ***Since:*** vSphere API 7.0 ", alias="backingType")
    policy: DVPortgroupPolicy
    port_name_format: Optional[StrictStr] = Field(default=None, description="If set, a name will be automatically generated based on this format string for a port when it is created in or moved into the portgroup.  The format string can contain meta tags that will be resolved to the corresponding values in generating a name, if applicable for the port at the time of name generation.  To insert a meta tag in the format string, enclose the names defined as meta tag names inside angle brackets. See *DistributedVirtualPortgroupMetaTagName_enum* for a list of currently available meta tags. For example, \"redNetwork-&lt;portIndex&gt;\" and \"&lt;dvsName&gt;-pnic&lt;portIndex&gt;\" result in generated port names like \"redNetwork-2\" and \"switch-pnic3\".  If a meta tag is recognized, but there is no applicable value, the tag will be expanded to empty string. If an arbitrary name appears inside a \"&lt;&gt;\" pair and is not recognized as one of the defined meta tags, the substring is treated as-is and appear unchanged in the generated name.  To prevent a meta tag from being expanded, prefix the meta tag with a '\\\\' (backslash). For example, the format string \"abc\\\\&lt;portIndex&gt;def\" results in the generated port name \"abc&lt;portIndex&gt;def\".  ***Since:*** vSphere API 4.0 ", alias="portNameFormat")
    scope: Optional[List[ManagedObjectReference]] = Field(default=None, description="Deprecated as of vSphere API 5.5.  Eligible entities that can connect to the portgroup.  If unset, there is no restriction on which entity can connect to the portgroup. If set, only the entities in the specified list or their child entities are allowed to connect to the portgroup. If scopes are defined at both port and portgroup level, they are taken as an \"AND\" relationship. If such a relationship doesn't make sense, the reconfigure operation will raise an exception.  ***Since:*** vSphere API 4.0  Refers instances of *ManagedEntity*. ")
    vendor_specific_config: Optional[List[DistributedVirtualSwitchKeyedOpaqueBlob]] = Field(default=None, description="Opaque binary blob that stores vendor specific configuration.  ***Since:*** vSphere API 4.0 ", alias="vendorSpecificConfig")
    config_version: Optional[StrictStr] = Field(default=None, description="Configuration version number.  ***Since:*** vSphere API 4.0 ", alias="configVersion")
    auto_expand: Optional[StrictBool] = Field(default=None, description="If set to true, this property ignores the limit on the number of ports in the portgroup.  When a Virtual Machine/Host tries to connect to the portgroup and there are no free ports available in the portgroup, new ports will be automatically added to the portgroup. The flag is currently supported only for static portgroups.  When this property is set to true, the portgroup becomes a potential candidate for auto-shrink. Once the portgroup has auto-expanded then its disconnected ports are likely to be deleted automatically, as a part of auto-shrink step, if there are more than certain number of free ports. If the portgroup never auto-expanded, then it will never lose any free ports.  ***Since:*** vSphere API 5.0 ", alias="autoExpand")
    vm_vnic_network_resource_pool_key: Optional[StrictStr] = Field(default=None, description="The key of virtual NIC network resource pool to be associated with a portgroup.  The default value for this property is unset, indicating that this portgroup is not associated with any virtual NIC network resource pool. To clear the value of this property and revert to unset, set the *DVPortgroupConfigSpec.vmVnicNetworkResourcePoolKey* to \"-1\" in an update operation.  ***Since:*** vSphere API 6.0 ", alias="vmVnicNetworkResourcePoolKey")
    uplink: Optional[StrictBool] = Field(default=None, description="Indicates whether the portgroup is an uplink portroup.  ***Since:*** vSphere API 6.5 ")
    transport_zone_uuid: Optional[StrictStr] = Field(default=None, description="The UUID of transport zone to be associated with a NSX portgroup.  ***Since:*** vSphere API 7.0 ", alias="transportZoneUuid")
    transport_zone_name: Optional[StrictStr] = Field(default=None, description="The name of transport zone to be associated with a NSX portgroup.  ***Since:*** vSphere API 7.0 ", alias="transportZoneName")
    logical_switch_uuid: Optional[StrictStr] = Field(default=None, description="The logical switch UUID, which is used by NSX portgroup  ***Since:*** vSphere API 7.0 ", alias="logicalSwitchUuid")
    segment_id: Optional[StrictStr] = Field(default=None, description="The segment ID of logical switch  ***Since:*** vSphere API 7.0 ", alias="segmentId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DVPortgroupConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DVPortgroupConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


