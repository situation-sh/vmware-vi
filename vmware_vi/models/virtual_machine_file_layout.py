# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.virtual_machine_file_layout_disk_layout import VirtualMachineFileLayoutDiskLayout
from vmware_vi.models.virtual_machine_file_layout_snapshot_layout import VirtualMachineFileLayoutSnapshotLayout
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineFileLayout(DataObject):
    """
    Deprecated as of vSphere API 4.0, use *VirtualMachineFileLayoutEx* instead.  Describes the set of files that makes up a virtual machine on disk.  The file layout is broken into 4 major sections: - Configuration: Files stored in the configuration directory - Log: Files stored in the log directory - Disk: Files stored relative to a disk configuration file - Snapshot: Stored in the snapshot directory    Often the same directory is used for configuration, log, disk and snapshots. 
    """ # noqa: E501
    config_file: Optional[List[StrictStr]] = Field(default=None, description="A list of files that makes up the configuration of the virtual machine (excluding the .vmx file, since that file is represented in the FileInfo).  These are relative paths from the configuration directory. A slash is always used as a separator. This list will typically include the NVRAM file, but could also include other meta-data files. ", alias="configFile")
    log_file: Optional[List[StrictStr]] = Field(default=None, description="A list of files stored in the virtual machine's log directory.  These are relative paths from the logDirectory. A slash is always used as a separator. ", alias="logFile")
    disk: Optional[List[VirtualMachineFileLayoutDiskLayout]] = Field(default=None, description="Files making up each virtual disk. ")
    snapshot: Optional[List[VirtualMachineFileLayoutSnapshotLayout]] = Field(default=None, description="Files of each snapshot. ")
    swap_file: Optional[StrictStr] = Field(default=None, description="The swapfile specific to this virtual machine, if any.  This is a complete datastore path, not a relative path. ", alias="swapFile")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineFileLayout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineFileLayout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


