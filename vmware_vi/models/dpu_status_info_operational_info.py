# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.element_description import ElementDescription
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DpuStatusInfoOperationalInfo(DataObject):
    """
    Sensor information provided by DPU that provides health status. 
    """ # noqa: E501
    sensor_id: StrictStr = Field(description="This string uniquely identifies a sensor in the DPU. ", alias="sensorId")
    health_state: Optional[ElementDescription] = Field(default=None, alias="healthState")
    reading: StrictStr = Field(description="A description of the state of the sensor such as: N watts, Y RPM, or other measurement. ")
    units: Optional[StrictStr] = Field(default=None, description="If provided by underying API, the base units in which the sensor reading is specified, \"RPM\", \"WATTS\" and so forth. ")
    time_stamp: Optional[datetime] = Field(default=None, description="Reports the ISO 8601 Timestamp when this sensor was last updated by management controller if the this sensor is capable of tracking when it was last updated.  Property timeStampRaw, which comes from vendor firmware is convertible to DateTime, it will be provided. ", alias="timeStamp")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DpuStatusInfoOperationalInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DpuStatusInfoOperationalInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


