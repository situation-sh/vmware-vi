# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt
from pydantic import Field
from vmware_vi.models.virtual_device import VirtualDevice
from vmware_vi.models.virtual_machine_vmci_device_filter_info import VirtualMachineVMCIDeviceFilterInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineVMCIDevice(VirtualDevice):
    """
    The *VirtualMachineVMCIDevice* data object represents a virtual communication device that supports the VMCI (Virtual Machine Communication Interface).  Each virtual machine has a VMCI device that handles interprocess socket-based communication. VMCI device information is available in the virtual machine hardware device list (*VirtualMachine*.*VirtualMachine.config*.*VirtualMachineConfigInfo.hardware*.*VirtualHardware.device*\\[\\]).  An application running on a virtual machine uses the VMCI Sockets API for communication with other virtual machines on the same host (communication between virtual machines is not supported on vSphere 5.1 and later platforms as described for VirtualVMCIDevice.*VirtualMachineVMCIDevice.allowUnrestrictedCommunication*), or for communication with the host. For information about using the vSphere VMCI Sockets API, see the _VMCI Sockets Programming Guide_.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for VMCI socket access to this virtual machine.  Use this value to identify this virtual machine in calls to the VMCI Sockets API. Applications running on other virtual machines on this host will use this value to connect to this virtual machine. You can cast this value to a 32-bit unsigned integer.  The vSphere Server sets this value when a virtual machine powers on. The Server may change this value after power operations such as vMotion or restoring a virtual machine from a snapshot. If you have saved a VMCI device identifier, check to see if the value is still valid after power operations.  ***Since:*** vSphere API 4.0 ")
    allow_unrestricted_communication: Optional[StrictBool] = Field(default=None, description="Deprecated as of vSphere API 5.1. On vSphere 5.1 and later platforms, the VMCI device does not support communication with other virtual machines. Therefore, this property has no effect on these platforms.  Determines the extent of VMCI communication with this virtual machine.  Set this property to true to allow VMCI communication with all virtual machines on the host and with trusted services. Set this property to false to allow VMCI communication only with trusted services such as the hypervisor on the host.  If unset, communication is restricted to trusted services only.  ***Since:*** vSphere API 4.0 ", alias="allowUnrestrictedCommunication")
    filter_enable: Optional[StrictBool] = Field(default=None, description="Determines if filtering of VMCI communication is enabled for this virtual machine.  Set this property to enable or disable filter rules as specified in *VirtualMachineVMCIDevice.filterInfo*.  ***Since:*** vSphere API 6.0 ", alias="filterEnable")
    filter_info: Optional[VirtualMachineVMCIDeviceFilterInfo] = Field(default=None, alias="filterInfo")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineVMCIDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineVMCIDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


