# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.cluster_das_fdm_host_state import ClusterDasFdmHostState
from vmware_vi.models.crypto_key_id import CryptoKeyId
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.health_system_runtime import HealthSystemRuntime
from vmware_vi.models.host_runtime_info_network_runtime_info import HostRuntimeInfoNetworkRuntimeInfo
from vmware_vi.models.host_runtime_info_state_encryption_info import HostRuntimeInfoStateEncryptionInfo
from vmware_vi.models.host_system_connection_state_enum import HostSystemConnectionStateEnum
from vmware_vi.models.host_system_power_state_enum import HostSystemPowerStateEnum
from vmware_vi.models.host_tpm_digest_info import HostTpmDigestInfo
from vmware_vi.models.host_v_flash_manager_v_flash_resource_run_time_info import HostVFlashManagerVFlashResourceRunTimeInfo
from vmware_vi.models.vsan_host_runtime_info import VsanHostRuntimeInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostRuntimeInfo(DataObject):
    """
    This data object type describes the runtime state of a host. 
    """ # noqa: E501
    connection_state: HostSystemConnectionStateEnum = Field(alias="connectionState")
    power_state: HostSystemPowerStateEnum = Field(alias="powerState")
    standby_mode: Optional[StrictStr] = Field(default=None, description="The host's standby mode.  For valid values see *HostStandbyMode_enum*. The property is only populated by vCenter server. If queried directly from a ESX host, the property is is unset.  ***Since:*** vSphere API 4.1 ", alias="standbyMode")
    in_maintenance_mode: StrictBool = Field(description="The flag to indicate whether or not the host is in maintenance mode.  This flag is set when the host has entered the maintenance mode. It is not set during the entering phase of maintenance mode.  See also *HostSystem.EnterMaintenanceMode_Task*, *HostSystem.ExitMaintenanceMode_Task*. ", alias="inMaintenanceMode")
    in_quarantine_mode: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether or not the host is in quarantine mode.  InfraUpdateHa will recommend to set this flag based on the HealthUpdates received by the HealthUpdateProviders configured for the cluster. A host that is reported as degraded will be recommended to enter quarantine mode, while a host that is reported as healthy will be recommended to exit quarantine mode. Execution of these recommended actions will set this flag. Hosts in quarantine mode will be avoided by vSphere DRS as long as the increased consolidation in the cluster does not negatively affect VM performance.  See also *HealthUpdateManager*, *ClusterInfraUpdateHaConfigInfo*, *ClusterHostInfraUpdateHaModeAction*.  ***Since:*** vSphere API 6.5 ", alias="inQuarantineMode")
    boot_time: Optional[datetime] = Field(default=None, description="The time when the host was booted. ", alias="bootTime")
    health_system_runtime: Optional[HealthSystemRuntime] = Field(default=None, alias="healthSystemRuntime")
    das_host_state: Optional[ClusterDasFdmHostState] = Field(default=None, alias="dasHostState")
    tpm_pcr_values: Optional[List[HostTpmDigestInfo]] = Field(default=None, description="Deprecated as of @released(\"5.1\") this information should be considered to be neither complete nor reliable.  The array of PCR digest values stored in the TPM device since the last host boot time.  ***Since:*** vSphere API 4.0 ", alias="tpmPcrValues")
    vsan_runtime_info: Optional[VsanHostRuntimeInfo] = Field(default=None, alias="vsanRuntimeInfo")
    network_runtime_info: Optional[HostRuntimeInfoNetworkRuntimeInfo] = Field(default=None, alias="networkRuntimeInfo")
    v_flash_resource_runtime_info: Optional[HostVFlashManagerVFlashResourceRunTimeInfo] = Field(default=None, alias="vFlashResourceRuntimeInfo")
    host_max_virtual_disk_capacity: Optional[StrictInt] = Field(default=None, description="The maximum theoretical virtual disk capacity supported by this host  ***Since:*** vSphere API 5.5 ", alias="hostMaxVirtualDiskCapacity")
    crypto_state: Optional[StrictStr] = Field(default=None, description="Encryption state of the host.  Valid values are enumerated by the *CryptoState* type.  ***Since:*** vSphere API 6.5 ", alias="cryptoState")
    crypto_key_id: Optional[CryptoKeyId] = Field(default=None, alias="cryptoKeyId")
    stateless_nvds_migration_ready: Optional[StrictStr] = Field(default=None, description="Indicating the host is ready for NVDS to VDS migration.  See *HostRuntimeInfoStatelessNvdsMigrationState_enum* for supported values.  ***Since:*** vSphere API 7.0.2.0 ", alias="statelessNvdsMigrationReady")
    state_encryption: Optional[HostRuntimeInfoStateEncryptionInfo] = Field(default=None, alias="stateEncryption")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostRuntimeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostRuntimeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


