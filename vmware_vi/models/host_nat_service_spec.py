# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_nat_service_name_service_spec import HostNatServiceNameServiceSpec
from vmware_vi.models.host_nat_service_port_forward_spec import HostNatServicePortForwardSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostNatServiceSpec(DataObject):
    """
    This data object type provides the details about the Network Address Translation (NAT) service.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    virtual_switch: StrictStr = Field(description="The name of the virtual switch to which nat service is connected.  ***Since:*** VI API 2.5 ", alias="virtualSwitch")
    active_ftp: StrictBool = Field(description="The flag to indicate whether or not non-passive mode FTP connections should be allowed.  ***Since:*** VI API 2.5 ", alias="activeFtp")
    allow_any_oui: StrictBool = Field(description="The flag to indicate whether or not the NAT Service allows media access control traffic from any Organizational Unique Identifier (OUI)? By default, it does not allow traffic that originated from the host to avoid packet loops.  ***Since:*** VI API 2.5 ", alias="allowAnyOui")
    config_port: StrictBool = Field(description="The flag to indicate whether or not the NAT Service should open a configuration port.  ***Since:*** VI API 2.5 ", alias="configPort")
    ip_gateway_address: StrictStr = Field(description="The IP address that the NAT Service should use on the virtual network.  ***Since:*** VI API 2.5 ", alias="ipGatewayAddress")
    udp_timeout: StrictInt = Field(description="The time allotted for UDP packets.  ***Since:*** VI API 2.5 ", alias="udpTimeout")
    port_forward: Optional[List[HostNatServicePortForwardSpec]] = Field(default=None, description="The port forwarding specifications to allow network connections to be initiated from outside the firewall.  ***Since:*** VI API 2.5 ", alias="portForward")
    name_service: Optional[HostNatServiceNameServiceSpec] = Field(default=None, alias="nameService")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostNatServiceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostNatServiceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


