# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.dvs_vnic_allocated_resource import DvsVnicAllocatedResource
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DvsVmVnicNetworkResourcePoolRuntimeInfo(DataObject):
    """
    This class defines the runtime information for the virtual NIC network resource pool  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    key: StrictStr = Field(description="The key of the virtual NIC network resource pool  ***Since:*** vSphere API 6.0 ")
    name: Optional[StrictStr] = Field(default=None, description="The name of the virtual NIC network resource pool  ***Since:*** vSphere API 6.0 ")
    capacity: Optional[StrictInt] = Field(default=None, description="Capacity: Reservation allocated for this Network Resource Pool.  Units in Mbits/s.  ***Since:*** vSphere API 6.0 ")
    usage: Optional[StrictInt] = Field(default=None, description="usage: Reservation taken by all *VirtualEthernetCard* for which the backing is associdated with this *DVSVmVnicNetworkResourcePool*.  Units in Mbits/s.  ***Since:*** vSphere API 6.0 ")
    available: Optional[StrictInt] = Field(default=None, description="Available: Current available resource for reservation (capacity - usage).  Units in Mbits/s.  ***Since:*** vSphere API 6.0 ")
    status: StrictStr = Field(description="The status of the virtual NIC network resource pool See *ManagedEntityStatus_enum* for possible values  *red* indicates that the reservations used by all the virtual network adapters belonging to this resource pool exceeds the total reservation quota allocated to the resource pool. This can happen due to failure of one or more uplink or if the user bypasses VirtualCenter and powers on VMs directly on host. The reservation of one or more virtual network adapters cannot be guaranteed and corrective action needs to be taken by the user.  *green* indicates that the resource pool is in good state. The reservations for all virtual network adapters can be fulfilled.  ***Since:*** vSphere API 6.0 ")
    allocated_resource: Optional[List[DvsVnicAllocatedResource]] = Field(default=None, description="The virtual network adapaters that are currently associated with the resource pool  ***Since:*** vSphere API 6.0 ", alias="allocatedResource")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DvsVmVnicNetworkResourcePoolRuntimeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DvsVmVnicNetworkResourcePoolRuntimeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


