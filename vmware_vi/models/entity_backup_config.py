# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictBytes, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EntityBackupConfig(DataObject):
    """
    The *EntityBackupConfig* data object contains *VmwareDistributedVirtualSwitch* or *DistributedVirtualPortgroup* backup configuration data produced by the *DistributedVirtualSwitchManager.DVSManagerExportEntity_Task* method.  It also contains properties that support *DistributedVirtualSwitchManager.DVSManagerImportEntity_Task* operations.  A *DistributedVirtualSwitchManager.DVSManagerExportEntity_Task* operation sets properties that identify the entity instance (*EntityBackupConfig.entityType*, *EntityBackupConfig.key*, and *EntityBackupConfig.name*) and inventory location (*EntityBackupConfig.container*). When you import a backup configuration, you can set the <code>key</code>, <code>name</code>, and <code>container</code> properties in accordance with the <code>importType</code> specified in the call to *DistributedVirtualSwitchManager.DVSManagerImportEntity_Task*. See *EntityImportType_enum*.  ***Since:*** vSphere API 5.1 
    """ # noqa: E501
    entity_type: StrictStr = Field(description="Type of the exported entity (*DistributedVirtualSwitchManager.DVSManagerExportEntity_Task*).  See *EntityType_enum* for valid values.  ***Since:*** vSphere API 5.1 ", alias="entityType")
    config_blob: Union[StrictBytes, StrictStr] = Field(description="Opaque blob that contains the configuration of the entity.  ***Since:*** vSphere API 5.1 ", alias="configBlob")
    key: Optional[StrictStr] = Field(default=None, description="Unique identifier of the exported entity or the entity to be restored through an import operation. - If you are importing a virtual distributed switch and the import type is   *applyToEntitySpecified*,   set the <code>key</code> to   *DistributedVirtualSwitch*.*DistributedVirtualSwitch.uuid*. - If you are importing a virtual distributed portgroup and the import type is   *applyToEntitySpecified*,   set the <code>key</code> to   *DistributedVirtualPortgroup*.*DistributedVirtualPortgroup.key*.    The Server ignores the key value when the import operation creates a new entity.  ***Since:*** vSphere API 5.1 ")
    name: Optional[StrictStr] = Field(default=None, description="Name of the exported entity or the entity to be restored with the backup configuration.  If you are importing an entity and the import type is *applyToEntitySpecified*, the Server will use this value to rename the existing entity.  ***Since:*** vSphere API 5.1 ")
    container: Optional[ManagedObjectReference] = None
    config_version: Optional[StrictStr] = Field(default=None, description="Configuration version.  ***Since:*** vSphere API 5.1 ", alias="configVersion")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EntityBackupConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EntityBackupConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


