# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DatastoreSummary(DataObject):
    """
    Summary information about the datastore.  The status fields and managed object reference is not set when an object of this type is created. These fields and references are typically set later when these objects are associated with a host. 
    """ # noqa: E501
    datastore: Optional[ManagedObjectReference] = None
    name: StrictStr = Field(description="The name of the datastore. ")
    url: StrictStr = Field(description="The unique locator for the datastore.  This property is guaranteed to be valid only if *DatastoreSummary.accessible* is true. ")
    capacity: StrictInt = Field(description="Maximum capacity of this datastore, in bytes.  This value is updated periodically by the server. It can be explicitly refreshed with the Refresh operation. This property is guaranteed to be valid only if *DatastoreSummary.accessible* is true. ")
    free_space: StrictInt = Field(description="Available space of this datastore, in bytes.  The server periodically updates this value. It can be explicitly refreshed with the Refresh operation. This property is guaranteed to be valid only if *DatastoreSummary.accessible* is true. ", alias="freeSpace")
    uncommitted: Optional[StrictInt] = Field(default=None, description="Total additional storage space, in bytes, potentially used by all virtual machines on this datastore.  The server periodically updates this value. It can be explicitly refreshed with the *Datastore.RefreshDatastoreStorageInfo* operation. This property is valid only if *DatastoreSummary.accessible* is true.  ***Since:*** vSphere API 4.0 ")
    accessible: StrictBool = Field(description="The connectivity status of this datastore.  If this is set to false, meaning the datastore is not accessible, this datastore's capacity and freespace properties cannot be validated. Furthermore, if this property is set to false, some of the properties in this summary and in *DatastoreInfo* should not be used. Refer to the documentation for the property of your interest. For datastores accessed from multiple hosts, vCenter Server reports *DatastoreSummary.accessible* as an aggregated value of the properties reported in *HostMountInfo*. For instance, if a datastore is accessible through a subset of hosts, then the value of *DatastoreSummary.accessible* will be reported as true by vCenter Server. And the reason for a daastore being inaccessible from a host will be reported in *HostMountInfo.inaccessibleReason* ")
    multiple_host_access: Optional[StrictBool] = Field(default=None, description="More than one host in the datacenter has been configured with access to the datastore.  This is only provided by VirtualCenter. ", alias="multipleHostAccess")
    type: StrictStr = Field(description="Type of file system volume, such as VMFS or NFS.  See also *HostFileSystemVolume.type*. ")
    maintenance_mode: Optional[StrictStr] = Field(default=None, description="The current maintenance mode state of the datastore.  The set of possible values is described in *DatastoreSummaryMaintenanceModeState_enum*.  ***Since:*** vSphere API 5.0 ", alias="maintenanceMode")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DatastoreSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DatastoreSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


