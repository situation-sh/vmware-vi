# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union
from pydantic import StrictBytes, StrictStr
from pydantic import Field
from vmware_vi.models.host_nvme_transport_parameters import HostNvmeTransportParameters
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostNvmeOpaqueTransportParameters(HostNvmeTransportParameters):
    """
    This data object represents the raw transport specific parameters returned in a Discovery Log Page Entry, when they cannot be interpreted as one of the known common types of parameters.  For details, see: - \"NVM Express over Fabrics 1.0\", Section 5.3,   Discovery Log Page    ***Since:*** vSphere API 7.0 
    """ # noqa: E501
    trtype: StrictStr = Field(description="The transport type.  Corresponds to the TRTYPE field in the Discovery Log Page Entry as specified by the NVME over Fabrics spec. The set of possible values is desribed in *HostNvmeTransportType_enum*.  ***Since:*** vSphere API 7.0 ")
    traddr: StrictStr = Field(description="The transport address.  Corresponds to the TRADDR field in the Discovery Log Page Entry as specified by the NVME over Fabrics spec.  ***Since:*** vSphere API 7.0 ")
    adrfam: StrictStr = Field(description="Indicates the address family of the address specified above.  Corresponds to the ADRFAM field in the Discovery Log Page Entry as specified by the NVME over Fabrics spec. The set of supported values is described in *HostNvmeTransportParametersNvmeAddressFamily_enum*.  ***Since:*** vSphere API 7.0 ")
    trsvcid: StrictStr = Field(description="Transport service identifier.  Corresponds to the TRSVCID field in the Discovery Log Page Entry as specified by the NVME over Fabrics spec. Its interpretation varies depending on the transport type.  ***Since:*** vSphere API 7.0 ")
    tsas: Union[StrictBytes, StrictStr] = Field(description="Transport specific address subtype.  Corresponds to the TSAS field in the Discovery Log Page Entry as specified by the NVME over Fabrics spec. Its interpretation varies depending on the transport type.  ***Since:*** vSphere API 7.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostNvmeOpaqueTransportParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostNvmeOpaqueTransportParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


