# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostNetCapabilities(DataObject):
    """
    Capability vector indicating the available product features. 
    """ # noqa: E501
    can_set_physical_nic_link_speed: StrictBool = Field(description="The flag to indicate whether or not a physical network adapter's link speed and duplex settings can be changed through this API.  For a hosted product, the host uses its physical network adapters for network connectivity. Configuration of link speed is done through regular host operations. In ESX Server, the configuration can be changed through this API. ", alias="canSetPhysicalNicLinkSpeed")
    supports_nic_teaming: StrictBool = Field(description="The flag to indicate whether or not network adapter teaming is available.  Multiple network adapters can be bridged to a virtual switch through a BondBridge. Also, network adapter teaming policies such as failover order and detection are enabled. ", alias="supportsNicTeaming")
    nic_teaming_policy: Optional[List[StrictStr]] = Field(default=None, description="The available teaming policies if the platform supports network adapter teaming. ", alias="nicTeamingPolicy")
    supports_vlan: StrictBool = Field(description="The flag to indicate whether or not VLANs can be configured on PortGroups attached to VirtualSwitch objects.  This allows VLANs for virtual machines without requiring special VLAN capable hardware switches. ", alias="supportsVlan")
    uses_service_console_nic: StrictBool = Field(description="The flag to indicate whether or not a service console network adapter is used or required.  This means that the system software has two TCP/IP stacks. As a result, at least two types of VirtualNics may be created -- the normal VirtualNic and the service console VirtualNic. If this is not set, then only the VirtualNic type is supported. ", alias="usesServiceConsoleNic")
    supports_network_hints: StrictBool = Field(description="The flag to indicate whether or not the host is able to support the querying of network hints. ", alias="supportsNetworkHints")
    max_port_groups_per_vswitch: Optional[StrictInt] = Field(default=None, description="The maximum number of port groups supported per virtual switch.  This property will not be set if this value is unlimited.  ***Since:*** VI API 2.5 ", alias="maxPortGroupsPerVswitch")
    vswitch_config_supported: StrictBool = Field(description="The flag to indicate whether virtual switch configuration is supported.  This means that operations to add, remove, update virtual switches are supported.  ***Since:*** VI API 2.5 ", alias="vswitchConfigSupported")
    vnic_config_supported: StrictBool = Field(description="The flag to indicate whether Virtual NIC configuration is supported.  This means that operations to add, remove, update virtualNic are supported.  ***Since:*** VI API 2.5 ", alias="vnicConfigSupported")
    ip_route_config_supported: StrictBool = Field(description="The flag to indicate whether ip route configuration for the host is supported.  ***Since:*** VI API 2.5 ", alias="ipRouteConfigSupported")
    dns_config_supported: StrictBool = Field(description="The flag to indicate whether DNS configuration for the host is supported.  ***Since:*** VI API 2.5 ", alias="dnsConfigSupported")
    dhcp_on_vnic_supported: StrictBool = Field(description="This flag indicates whether or not the host is able to support dhcp configuration for vnics.  ***Since:*** VI API 2.5 ", alias="dhcpOnVnicSupported")
    ip_v6_supported: StrictBool = Field(description="The flag to indicate whether the host is capable of communicating using ipv6 protocol  ***Since:*** vSphere API 4.0 ", alias="ipV6Supported")
    backup_nfc_nioc_supported: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether the host supports Backup NFC NIOC system traffic, Unset means Backup NFC NIOC system traffic is not supported.  ***Since:*** vSphere API 7.0.1.0 ", alias="backupNfcNiocSupported")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostNetCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostNetCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


