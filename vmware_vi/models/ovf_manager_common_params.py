# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.key_value import KeyValue
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OvfManagerCommonParams(DataObject):
    """
    A common super-class for basic OVF descriptor parameters  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    locale: StrictStr = Field(description="The locale-identifier to choose from the descriptor.  If empty, the default locale on the server is used.  ***Since:*** vSphere API 4.0 ")
    deployment_option: StrictStr = Field(description="The key of the chosen deployment option.  If empty, the default option is chosen. The list of possible deployment options is returned in the result of parseDescriptor.  ***Since:*** vSphere API 4.0 ", alias="deploymentOption")
    msg_bundle: Optional[List[KeyValue]] = Field(default=None, description="An optional set of localization strings to be used.  The server will use these message strings to localize information in the result and in error and warning messages.  This argument allows a client to pass messages from external string bundles. The client is responsible for selecting the right string bundle (based on locale) and parsing the external string bundle. The passed in key/value pairs are looked up before any messages included in the OVF descriptor itself.  ***Since:*** vSphere API 4.0 ", alias="msgBundle")
    import_option: Optional[List[StrictStr]] = Field(default=None, description="An optional argument for modifing the OVF parsing.  When the server parses an OVF descriptor a set of options can be used to modify the parsing. The argument is a list of keywords.  To get a list of supported keywords see *OvfManager.ovfImportOption*. Unknown options will be ignored by the server.  ***Since:*** vSphere API 5.1 ", alias="importOption")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','OvfCreateImportSpecParams': 'OvfCreateImportSpecParams','OvfParseDescriptorParams': 'OvfParseDescriptorParams','OvfValidateHostParams': 'OvfValidateHostParams'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self]:
        """Create an instance of OvfManagerCommonParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self]:
        """Create an instance of OvfManagerCommonParams from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("OvfManagerCommonParams failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.ovf_create_import_spec_params import OvfCreateImportSpecParams
from vmware_vi.models.ovf_parse_descriptor_params import OvfParseDescriptorParams
from vmware_vi.models.ovf_validate_host_params import OvfValidateHostParams
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
# TODO: Rewrite to not use raise_errors
OvfManagerCommonParams.model_rebuild(raise_errors=False)

