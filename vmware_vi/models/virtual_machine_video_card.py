# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.virtual_device import VirtualDevice
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineVideoCard(VirtualDevice):
    """
    The VirtualVideoCard data object type represents a video card in a virtual machine. 
    """ # noqa: E501
    video_ram_size_in_kb: Optional[StrictInt] = Field(default=None, description="The size of the framebuffer for a virtual machine. ", alias="videoRamSizeInKB")
    num_displays: Optional[StrictInt] = Field(default=None, description="Indicates the number of supported monitors.  The number of displays X the maximum resolution of each display is bounded by the video RAM size of the virtual video card. This property can only be updated when the virtual machine is powered off.  ***Since:*** vSphere API 4.0 ", alias="numDisplays")
    use_auto_detect: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether the display settings of the host on which the virtual machine is running should be used to automatically determine the display settings of the virtual machine's video card.  This setting takes effect at virtual machine power-on time. If this value is set to TRUE, numDisplays will be ignored.  ***Since:*** vSphere API 4.0 ", alias="useAutoDetect")
    enable3_d_support: Optional[StrictBool] = Field(default=None, description="Flag to indicate whether the virtual video card supports 3D functions.  This property can only be updated when the virtual machine is powered off.  ***Since:*** vSphere API 4.0 ", alias="enable3DSupport")
    use3d_renderer: Optional[StrictStr] = Field(default=None, description="Indicate how the virtual video device renders 3D graphics.  The virtual video device can use hardware acceleration and software rendering. By default, VMware products determine whether or not to use hardware acceleration based on the availability of physical graphics devices. Certain workloads can benefit from explicitly specifying if hardware acceleration is required. For example, 3D intensive workloads may indicate to run on systems with graphics hardware.  There are three settings.  (automatic) - The virtual device chooses how to render 3D graphics (default). (software) - The virtual device will use software rendering and will not attempt to use hardware acceleration. (hardware) - The virtual device will use hardware acceleration and will not activate without it.  ***Since:*** vSphere API 5.1 ", alias="use3dRenderer")
    graphics_memory_size_in_kb: Optional[StrictInt] = Field(default=None, description="The size of graphics memory.  If 3d support is enabled this setting gives the amount of guest memory used for graphics resources. This property can only be updated when the virtual machine is powered off.  ***Since:*** vSphere API 6.0 ", alias="graphicsMemorySizeInKB")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineVideoCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineVideoCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


