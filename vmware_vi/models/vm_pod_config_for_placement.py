# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.cluster_rule_info import ClusterRuleInfo
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.pod_disk_locator import PodDiskLocator
from vmware_vi.models.storage_drs_vm_config_info import StorageDrsVmConfigInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VmPodConfigForPlacement(DataObject):
    """
    Initial VM configuration for the specified pod.  This configuration will be saved to the pod config *StorageDrsConfigInfo* when the placement recommendations are applied.  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    storage_pod: ManagedObjectReference = Field(alias="storagePod")
    disk: Optional[List[PodDiskLocator]] = Field(default=None, description="Array of PodDiskLocator objects.  ***Since:*** vSphere API 5.0 ")
    vm_config: Optional[StorageDrsVmConfigInfo] = Field(default=None, alias="vmConfig")
    inter_vm_rule: Optional[List[ClusterRuleInfo]] = Field(default=None, description="The initial interVmRules that should during placement of this virtual machine.  It may not always be possible to specify that the virtual machine being placed is part of the rule because the virtual machine may not have been created yet. So for simplicity, we assume the virtual machine being placed is always implicitly part of any rule specified. It will be explicitly added to the rule before it is saved to the pod config.  ***Since:*** vSphere API 5.0 ", alias="interVmRule")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VmPodConfigForPlacement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VmPodConfigForPlacement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


