# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_active_directory_spec import HostActiveDirectorySpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostActiveDirectory(DataObject):
    """
    The *HostActiveDirectory* data object contains Active Directory configuration information for an ESX host.  The vSphere API supports Microsoft Active Directory management of authentication for ESX hosts. To integrate an ESX host into an Active Directory environment, you use an Active Directory account that has the authority to add a computer to a domain. The ESX Server locates the Active Directory domain controller. When you use the host profile to configure authentication for an ESX host, you specify the configuration operation (add or remove). To add the host to a domain, specify the domain, and the authorized Active Directory account user name and password. You do not need to specify these parameters to remove the host from a domain because the host has the information it needs to perform the operation. When you call *HostProfileManager.ApplyHostConfig_Task* to apply the configuration, the ESX Server will call the appropriate method (*HostActiveDirectoryAuthentication.JoinDomain_Task* or *HostActiveDirectoryAuthentication.LeaveCurrentDomain_Task*) on your behalf.  Before you call the method to apply the host profile, check to see that the *HostAuthenticationManager*.*HostAuthenticationManager.supportedStore* array contains a *HostActiveDirectoryAuthentication* object. The presence of the Active Directory authentication object indicates that a host is capable of joining a domain. However, if you try to add a host to a domain when the *HostAuthenticationStoreInfo*.*HostAuthenticationStoreInfo.enabled* property is <code>True</code>, the join method will throw a fault.  As an alternative to using the host profile to configure Active Directory authentication for an ESX host, your vSphere client application can call the *HostActiveDirectoryAuthentication* join and leave methods directly to add the host to or remove the host from a domain.  To take advantage of ESX host membership in an Active Directory domain, grant permissions on the ESX host to users and groups in Active Directory who should have direct access to management of the ESX host. Use the *UserDirectory*.*UserDirectory.RetrieveUserGroups* method to obtain information about Active Directory users and groups. After retrieving the Active Directory data, you can use the *AuthorizationManager*.*AuthorizationManager.SetEntityPermissions* method to set the *Permission.principal* property to the appropriate user or group.  By default, the ESX host assigns the Administrator role to the \"ESX Admins\" group. If the group does not exist when the host joins the domain, the host will not assign the role. In this case, you must create the \"ESX Admins\" group in the Active Directory. The host will periodically check the domain controller for the group and will assign the role when the group exists.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    change_operation: StrictStr = Field(description="Configuration change operation to apply to the host.  You can specify the following values: - *add*:   Add the host to the domain. The ESX Server will use the   *HostActiveDirectorySpec* information   (domain, account user name and password) to call   *HostActiveDirectoryAuthentication.JoinDomain_Task* and optionally   configure smart card authentication by calling   *HostActiveDirectoryAuthentication.DisableSmartCardAuthentication*   and replacing the trust anchors with those provided. - *remove*:   Remove the host from its current domain.   The ESX Server will call   *HostActiveDirectoryAuthentication.LeaveCurrentDomain_Task*, specifying   <code>True</code> for the <code>force</code> parameter to delete   existing permissions.   *HostActiveDirectoryAuthentication.DisableSmartCardAuthentication*   is also called if smart card authentication is enabled and trust   anchors are removed.    See also *HostConfigChangeOperation_enum*.  ***Since:*** vSphere API 4.1 ", alias="changeOperation")
    spec: Optional[HostActiveDirectorySpec] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostActiveDirectory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostActiveDirectory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


