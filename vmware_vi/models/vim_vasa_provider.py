# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.vim_vasa_provider_virtual_host_config import VimVasaProviderVirtualHostConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VimVasaProvider(DataObject):
    """
    Data object representing VASA Provider.  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    uid: Optional[StrictStr] = Field(default=None, description="Provider UID.  This is populated with namespace prefixed to providerId, which uniquely identifies a VASA Provider. Both namespace and providerId are sourced from Vasa Provider and available within SMS. This field helps in preventing a regeneration of duplicate VASA Provider within vvold when a user attempts to register the same VP using different names or alternative urls.  ***Since:*** vSphere API 6.7 ")
    url: StrictStr = Field(description="VASA Provider URL.  In VirtualHost based MultiVC setup, this is set to default virtual host's URL.  ***Since:*** vSphere API 6.0 ")
    name: Optional[StrictStr] = Field(default=None, description="Name  ***Since:*** vSphere API 6.0 ")
    self_signed_certificate: Optional[StrictStr] = Field(default=None, description="Self-signed certificate of VASA provider.  In VirtualHost based MultiVC setup, this is set to default virtual host's self-signed certificate.  ***Since:*** vSphere API 6.0 ", alias="selfSignedCertificate")
    vhost_config: Optional[VimVasaProviderVirtualHostConfig] = Field(default=None, alias="vhostConfig")
    version_id: Optional[StrictInt] = Field(default=None, description="SMS supported VASA provider versionId.  i-e if versionX corresponds to VASA version supported by SMS, then X needs to be set here. versionX corresponds to SMS supported VASA versions are, 1.0-&gt;version1, 1.5-&gt;version2, 2.0-&gt;version3, 3.0-&gt;version4, 3.5-&gt;version5, 4.0-&gt;version6, 5.0-&gt;version7, etc. For example: If SMS is connecting to VASA 5.0, the this field should be set to 7. ", alias="versionId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VimVasaProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VimVasaProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


