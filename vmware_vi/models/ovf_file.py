# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OvfFile(DataObject):
    """
    Represents a file that the caller has downloaded and stored somewhere appropriate.  An instance of this class is used to tell OvfManager about the choices the caller made about a file. This information is needed when the OVF descriptor is generated with createDescriptor.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    device_id: StrictStr = Field(description="The ID of the device backed by this file.  This ID uniquely identifies the device within the entity hierarchy.  The caller will have received this along with the URL needed to download the file (this is handled by another service interface).  ***Since:*** vSphere API 4.0 ", alias="deviceId")
    path: StrictStr = Field(description="The path chosen by the caller for this file.  This path becomes the value of the \"href\" attribute of the corresponding \"File\" element in the OVF descriptor.  This path must be relative to the path chosen for the OVF descriptor. This implies that the caller must decide in advance on the path to which it will write the OVF descriptor, once it is returned.  The folder separator must be \"/\" (forward slash).  The path must not begin with a slash - ie. it must not be an absolute path.  ***Since:*** vSphere API 4.0 ")
    compression_method: Optional[StrictStr] = Field(default=None, description="The compression method the caller chose to employ for this file.  ***Since:*** vSphere API 4.0 ", alias="compressionMethod")
    chunk_size: Optional[StrictInt] = Field(default=None, description="The chunksize chosen by the caller.  When using chunking, the caller must adhere to the method described in the OVF specification.  ***Since:*** vSphere API 4.0 ", alias="chunkSize")
    size: StrictInt = Field(description="The file size, as observed by the caller during download.  ***Since:*** vSphere API 4.0 ")
    capacity: Optional[StrictInt] = Field(default=None, description="The capacity of the disk backed by this file.  This should only be set if the device backed by this file is a disk. This value will be written in the \"capacity\" attribute of the corresponding \"Disk\" element in the OVF descriptor.  Note that the \"capacity\" attribute is normally set to the capacity of the corresponding *VirtualDisk*. Setting this variable overrides the capacity from the VirtualDisk.  ***Since:*** vSphere API 4.1 ")
    populated_size: Optional[StrictInt] = Field(default=None, description="The populated size of the disk backed by this file.  This should only be set if the device backed by this file is a disk. This value will be written in the \"populatedSize\" attribute of the corresponding \"Disk\" element in the OVF descriptor.  ***Since:*** vSphere API 4.1 ", alias="populatedSize")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OvfFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OvfFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


