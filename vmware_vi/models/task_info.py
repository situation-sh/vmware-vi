# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.any import Any
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.key_any_value import KeyAnyValue
from vmware_vi.models.localizable_message import LocalizableMessage
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.method_fault import MethodFault
from vmware_vi.models.task_info_state_enum import TaskInfoStateEnum
from vmware_vi.models.task_reason import TaskReason
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaskInfo(DataObject):
    """
    This data object type contains all information about a task.  A task represents an operation performed by VirtualCenter or ESX. 
    """ # noqa: E501
    key: StrictStr = Field(description="The unique key for the task. ")
    task: ManagedObjectReference
    description: Optional[LocalizableMessage] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the operation that created the task.  This is not set for internal tasks. ")
    description_id: StrictStr = Field(description="An identifier for this operation.  This includes publicly visible internal tasks and is a lookup in the TaskDescription methodInfo data object. ", alias="descriptionId")
    entity: Optional[ManagedObjectReference] = None
    entity_name: Optional[StrictStr] = Field(default=None, description="The name of the managed entity, locale-specific, retained for the history collector database. ", alias="entityName")
    locked: Optional[List[ManagedObjectReference]] = Field(default=None, description="If the state of the task is \"running\", then this property is a list of managed entities that the operation has locked, with a shared lock.  Refers instances of *ManagedEntity*. ")
    state: TaskInfoStateEnum
    cancelled: StrictBool = Field(description="Flag to indicate whether or not the client requested cancellation of the task. ")
    cancelable: StrictBool = Field(description="Flag to indicate whether or not the cancel task operation is supported. ")
    error: Optional[MethodFault] = None
    result: Optional[Any] = None
    progress: Optional[StrictInt] = Field(default=None, description="If the task state is \"running\", then this property contains a progress measurement, expressed as percentage completed, from 0 to 100.  If this property is not set, then the command does not report progress. ")
    progress_details: Optional[List[KeyAnyValue]] = Field(default=None, alias="progressDetails")
    reason: TaskReason
    queue_time: datetime = Field(description="Time stamp when the task was created. ", alias="queueTime")
    start_time: Optional[datetime] = Field(default=None, description="Time stamp when the task started running. ", alias="startTime")
    complete_time: Optional[datetime] = Field(default=None, description="Time stamp when the task was completed (whether success or failure). ", alias="completeTime")
    event_chain_id: StrictInt = Field(description="Event chain ID that leads to the corresponding events. ", alias="eventChainId")
    change_tag: Optional[StrictStr] = Field(default=None, description="The user entered tag to identify the operations and their side effects  ***Since:*** vSphere API 4.0 ", alias="changeTag")
    parent_task_key: Optional[StrictStr] = Field(default=None, description="Tasks can be created by another task.  This shows *TaskInfo.key* of the task spun off this task. This is to track causality between tasks.  ***Since:*** vSphere API 4.0 ", alias="parentTaskKey")
    root_task_key: Optional[StrictStr] = Field(default=None, description="Tasks can be created by another task and such creation can go on for multiple levels.  This is the *TaskInfo.key* of the task that started the chain of tasks.  ***Since:*** vSphere API 4.0 ", alias="rootTaskKey")
    activation_id: Optional[StrictStr] = Field(default=None, description="The activation Id is a client-provided token to link an API call with a task.  ***Since:*** vSphere API 6.0 ", alias="activationId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaskInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaskInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


