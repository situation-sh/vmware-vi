# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.profile_policy import ProfilePolicy
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApplyProfile(DataObject):
    """
    The *ApplyProfile* data object is the base class for all data objects that define profile configuration data.  <code>ApplyProfile</code> defines ESX configuration data storage and it supports recursive profile definition for the profile plug-in architecture.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    enabled: StrictBool = Field(description="Indicates whether the profile is enabled.  ***Since:*** vSphere API 4.0 ")
    policy: Optional[List[ProfilePolicy]] = Field(default=None, description="The list of policies comprising the profile.  A *ProfilePolicy* stores one or more configuration data values in a *PolicyOption*. The policy option is one of the configuration options from the *ProfilePolicyMetadata*.*ProfilePolicyMetadata.possibleOption* list.  ***Since:*** vSphere API 4.0 ")
    profile_type_name: Optional[StrictStr] = Field(default=None, description="Identifies the profile type.  ***Since:*** vSphere API 5.0 ", alias="profileTypeName")
    profile_version: Optional[StrictStr] = Field(default=None, description="Profile engine version.  ***Since:*** vSphere API 5.0 ", alias="profileVersion")
    var_property: Optional[List[ProfileApplyProfileProperty]] = Field(default=None, description="List of subprofiles for this profile.  This list can change depending on which profile plug-ins are available in the system. Subprofiles can be nested to arbitrary depths to represent host capabilities.  ***Since:*** vSphere API 5.0 ", alias="property")
    favorite: Optional[StrictBool] = Field(default=None, description="Indicates whether this profile is marked as \"favorite\".  ***Since:*** vSphere API 6.5 ")
    to_be_merged: Optional[StrictBool] = Field(default=None, description="Indicates whether this profile is marked as to-be-merged.  ***Since:*** vSphere API 6.5 ", alias="toBeMerged")
    to_replace_with: Optional[StrictBool] = Field(default=None, description="Indicates whether the selected array elements, with the current as one of them, replace the profile array in the target host profile.  ***Since:*** vSphere API 6.5 ", alias="toReplaceWith")
    to_be_deleted: Optional[StrictBool] = Field(default=None, description="Indicates whether this profile is marked as to-be-deleted.  ***Since:*** vSphere API 6.5 ", alias="toBeDeleted")
    copy_enable_status: Optional[StrictBool] = Field(default=None, description="Indicates that the member variable <code>enabled</code> of this profile will be copied from source profile to target profiles at host profile composition.  ***Since:*** vSphere API 6.5 ", alias="copyEnableStatus")
    hidden: Optional[StrictBool] = Field(default=None, description="Indicates whether this profile will be displayed or not.  ***Since:*** vSphere API 6.7 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','ActiveDirectoryProfile': 'ActiveDirectoryProfile','AuthenticationProfile': 'AuthenticationProfile','DateTimeProfile': 'DateTimeProfile','DvsHostVNicProfile': 'DvsHostVNicProfile','DvsProfile': 'DvsProfile','DvsServiceConsoleVNicProfile': 'DvsServiceConsoleVNicProfile','DvsVNicProfile': 'DvsVNicProfile','FirewallProfile': 'FirewallProfile','FirewallProfileRulesetProfile': 'FirewallProfileRulesetProfile','HostApplyProfile': 'HostApplyProfile','HostMemoryProfile': 'HostMemoryProfile','HostPortGroupProfile': 'HostPortGroupProfile','IpAddressProfile': 'IpAddressProfile','IpRouteProfile': 'IpRouteProfile','LinkProfile': 'LinkProfile','NasStorageProfile': 'NasStorageProfile','NetStackInstanceProfile': 'NetStackInstanceProfile','NetworkPolicyProfile': 'NetworkPolicyProfile','NetworkProfile': 'NetworkProfile','NetworkProfileDnsConfigProfile': 'NetworkProfileDnsConfigProfile','NsxHostVNicProfile': 'NsxHostVNicProfile','NumPortsProfile': 'NumPortsProfile','OpaqueSwitchProfile': 'OpaqueSwitchProfile','OptionProfile': 'OptionProfile','PermissionProfile': 'PermissionProfile','PhysicalNicProfile': 'PhysicalNicProfile','PnicUplinkProfile': 'PnicUplinkProfile','PortGroupProfile': 'PortGroupProfile','ProfileApplyProfileElement': 'ProfileApplyProfileElement','SecurityProfile': 'SecurityProfile','ServiceConsolePortGroupProfile': 'ServiceConsolePortGroupProfile','ServiceProfile': 'ServiceProfile','StaticRouteProfile': 'StaticRouteProfile','StorageProfile': 'StorageProfile','UserGroupProfile': 'UserGroupProfile','UserProfile': 'UserProfile','VirtualSwitchProfile': 'VirtualSwitchProfile','VirtualSwitchSelectionProfile': 'VirtualSwitchSelectionProfile','VlanProfile': 'VlanProfile','VmPortGroupProfile': 'VmPortGroupProfile'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of ApplyProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of ApplyProfile from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("ApplyProfile failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.active_directory_profile import ActiveDirectoryProfile
from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.authentication_profile import AuthenticationProfile
from vmware_vi.models.date_time_profile import DateTimeProfile
from vmware_vi.models.dvs_host_v_nic_profile import DvsHostVNicProfile
from vmware_vi.models.dvs_profile import DvsProfile
from vmware_vi.models.dvs_service_console_v_nic_profile import DvsServiceConsoleVNicProfile
from vmware_vi.models.dvs_v_nic_profile import DvsVNicProfile
from vmware_vi.models.firewall_profile import FirewallProfile
from vmware_vi.models.firewall_profile_ruleset_profile import FirewallProfileRulesetProfile
from vmware_vi.models.host_apply_profile import HostApplyProfile
from vmware_vi.models.host_memory_profile import HostMemoryProfile
from vmware_vi.models.host_port_group_profile import HostPortGroupProfile
from vmware_vi.models.ip_address_profile import IpAddressProfile
from vmware_vi.models.ip_route_profile import IpRouteProfile
from vmware_vi.models.link_profile import LinkProfile
from vmware_vi.models.nas_storage_profile import NasStorageProfile
from vmware_vi.models.net_stack_instance_profile import NetStackInstanceProfile
from vmware_vi.models.network_policy_profile import NetworkPolicyProfile
from vmware_vi.models.network_profile import NetworkProfile
from vmware_vi.models.network_profile_dns_config_profile import NetworkProfileDnsConfigProfile
from vmware_vi.models.nsx_host_v_nic_profile import NsxHostVNicProfile
from vmware_vi.models.num_ports_profile import NumPortsProfile
from vmware_vi.models.opaque_switch_profile import OpaqueSwitchProfile
from vmware_vi.models.option_profile import OptionProfile
from vmware_vi.models.permission_profile import PermissionProfile
from vmware_vi.models.physical_nic_profile import PhysicalNicProfile
from vmware_vi.models.pnic_uplink_profile import PnicUplinkProfile
from vmware_vi.models.port_group_profile import PortGroupProfile
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.profile_apply_profile_element import ProfileApplyProfileElement
from vmware_vi.models.profile_apply_profile_property import ProfileApplyProfileProperty
from vmware_vi.models.security_profile import SecurityProfile
from vmware_vi.models.service_console_port_group_profile import ServiceConsolePortGroupProfile
from vmware_vi.models.service_profile import ServiceProfile
from vmware_vi.models.static_route_profile import StaticRouteProfile
from vmware_vi.models.storage_profile import StorageProfile
from vmware_vi.models.user_group_profile import UserGroupProfile
from vmware_vi.models.user_profile import UserProfile
from vmware_vi.models.virtual_switch_profile import VirtualSwitchProfile
from vmware_vi.models.virtual_switch_selection_profile import VirtualSwitchSelectionProfile
from vmware_vi.models.vlan_profile import VlanProfile
from vmware_vi.models.vm_port_group_profile import VmPortGroupProfile
# TODO: Rewrite to not use raise_errors
ApplyProfile.model_rebuild(raise_errors=False)

