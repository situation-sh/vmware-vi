# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.distributed_virtual_switch_port_connection import DistributedVirtualSwitchPortConnection
from vmware_vi.models.dynamic_property import DynamicProperty
from vmware_vi.models.host_ip_config import HostIpConfig
from vmware_vi.models.host_virtual_nic_ip_route_spec import HostVirtualNicIpRouteSpec
from vmware_vi.models.host_virtual_nic_opaque_network_spec import HostVirtualNicOpaqueNetworkSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostVirtualNicSpec(DataObject):
    """
    The *HostVirtualNicSpec* data object describes the *HostVirtualNic* configuration containing both the configured properties on a virtual NIC and identification information. 
    """ # noqa: E501
    dynamic_property: Optional[List[DynamicProperty]] = Field(default=None, description="Set of dynamic properties.  This property is optional because only the properties of an object that are unknown to a client will be part of this set. This property is not readonly just in case we want to send such properties from a client in the future. ", alias="dynamicProperty")
    ip: Optional[HostIpConfig] = None
    mac: Optional[StrictStr] = Field(default=None, description="Media access control (MAC) address of the virtual network adapter. ")
    distributed_virtual_port: Optional[DistributedVirtualSwitchPortConnection] = Field(default=None, alias="distributedVirtualPort")
    portgroup: Optional[StrictStr] = Field(default=None, description="Portgroup (*HostPortGroup*) to which the virtual NIC is connected.  When reconfiguring a virtual NIC, this property indicates the new portgroup to which the virtual NIC should connect. You can specify this property only if you do not specify *HostVirtualNicSpec.distributedVirtualPort* and *HostVirtualNicSpec.opaqueNetwork*  ***Since:*** vSphere API 4.0 ")
    mtu: Optional[StrictInt] = Field(default=None, description="Maximum transmission unit for packets size in bytes for the virtual NIC.  If not specified, the Server will use the system default value.  ***Since:*** vSphere API 4.0 ")
    tso_enabled: Optional[StrictBool] = Field(default=None, description="Flag enabling or disabling TCP segmentation offset for a virtual NIC.  If not specified, a default value of true will be used.  ***Since:*** vSphere API 4.0 ", alias="tsoEnabled")
    net_stack_instance_key: Optional[StrictStr] = Field(default=None, description="The NetStackInstance that the virtual NIC uses, the value of this property is default to be *defaultTcpipStack*  ***Since:*** vSphere API 5.5 ", alias="netStackInstanceKey")
    opaque_network: Optional[HostVirtualNicOpaqueNetworkSpec] = Field(default=None, alias="opaqueNetwork")
    external_id: Optional[StrictStr] = Field(default=None, description="An ID assigned to the vmkernel adapter by external management plane.  The value and format of this property is determined by external management plane, and vSphere doesn't do any validation. It's also up to external management plane to set, unset or maintain this property.  This property is applicable only when *HostVirtualNicSpec.opaqueNetwork* property is set, otherwise it's value is ignored.  ***Since:*** vSphere API 6.0 ", alias="externalId")
    pinned_pnic: Optional[StrictStr] = Field(default=None, description="The physical nic to which the vmkernel adapter is pinned.  Setting this value ensures that the virtual NIC will access external network only via the the specified physical NIC.  This property is applicable only when *HostVirtualNicSpec.opaqueNetwork* property is set. If the vmkernel adapter is connected to a portgroup or dvPort, then such pinning can be achieved by configuring correct teaming policy on the portgroup or dvPort or dvPortgroup that is connected to virtual NIC.  ***Since:*** vSphere API 6.0 ", alias="pinnedPnic")
    ip_route_spec: Optional[HostVirtualNicIpRouteSpec] = Field(default=None, alias="ipRouteSpec")
    system_owned: Optional[StrictBool] = Field(default=None, description="Set to true when the vmkernel adapter is configured by other system indirectly other than by the user directly.  ***Since:*** vSphere API 7.0 ", alias="systemOwned")
    dpu_id: Optional[StrictStr] = Field(default=None, description="The identifier of the DPU hosting the vmknic.  If vmknic is on ESX host, dpuId will be unset. ", alias="dpuId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostVirtualNicSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostVirtualNicSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


