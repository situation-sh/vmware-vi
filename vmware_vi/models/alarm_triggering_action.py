# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool
from pydantic import Field
from vmware_vi.models.action import Action
from vmware_vi.models.alarm_action import AlarmAction
from vmware_vi.models.alarm_triggering_action_transition_spec import AlarmTriggeringActionTransitionSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AlarmTriggeringAction(AlarmAction):
    """
    This data object type describes one or more triggering transitions and an action to be done when an alarm is triggered.  There are four triggering transitions; at least one of them must be provided. A gray state is considered the same as a green state, for the purpose of detecting transitions. 
    """ # noqa: E501
    action: Action
    transition_specs: Optional[List[AlarmTriggeringActionTransitionSpec]] = Field(default=None, description="Indicates on which transitions this action executes and repeats.  This is optional only for backwards compatibility.  ***Since:*** vSphere API 4.0 ", alias="transitionSpecs")
    green2yellow: StrictBool = Field(description="Deprecated as of vSphere API 4.0, use *AlarmTriggeringActionTransitionSpec* .  Flag to specify that the alarm should trigger on a transition from green to yellow. ")
    yellow2red: StrictBool = Field(description="Deprecated as of vSphere API 4.0, use *AlarmTriggeringActionTransitionSpec* .  Flag to specify that the alarm should trigger on a transition from yellow to red. ")
    red2yellow: StrictBool = Field(description="Deprecated as of vSphere API 4.0, use *AlarmTriggeringActionTransitionSpec* .  Flag to specify that the alarm should trigger on a transition from red to yellow. ")
    yellow2green: StrictBool = Field(description="Deprecated as of vSphere API 4.0, use *AlarmTriggeringActionTransitionSpec* .  Flag to specify that the alarm should trigger on a transition from yellow to green. ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AlarmTriggeringAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AlarmTriggeringAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


