# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_host_bus_adapter import HostHostBusAdapter
from vmware_vi.models.host_target_transport import HostTargetTransport
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostMultipathInfoPath(DataObject):
    """
    The *HostMultipathInfoPath* data object is a storage entity that represents a topological path from a host bus adapter to a SCSI logical unit.  Each path is unique although each host bus adapter/SCSI logical unit pair can have multiple paths.  Path objects are identified by a key. The specifics of how the key is formatted are dependent on the implementation. Example implementations include using strings like \"vmhba1:0:0:0\". 
    """ # noqa: E501
    key: StrictStr = Field(description="Identifier of the path. ")
    name: StrictStr = Field(description="Name of path.  Use this name to configure LogicalUnit multipathing policy using *HostStorageSystem.EnableMultipathPath* and *HostStorageSystem.DisableMultipathPath*. ")
    path_state: StrictStr = Field(description="Deprecated as of VI API 4.0: - System reported path states are available in *HostMultipathInfoPath.state*. - Paths slated for I/O can be found using *HostMultipathInfoPath.isWorkingPath*.  State of the path.  Must be one of the values of *MultipathState_enum* <dl> <dt>active</dt> <dd>Path can be used for I/O and is currently a working path.</dd> <dt>standby</dt> <dd>Path can be used for I/O but is not a working path or can be used if active paths fail.</dd> <dt>disabled</dt> <dd>Path has been administratively disabled.</dd> <dt>dead</dt> <dd>Path cannot be used for I/O.</dd> <dt>unknown</dt> <dd>Path is in unknown error state.</dd> </dl> ", alias="pathState")
    state: Optional[StrictStr] = Field(default=None, description="System-reported state of the path.  Must be one of the values of *MultipathState_enum* <dl> <dt>active</dt> <dd>Path can be used for I/O.</dd> <dt>standby</dt> <dd>Path can be used for I/O if active paths fail.</dd> <dt>disabled</dt> <dd>Path has been administratively disabled.</dd> <dt>dead</dt> <dd>Path cannot be used for I/O.</dd> <dt>unknown</dt> <dd>Path is in unknown error state.</dd> </dl>  ***Since:*** vSphere API 4.0 ")
    is_working_path: Optional[StrictBool] = Field(default=None, description="A path, managed by a given path selection policy(psp) plugin, is denoted to be a Working Path if the psp plugin is likely to select the path for performing I/O in the near future.  ***Since:*** vSphere API 4.0 ", alias="isWorkingPath")
    adapter: HostHostBusAdapter
    lun: HostMultipathInfoLogicalUnit
    transport: Optional[HostTargetTransport] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostMultipathInfoPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostMultipathInfoPath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj

from vmware_vi.models.host_multipath_info_logical_unit import HostMultipathInfoLogicalUnit
# TODO: Rewrite to not use raise_errors
HostMultipathInfoPath.model_rebuild(raise_errors=False)

