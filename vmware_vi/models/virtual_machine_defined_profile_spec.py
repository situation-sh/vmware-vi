# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.key_value import KeyValue
from vmware_vi.models.replication_spec import ReplicationSpec
from vmware_vi.models.virtual_machine_profile_raw_data import VirtualMachineProfileRawData
from vmware_vi.models.virtual_machine_profile_spec import VirtualMachineProfileSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineDefinedProfileSpec(VirtualMachineProfileSpec):
    """
    Policy specification that carries a pre-defined Storage Policy to be associated with a Virtual Machine Home or a Virtual Disk object.  Such a pre-defined policy can be either be vSphere Storage Administrator defined or may come from a set of pre-defined policies from Storage Vendor.  Neither the association nor the policy data is persisted in Virtual Machine configuration. This data is managed by the an extension of Virtual Center (Storage Policy Based Management).  ***Since:*** vSphere API 5.5 
    """ # noqa: E501
    profile_id: StrictStr = Field(description="Storage Policy Profile identification - Should be pbm.profileId but for implementation reasons, could not be.  ***Since:*** vSphere API 5.5 ", alias="profileId")
    replication_spec: Optional[ReplicationSpec] = Field(default=None, alias="replicationSpec")
    profile_data: Optional[VirtualMachineProfileRawData] = Field(default=None, alias="profileData")
    profile_params: Optional[List[KeyValue]] = Field(default=None, description="Parameterized Storage Profiles Extra configuration that is not expressed as a capability in the Profile definition.  ***Since:*** vSphere API 6.7 ", alias="profileParams")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineDefinedProfileSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineDefinedProfileSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


