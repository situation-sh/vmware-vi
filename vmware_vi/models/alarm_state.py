# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.managed_entity_status_enum import ManagedEntityStatusEnum
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AlarmState(DataObject):
    """
    Information about the alarm's state. 
    """ # noqa: E501
    key: StrictStr = Field(description="Unique key that identifies the alarm. ")
    entity: ManagedObjectReference
    alarm: ManagedObjectReference
    overall_status: ManagedEntityStatusEnum = Field(alias="overallStatus")
    time: datetime = Field(description="Time the alarm triggered. ")
    acknowledged: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the alarm's actions have been acknowledged for the associated ManagedEntity.  ***Since:*** vSphere API 4.0 ")
    acknowledged_by_user: Optional[StrictStr] = Field(default=None, description="The user who acknowledged this triggering.  If the triggering has not been acknowledged, then the value is not valid.  ***Since:*** vSphere API 4.0 ", alias="acknowledgedByUser")
    acknowledged_time: Optional[datetime] = Field(default=None, description="The time this triggering was acknowledged.  If the triggering has not been acknowledged, then the value is not valid.  ***Since:*** vSphere API 4.0 ", alias="acknowledgedTime")
    event_key: Optional[StrictInt] = Field(default=None, description="Contains the key of the event that has triggered the alarm.  The value is set only for event based alarms. The value is not set for gray or manually reset alarms (via vim.AlarmManager.setAlarmStatus).  ***Since:*** vSphere API 6.0 ", alias="eventKey")
    disabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the alarm is disabled for the associated ManagedEntity.  ***Since:*** vSphere API 6.9.1 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AlarmState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AlarmState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


