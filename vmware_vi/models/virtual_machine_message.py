# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.any import Any
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineMessage(DataObject):
    """
    Message data which is intended to be displayed according to the locale of a client.  A *VirtualMachineMessage* contains both a formatted, localized version of the text and the data needed to perform localization in conjunction with localization catalogs.  Clients of the VIM API may use *SessionManager*.*SessionManager.SetLocale* to cause the server to emit localized *VirtualMachineMessage.text*, or may perform client-side localization based on message catalogs provided by the *LocalizationManager*.  Message variables are always integers, e.g. {1} and {2}, which are 1-based indexes into *VirtualMachineMessage.argument*. - The corresponding argument may be a recursive lookup:   - *VirtualMachineMessage.argument* = \\[\"button.cancel\", \"msg.revert\"\\]   - CATALOG(locmsg, *VirtualMachineMessage.id*) = \"Select '{1}' to {2}\"   - CATALOG(locmsg, button.cancel) = \"Cancel\"   - CATALOG(locmsg, msg.revert) = \"revert\"   - \\==&gt; *VirtualMachineMessage.text* = \"Select 'Cancel' to revert\" - If the recursive lookup fails, the argument is a plain string.   - *VirtualMachineMessage.argument* = \\[\"127.0.0.1\"\\]   - CATALOG(locmsg, *VirtualMachineMessage.id*) = \"IP address is {1}\"   - \\==&gt; *VirtualMachineMessage.text* \"IP address is 127.0.0.1\"      See also *LocalizationManager*.  ***Since:*** VI API 2.5 
    """ # noqa: E501
    id: StrictStr = Field(description="A unique identifier for this particular message.  This field is a key for looking up format strings in the locmsg catalog.  ***Since:*** VI API 2.5 ")
    argument: Optional[List[Any]] = Field(default=None, description="Substitution arguments for variables in the localized message.  Substitution variables in the format string identified by *VirtualMachineMessage.id* are 1-based indexes into this array. Substitution variable {1} corresponds to argument\\[0\\], etc.  ***Since:*** VI API 2.5 ")
    text: Optional[StrictStr] = Field(default=None, description="Text in session locale.  Use *SessionManager*.*SessionManager.SetLocale* to change the session locale.  ***Since:*** vSphere API 4.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


