# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_sub_specification import HostSubSpecification
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostSpecification(DataObject):
    """
    The host specification data are those needed at host boot time to create and configure virtual devices and host services.  The *HostSpecification* data object contains a collection of host sub specification data. For host sub specification data, see *HostSubSpecification* for details.  ***Since:*** vSphere API 6.5 
    """ # noqa: E501
    created_time: datetime = Field(description="Time at which the host specification was created.  ***Since:*** vSphere API 6.5 ", alias="createdTime")
    last_modified: Optional[datetime] = Field(default=None, description="Time at which the host specification was last modified.  If it isn't set, it is the same as <code>createdTime</code>.  ***Since:*** vSphere API 6.5 ", alias="lastModified")
    host: ManagedObjectReference
    sub_specs: Optional[List[HostSubSpecification]] = Field(default=None, description="The collection of the host sub specifications.  It is optional.  ***Since:*** vSphere API 6.5 ", alias="subSpecs")
    change_id: Optional[StrictStr] = Field(default=None, description="The change ID for querying the host specification data updated in a time period.  It has a format of timestamp:change\\_number, where timestamp is the decimal string of a start time, and change\\_number is the decimal string of an auto incremented variable counting from the start time.  ***Since:*** vSphere API 6.5 ", alias="changeID")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


