# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.element_description import ElementDescription
from vmware_vi.models.perf_stats_type_enum import PerfStatsTypeEnum
from vmware_vi.models.perf_summary_type_enum import PerfSummaryTypeEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PerfCounterInfo(DataObject):
    """
    This data object type contains metadata for a performance counter.  See *PerformanceManager* for definitions of available counters. 
    """ # noqa: E501
    key: StrictInt = Field(description="A system-generated number that uniquely identifies the counter in the context of the system.  The performance counter ID. ")
    name_info: ElementDescription = Field(alias="nameInfo")
    group_info: ElementDescription = Field(alias="groupInfo")
    unit_info: ElementDescription = Field(alias="unitInfo")
    rollup_type: PerfSummaryTypeEnum = Field(alias="rollupType")
    stats_type: PerfStatsTypeEnum = Field(alias="statsType")
    level: Optional[StrictInt] = Field(default=None, description="Minimum level at which metrics of this type will be collected by VirtualCenter Server.  The value for this property for any performance counter is a number from 1 to 4. The higher the setting, the more data is collected by VirtualCenter Server. The default setting for VirtualCenter Server is 1, which collects the minimal amount of performance data that is typically useful to administrators and developers alike. The specific level of each counter is documented in the respective counter-documentation pages, by group. See *PerformanceManager* for links to the counter group pages.  ***Since:*** VI API 2.5 ")
    per_device_level: Optional[StrictInt] = Field(default=None, description="Minimum level at which the per device metrics of this type will be collected by vCenter Server.  The value for this property for any performance counter is a number from 1 to 4. By default all per device metrics are calculated at level 3 or more. If a certain per device counter is collected at a certain level, the aggregate metric is also calculated at that level, i.e., perDeviceLevel is greater than or equal to level.  ***Since:*** vSphere API 4.1 ", alias="perDeviceLevel")
    associated_counter_id: Optional[List[StrictInt]] = Field(default=None, description="Deprecated as of VI API 2.5, this property is not used.  The counter IDs associated with the same performance counter name for the same device type.  For example, the rollup types for CPU Usage for a host are average, minimum, and maximum&#46; Therefore, their counter IDs are associated. ", alias="associatedCounterId")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PerfCounterInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PerfCounterInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


