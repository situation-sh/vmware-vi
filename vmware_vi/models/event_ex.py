# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.event import Event
from vmware_vi.models.key_any_value import KeyAnyValue
from vmware_vi.models.method_fault import MethodFault
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EventEx(Event):
    """
    EventEx is a dynamically typed Event class, whose type is indicated by its eventTypeId property.  A collection of eventTypeIds is registered by Extensions, which can now pass in optional type information for each eventTypeId which indicates the applicable argument names and types, among other properties.  EventEx allows event arguments of any type, though today, the system only supports \"string\" and \"moid\" (a string which can be interpreted as an object ID in the system) as argument types. In the future, the system may optionally strongly check the types of the arguments in the event against the declared type information, based on how the event type is declared.  EventEx also allows arbitrary \"event object\"s - the object which the event refers to. You can put in any object identifier as the objectId, but objectType should be filled in only if the object is actually present in the VC Server's ManagedEntity inventory.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    event_type_id: StrictStr = Field(description="The type of the event.  ***Since:*** vSphere API 4.0 ", alias="eventTypeId")
    severity: Optional[StrictStr] = Field(default=None, description="The severity level of the message: null=&gt;info.  See also *EventEventSeverity_enum*.  ***Since:*** vSphere API 4.0 ")
    message: Optional[StrictStr] = Field(default=None, description="An arbitrary message string, not localized.  ***Since:*** vSphere API 4.0 ")
    arguments: Optional[List[KeyAnyValue]] = Field(default=None, description="The event arguments associated with the event  ***Since:*** vSphere API 4.0 ")
    object_id: Optional[StrictStr] = Field(default=None, description="The ID of the object (VM, Host, Folder..) which the event pertains to.  Federated or local inventory path.  ***Since:*** vSphere API 4.0 ", alias="objectId")
    object_type: Optional[StrictStr] = Field(default=None, description="the type of the object, if known to the VirtualCenter inventory  ***Since:*** vSphere API 4.0 ", alias="objectType")
    object_name: Optional[StrictStr] = Field(default=None, description="The name of the object  ***Since:*** vSphere API 4.1 ", alias="objectName")
    fault: Optional[MethodFault] = None
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EventEx from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EventEx from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


