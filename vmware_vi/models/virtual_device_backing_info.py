# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Union

from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualDeviceBackingInfo(DataObject):
    """
    <code>*VirtualDeviceBackingInfo*</code> is a base data object type for information about the backing of a device in a virtual machine.  This base type does not define any properties. It is used as a namespace for general-purpose subtypes. Specific devices are represented by subtypes which define properties for device-specific backing information. 
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','VirtualCdromAtapiBackingInfo': 'VirtualCdromAtapiBackingInfo','VirtualCdromIsoBackingInfo': 'VirtualCdromIsoBackingInfo','VirtualCdromPassthroughBackingInfo': 'VirtualCdromPassthroughBackingInfo','VirtualCdromRemoteAtapiBackingInfo': 'VirtualCdromRemoteAtapiBackingInfo','VirtualCdromRemotePassthroughBackingInfo': 'VirtualCdromRemotePassthroughBackingInfo','VirtualDeviceDeviceBackingInfo': 'VirtualDeviceDeviceBackingInfo','VirtualDeviceFileBackingInfo': 'VirtualDeviceFileBackingInfo','VirtualDevicePipeBackingInfo': 'VirtualDevicePipeBackingInfo','VirtualDeviceRemoteDeviceBackingInfo': 'VirtualDeviceRemoteDeviceBackingInfo','VirtualDeviceURIBackingInfo': 'VirtualDeviceURIBackingInfo','VirtualDiskFlatVer1BackingInfo': 'VirtualDiskFlatVer1BackingInfo','VirtualDiskFlatVer2BackingInfo': 'VirtualDiskFlatVer2BackingInfo','VirtualDiskLocalPMemBackingInfo': 'VirtualDiskLocalPMemBackingInfo','VirtualDiskPartitionedRawDiskVer2BackingInfo': 'VirtualDiskPartitionedRawDiskVer2BackingInfo','VirtualDiskRawDiskMappingVer1BackingInfo': 'VirtualDiskRawDiskMappingVer1BackingInfo','VirtualDiskRawDiskVer2BackingInfo': 'VirtualDiskRawDiskVer2BackingInfo','VirtualDiskSeSparseBackingInfo': 'VirtualDiskSeSparseBackingInfo','VirtualDiskSparseVer1BackingInfo': 'VirtualDiskSparseVer1BackingInfo','VirtualDiskSparseVer2BackingInfo': 'VirtualDiskSparseVer2BackingInfo','VirtualEthernetCardDistributedVirtualPortBackingInfo': 'VirtualEthernetCardDistributedVirtualPortBackingInfo','VirtualEthernetCardLegacyNetworkBackingInfo': 'VirtualEthernetCardLegacyNetworkBackingInfo','VirtualEthernetCardNetworkBackingInfo': 'VirtualEthernetCardNetworkBackingInfo','VirtualEthernetCardOpaqueNetworkBackingInfo': 'VirtualEthernetCardOpaqueNetworkBackingInfo','VirtualFloppyDeviceBackingInfo': 'VirtualFloppyDeviceBackingInfo','VirtualFloppyImageBackingInfo': 'VirtualFloppyImageBackingInfo','VirtualFloppyRemoteDeviceBackingInfo': 'VirtualFloppyRemoteDeviceBackingInfo','VirtualNVDIMMBackingInfo': 'VirtualNVDIMMBackingInfo','VirtualPCIPassthroughDeviceBackingInfo': 'VirtualPCIPassthroughDeviceBackingInfo','VirtualPCIPassthroughDvxBackingInfo': 'VirtualPCIPassthroughDvxBackingInfo','VirtualPCIPassthroughDynamicBackingInfo': 'VirtualPCIPassthroughDynamicBackingInfo','VirtualPCIPassthroughPluginBackingInfo': 'VirtualPCIPassthroughPluginBackingInfo','VirtualPCIPassthroughVmiopBackingInfo': 'VirtualPCIPassthroughVmiopBackingInfo','VirtualParallelPortDeviceBackingInfo': 'VirtualParallelPortDeviceBackingInfo','VirtualParallelPortFileBackingInfo': 'VirtualParallelPortFileBackingInfo','VirtualPointingDeviceDeviceBackingInfo': 'VirtualPointingDeviceDeviceBackingInfo','VirtualPrecisionClockSystemClockBackingInfo': 'VirtualPrecisionClockSystemClockBackingInfo','VirtualSCSIPassthroughDeviceBackingInfo': 'VirtualSCSIPassthroughDeviceBackingInfo','VirtualSerialPortDeviceBackingInfo': 'VirtualSerialPortDeviceBackingInfo','VirtualSerialPortFileBackingInfo': 'VirtualSerialPortFileBackingInfo','VirtualSerialPortPipeBackingInfo': 'VirtualSerialPortPipeBackingInfo','VirtualSerialPortThinPrintBackingInfo': 'VirtualSerialPortThinPrintBackingInfo','VirtualSerialPortURIBackingInfo': 'VirtualSerialPortURIBackingInfo','VirtualSoundCardDeviceBackingInfo': 'VirtualSoundCardDeviceBackingInfo','VirtualSriovEthernetCardSriovBackingInfo': 'VirtualSriovEthernetCardSriovBackingInfo','VirtualUSBRemoteClientBackingInfo': 'VirtualUSBRemoteClientBackingInfo','VirtualUSBRemoteHostBackingInfo': 'VirtualUSBRemoteHostBackingInfo','VirtualUSBUSBBackingInfo': 'VirtualUSBUSBBackingInfo'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualDeviceBackingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualDeviceBackingInfo from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("VirtualDeviceBackingInfo failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.virtual_cdrom_atapi_backing_info import VirtualCdromAtapiBackingInfo
from vmware_vi.models.virtual_cdrom_iso_backing_info import VirtualCdromIsoBackingInfo
from vmware_vi.models.virtual_cdrom_passthrough_backing_info import VirtualCdromPassthroughBackingInfo
from vmware_vi.models.virtual_cdrom_remote_atapi_backing_info import VirtualCdromRemoteAtapiBackingInfo
from vmware_vi.models.virtual_cdrom_remote_passthrough_backing_info import VirtualCdromRemotePassthroughBackingInfo
from vmware_vi.models.virtual_device_device_backing_info import VirtualDeviceDeviceBackingInfo
from vmware_vi.models.virtual_device_file_backing_info import VirtualDeviceFileBackingInfo
from vmware_vi.models.virtual_device_pipe_backing_info import VirtualDevicePipeBackingInfo
from vmware_vi.models.virtual_device_remote_device_backing_info import VirtualDeviceRemoteDeviceBackingInfo
from vmware_vi.models.virtual_device_uri_backing_info import VirtualDeviceURIBackingInfo
from vmware_vi.models.virtual_disk_flat_ver1_backing_info import VirtualDiskFlatVer1BackingInfo
from vmware_vi.models.virtual_disk_flat_ver2_backing_info import VirtualDiskFlatVer2BackingInfo
from vmware_vi.models.virtual_disk_local_p_mem_backing_info import VirtualDiskLocalPMemBackingInfo
from vmware_vi.models.virtual_disk_partitioned_raw_disk_ver2_backing_info import VirtualDiskPartitionedRawDiskVer2BackingInfo
from vmware_vi.models.virtual_disk_raw_disk_mapping_ver1_backing_info import VirtualDiskRawDiskMappingVer1BackingInfo
from vmware_vi.models.virtual_disk_raw_disk_ver2_backing_info import VirtualDiskRawDiskVer2BackingInfo
from vmware_vi.models.virtual_disk_se_sparse_backing_info import VirtualDiskSeSparseBackingInfo
from vmware_vi.models.virtual_disk_sparse_ver1_backing_info import VirtualDiskSparseVer1BackingInfo
from vmware_vi.models.virtual_disk_sparse_ver2_backing_info import VirtualDiskSparseVer2BackingInfo
from vmware_vi.models.virtual_ethernet_card_distributed_virtual_port_backing_info import VirtualEthernetCardDistributedVirtualPortBackingInfo
from vmware_vi.models.virtual_ethernet_card_legacy_network_backing_info import VirtualEthernetCardLegacyNetworkBackingInfo
from vmware_vi.models.virtual_ethernet_card_network_backing_info import VirtualEthernetCardNetworkBackingInfo
from vmware_vi.models.virtual_ethernet_card_opaque_network_backing_info import VirtualEthernetCardOpaqueNetworkBackingInfo
from vmware_vi.models.virtual_floppy_device_backing_info import VirtualFloppyDeviceBackingInfo
from vmware_vi.models.virtual_floppy_image_backing_info import VirtualFloppyImageBackingInfo
from vmware_vi.models.virtual_floppy_remote_device_backing_info import VirtualFloppyRemoteDeviceBackingInfo
from vmware_vi.models.virtual_nvdimm_backing_info import VirtualNVDIMMBackingInfo
from vmware_vi.models.virtual_parallel_port_device_backing_info import VirtualParallelPortDeviceBackingInfo
from vmware_vi.models.virtual_parallel_port_file_backing_info import VirtualParallelPortFileBackingInfo
from vmware_vi.models.virtual_pci_passthrough_device_backing_info import VirtualPCIPassthroughDeviceBackingInfo
from vmware_vi.models.virtual_pci_passthrough_dvx_backing_info import VirtualPCIPassthroughDvxBackingInfo
from vmware_vi.models.virtual_pci_passthrough_dynamic_backing_info import VirtualPCIPassthroughDynamicBackingInfo
from vmware_vi.models.virtual_pci_passthrough_plugin_backing_info import VirtualPCIPassthroughPluginBackingInfo
from vmware_vi.models.virtual_pci_passthrough_vmiop_backing_info import VirtualPCIPassthroughVmiopBackingInfo
from vmware_vi.models.virtual_pointing_device_device_backing_info import VirtualPointingDeviceDeviceBackingInfo
from vmware_vi.models.virtual_precision_clock_system_clock_backing_info import VirtualPrecisionClockSystemClockBackingInfo
from vmware_vi.models.virtual_scsi_passthrough_device_backing_info import VirtualSCSIPassthroughDeviceBackingInfo
from vmware_vi.models.virtual_serial_port_device_backing_info import VirtualSerialPortDeviceBackingInfo
from vmware_vi.models.virtual_serial_port_file_backing_info import VirtualSerialPortFileBackingInfo
from vmware_vi.models.virtual_serial_port_pipe_backing_info import VirtualSerialPortPipeBackingInfo
from vmware_vi.models.virtual_serial_port_thin_print_backing_info import VirtualSerialPortThinPrintBackingInfo
from vmware_vi.models.virtual_serial_port_uri_backing_info import VirtualSerialPortURIBackingInfo
from vmware_vi.models.virtual_sound_card_device_backing_info import VirtualSoundCardDeviceBackingInfo
from vmware_vi.models.virtual_sriov_ethernet_card_sriov_backing_info import VirtualSriovEthernetCardSriovBackingInfo
from vmware_vi.models.virtual_usb_remote_client_backing_info import VirtualUSBRemoteClientBackingInfo
from vmware_vi.models.virtual_usb_remote_host_backing_info import VirtualUSBRemoteHostBackingInfo
from vmware_vi.models.virtual_usbusb_backing_info import VirtualUSBUSBBackingInfo
# TODO: Rewrite to not use raise_errors
VirtualDeviceBackingInfo.model_rebuild(raise_errors=False)

