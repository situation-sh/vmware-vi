# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt
from pydantic import Field
from vmware_vi.models.host_account_spec import HostAccountSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostPosixAccountSpec(HostAccountSpec):
    """
    This data object type contains a POSIX-specific parameter for local account creation. 
    """ # noqa: E501
    posix_id: Optional[StrictInt] = Field(default=None, description="Deprecated as of vSphere API 5.1, this property is deprecated and is ignored.  The user ID or group ID of a specified account. ", alias="posixId")
    shell_access: Optional[StrictBool] = Field(default=None, description="Grants shell access.  As of vSphere API 5.1, this property is deprecated and is ignored. *HostLocalAccountManager.CreateUser* will always set this to true, and *HostLocalAccountManager.UpdateUser* will set it to true if it is already false. Also shell access is granted only to users with Administrator role on the root folder and no other non-Admin role on any other inventory object.  As of vSphere API 7.0.3.2, this property is no longer ignored and it must be true if a user with administrator permissions needs shell access. It can be set to true for other users only by administrators who themselves have this shell access. Administrators without shell access cannot change the passwords of users with shell access. Setting this property to false for user 'root' has no effect.  If this property is not specified when creating a new user account then the default value depends on the following factors: if the calling user does not have shell access then it defaults to false; if the calling user has shell access then it defaults to true, unless overridden by host configuration settings. ", alias="shellAccess")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostPosixAccountSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostPosixAccountSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


