# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel
from pydantic import Field
from vmware_vi.models.performance_manager_counter_level_mapping import PerformanceManagerCounterLevelMapping
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateCounterLevelMappingRequestType(BaseModel):
    """
    The parameters of *PerformanceManager.UpdateCounterLevelMapping*. 
    """ # noqa: E501
    counter_level_map: List[PerformanceManagerCounterLevelMapping] = Field(description="An array of *PerformanceManagerCounterLevelMapping* objects. The levels for the counters passed in are changed to the passed in values. If the optional aggregateLevel field is left unset then only the perDeviceLevel is configured. If the optional perDeviceLevel is left unset then only the aggregateLevel is configured. If there are multiple entries in the passed in array for the same counterId being updated then the last entry containing the counterId takes effect.  ***Since:*** vSphere API 4.1 ", alias="counterLevelMap")
    __properties: ClassVar[List[str]] = ["counterLevelMap"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateCounterLevelMappingRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in counter_level_map (list)
        _items = []
        if self.counter_level_map:
            for _item in self.counter_level_map:
                if _item:
                    _items.append(_item.to_dict())
            _dict['counterLevelMap'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateCounterLevelMappingRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counterLevelMap": [PerformanceManagerCounterLevelMapping.from_dict(_item) for _item in obj.get("counterLevelMap")] if obj.get("counterLevelMap") is not None else None
        })
        return _obj


