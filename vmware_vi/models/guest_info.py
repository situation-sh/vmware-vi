# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.guest_disk_info import GuestDiskInfo
from vmware_vi.models.guest_info_customization_info import GuestInfoCustomizationInfo
from vmware_vi.models.guest_info_namespace_generation_info import GuestInfoNamespaceGenerationInfo
from vmware_vi.models.guest_nic_info import GuestNicInfo
from vmware_vi.models.guest_screen_info import GuestScreenInfo
from vmware_vi.models.guest_stack_info import GuestStackInfo
from vmware_vi.models.virtual_machine_tools_status_enum import VirtualMachineToolsStatusEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GuestInfo(DataObject):
    """
    Information about the guest operating system.  Most of this information is collected by VMware Tools. In general, be sure you have VMware Tools installed and that the virtual machine is running when you access this information. 
    """ # noqa: E501
    tools_status: Optional[VirtualMachineToolsStatusEnum] = Field(default=None, alias="toolsStatus")
    tools_version_status: Optional[StrictStr] = Field(default=None, description="Deprecated as of vSphere API 5.1 use *GuestInfo.toolsVersionStatus2*.  Current version status of VMware Tools in the guest operating system, if known.  The set of possible values is described in *VirtualMachineToolsVersionStatus_enum* for vSphere API 5.0.  ***Since:*** vSphere API 4.0 ", alias="toolsVersionStatus")
    tools_version_status2: Optional[StrictStr] = Field(default=None, description="Current version status of VMware Tools in the guest operating system, if known.  The set of possible values is described in *VirtualMachineToolsVersionStatus_enum*  ***Since:*** vSphere API 5.0 ", alias="toolsVersionStatus2")
    tools_running_status: Optional[StrictStr] = Field(default=None, description="Current running status of VMware Tools in the guest operating system, if known.  The set of possible values is described in *VirtualMachineToolsRunningStatus_enum*  ***Since:*** vSphere API 4.0 ", alias="toolsRunningStatus")
    tools_version: Optional[StrictStr] = Field(default=None, description="Current version of VMware Tools, if known. ", alias="toolsVersion")
    tools_install_type: Optional[StrictStr] = Field(default=None, description="Current installation type of VMware Tools in the guest operating system.  The set of possible values is described in *VirtualMachineToolsInstallType_enum*  ***Since:*** vSphere API 6.5 ", alias="toolsInstallType")
    guest_id: Optional[StrictStr] = Field(default=None, description="Guest operating system identifier (short name), if known. ", alias="guestId")
    guest_family: Optional[StrictStr] = Field(default=None, description="Guest operating system family, if known. ", alias="guestFamily")
    guest_full_name: Optional[StrictStr] = Field(default=None, description="Guest operating system full name, if known. ", alias="guestFullName")
    host_name: Optional[StrictStr] = Field(default=None, description="Hostname of the guest operating system, if known. ", alias="hostName")
    ip_address: Optional[StrictStr] = Field(default=None, description="Primary IP address assigned to the guest operating system, if known. ", alias="ipAddress")
    net: Optional[List[GuestNicInfo]] = Field(default=None, description="Guest information about network adapters, if known. ")
    ip_stack: Optional[List[GuestStackInfo]] = Field(default=None, description="Guest information about IP networking stack, if known.  ***Since:*** vSphere API 4.1 ", alias="ipStack")
    disk: Optional[List[GuestDiskInfo]] = Field(default=None, description="Guest information about disks.  You can obtain Linux guest disk information for the following file system types: Ext2, Ext3, Ext4, ReiserFS, XFS, Btrfs, NTFS, VFAT, UFS, PCFS, HFS, and MS-DOS.  NOTE: Installing a more recent version of VMware Tools in the guest may help obtain disk information for more file system types. Please refer the VMware Tools User Guide for up-to-date supported file system types. ")
    screen: Optional[GuestScreenInfo] = None
    guest_state: StrictStr = Field(description="Operation mode of guest operating system.  One of: - \"running\" - Guest is running normally. - \"shuttingdown\" - Guest has a pending shutdown command. - \"resetting\" - Guest has a pending reset command. - \"standby\" - Guest has a pending standby command. - \"notrunning\" - Guest is not running. - \"unknown\" - Guest information is not available. ", alias="guestState")
    app_heartbeat_status: Optional[StrictStr] = Field(default=None, description="Application heartbeat status.  Please see *VirtualMachineAppHeartbeatStatusType_enum*  ***Since:*** vSphere API 4.1 ", alias="appHeartbeatStatus")
    guest_kernel_crashed: Optional[StrictBool] = Field(default=None, description="Guest operating system's kernel crash state.  If true, the guest operating system's kernel has crashed.  ***Since:*** vSphere API 6.0 ", alias="guestKernelCrashed")
    app_state: Optional[StrictStr] = Field(default=None, description="Application state.  If vSphere HA is enabled and the vm is configured for Application Monitoring and this field's value is \"appStateNeedReset\" then HA will attempt immediately reset the vm. There are some system conditions which may delay the immediate reset. The immediate reset will be performed as soon as allowed by vSphere HA and ESX. If during these conditions the value is changed to appStateOk the reset will be cancelled.  See also *GuestInfoAppStateType_enum*.  ***Since:*** vSphere API 5.5 ", alias="appState")
    guest_operations_ready: Optional[StrictBool] = Field(default=None, description="Guest Operations availability.  If true, the virtual machine is ready to process guest operations.  ***Since:*** vSphere API 5.0 ", alias="guestOperationsReady")
    interactive_guest_operations_ready: Optional[StrictBool] = Field(default=None, description="Interactive Guest Operations availability.  If true, the virtual machine is ready to process guest operations as the user interacting with the guest desktop.  ***Since:*** vSphere API 5.0 ", alias="interactiveGuestOperationsReady")
    guest_state_change_supported: Optional[StrictBool] = Field(default=None, description="State change support.  If true, the virtual machine is ready to process soft power operations.  ***Since:*** vSphere API 6.0 ", alias="guestStateChangeSupported")
    generation_info: Optional[List[GuestInfoNamespaceGenerationInfo]] = Field(default=None, description="A list of namespaces and their corresponding generation numbers.  Only namespaces with non-zero *VirtualMachineNamespaceManagerCreateSpec.maxSizeEventsFromGuest* are guaranteed to be present here. Use *VirtualMachineNamespaceManager.ListNamespaces* to retrieve list of namespaces.  ***Since:*** vSphere API 5.1 ", alias="generationInfo")
    hw_version: Optional[StrictStr] = Field(default=None, description="The hardware version string for this virtual machine.  ***Since:*** vSphere API 6.9.1 ", alias="hwVersion")
    customization_info: Optional[GuestInfoCustomizationInfo] = Field(default=None, alias="customizationInfo")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GuestInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GuestInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


