# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterVmComponentProtectionSettings(DataObject):
    """
    vSphere HA Virtual Machine Component Protection Service settings.  vSphere HA Virtual Machine Component Protection Service detects and reacts to storage failures that do not necessarily cause a virtual machine to go down, but may impact the health or QoS of the virtual machine.  All fields are defined as optional. In case of a reconfiguration, fields left unset are not changed.  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    vm_storage_protection_for_apd: Optional[StrictStr] = Field(default=None, description="VM storage protection setting for storage failures categorized as All Paths Down (APD).  APD is a condition where a storage has become inaccessible for unknown reasons. It only indicates loss of connectivity and does not indicate storage device failure or LUN removal (Permenant Device Loss or PDL). The details of APD and PDL are described in *HostMountInfoInaccessibleReason_enum*.  This property is meaningful only when vSphere HA is turned on. Valid values are specified by *ClusterVmComponentProtectionSettingsStorageVmReaction_enum*. The default value is *disabled* for cluster setting and *clusterDefault* for per-VM setting.  When an APD condition happens and the host begins timing out I/Os (@link vim.host.MountInfo.InaccessibleReason#AllPathsDown\\_Timeout}, VM Component Protection service will react based on the specific value of this property: - ***disabled***, no reaction, i.e., no   VM failover and no event reporting for the failures. - ***warning***, service will issue events,   alarms and/or config issues for component failures. - ***restartConservative***, service will   terminate the impacted VMs after a preconfigured time interval   (*ClusterVmComponentProtectionSettings.vmTerminateDelayForAPDSec*) if they are to be restarted. - ***restartAggressive***, service might   terminate the impacted VMs after a preconfigured time interval   (*ClusterVmComponentProtectionSettings.vmTerminateDelayForAPDSec*). In some cases, a VM is terminated   even if it may not able to be restarted or lose Fault Tolerance redundancy. - ***clusterDefault***, service will implement   cluster default.    ***Since:*** vSphere API 6.0 ", alias="vmStorageProtectionForAPD")
    enable_apd_timeout_for_hosts: Optional[StrictBool] = Field(default=None, description="This property indicates if APD timeout will be enabled for all the hosts in the cluster when vSphere HA is configured.  The details of APD timeout are described in *HostMountInfoInaccessibleReason_enum*.  If *ClusterDasConfigInfo.vmComponentProtecting* is *disabled*, the property will be ignored. Otherwise, for each host in the cluster, APD timeout will be enabled. Note that no change will be made for a host if it already had APD timeout enabled.  This property is meaningful only for cluster setting. It is ignored if specified at VM level. The default value is false if not specified.  Note that this property is not persisted by vSphere backend. It does not impact any cluster reconfiguration or host operation (such as adding a host to a cluster) that might happen later.  ***Since:*** vSphere API 6.0 ", alias="enableAPDTimeoutForHosts")
    vm_terminate_delay_for_apd_sec: Optional[StrictInt] = Field(default=None, description="The time interval after an APD timeout has been declared and before VM Component Protection service will terminate the VM.  The value only applies if *ClusterVmComponentProtectionSettings.vmStorageProtectionForAPD* is set to *restartConservative* or *restartAggressive*.  The default value is 180 seconds if not specified. To use cluster setting for a VM override, set to -1 in per-VM setting.  ***Since:*** vSphere API 6.0 ", alias="vmTerminateDelayForAPDSec")
    vm_reaction_on_apd_cleared: Optional[StrictStr] = Field(default=None, description="Action taken by VM Component Protection service for a powered on VM when APD condition clears after APD timeout.  This property is meaningful only when vSphere HA is turned on. Valid values are specified by *ClusterVmComponentProtectionSettingsVmReactionOnAPDCleared_enum*. The default value is *none* for cluster setting and *useClusterDefault* for per-VM setting.  ***Since:*** vSphere API 6.0 ", alias="vmReactionOnAPDCleared")
    vm_storage_protection_for_pdl: Optional[StrictStr] = Field(default=None, description="VM storage protection setting for storage failures categorized as Permenant Device Loss (PDL).  PDL indicates storage device failure or LUN removal. In case of PDL, the failed datastore or device is unlikely to recover. The details of PDL are described in *HostMountInfoInaccessibleReason_enum*.  This property is meaningful only when vSphere HA is turned on. Valid values are *disabled*, *warning*, *restartAggressive* and *clusterDefault*. The default value is *disabled* for cluster setting and *clusterDefault* for per-VM setting.  When set to *restartAggressive*, VM Component Protection service will immediately terminate the VMs impacted by PDL and will attempt to restart the VMs with best effort. When set to the other values, the behavior is the same as described for *ClusterVmComponentProtectionSettings.vmStorageProtectionForAPD*.  ***Since:*** vSphere API 6.0 ", alias="vmStorageProtectionForPDL")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterVmComponentProtectionSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterVmComponentProtectionSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


