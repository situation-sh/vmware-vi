# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional

from pydantic import Field
from vmware_vi.models.element_description import ElementDescription
from vmware_vi.models.host_feature_capability import HostFeatureCapability
from vmware_vi.models.host_feature_mask import HostFeatureMask
from vmware_vi.models.virtual_machine_feature_requirement import VirtualMachineFeatureRequirement
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FeatureEVCMode(ElementDescription):
    """
    The *FeatureEVCMode* data object describes an Enhanced vMotion Compatibility mode for VMFeature.  An Feature EVC mode is associated with a set of features. This object is modeled after EVCMode, which is more CPU-centric. Members that are specific to CPU are removed in favor of VMFeature EVC properties. For more information about EVC interaction, see *EVCMode*.  The inherited *ElementDescription.key* property is a string value that uniquely identifies an EVC mode. The vCenter Server assigns the key value; the vSphere API uses the key to identify modes in summary and information objects, for example: - *ClusterComputeResourceSummary*.*ClusterComputeResourceSummary.currentEVCGraphicsModeKey* - *HostListSummary*.*HostListSummary.currentEVCGraphicsModeKey*    The inherited *Description.label* and *Description.summary* properties are human-readable strings.  ***Since:*** vSphere API 7.0.1.0 
    """ # noqa: E501
    mask: Optional[List[HostFeatureMask]] = Field(default=None, description="The masks (modifications to a host's feature capabilities) that limit a host's capabilities to that of the EVC mode baseline.  ***Since:*** vSphere API 7.0.1.0 ")
    capability: Optional[List[HostFeatureCapability]] = Field(default=None, description="Describes the feature capability baseline associated with the EVC mode.  On the cluster where a particular EVC mode is configured, these features capabilities are guaranteed, either because the host hardware naturally matches those features or because feature masks are used to mask out differences and enforce a match.  ***Since:*** vSphere API 7.0.1.0 ")
    requirement: Optional[List[VirtualMachineFeatureRequirement]] = Field(default=None, description="The conditions that must be true of a host's feature capabilities in order for the host to meet the minimum requirements of the EVC mode baseline.  ***Since:*** vSphere API 7.0.1.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FeatureEVCMode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FeatureEVCMode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


