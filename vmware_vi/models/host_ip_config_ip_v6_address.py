# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostIpConfigIpV6Address(DataObject):
    """
    The ipv6 address specification  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    ip_address: StrictStr = Field(description="The ipv6 address.  When DHCP is enabled, this property reflects the current IP configuration and cannot be set.  ***Since:*** vSphere API 4.0 ", alias="ipAddress")
    prefix_length: StrictInt = Field(description="The prefix length.  An ipv6 prefixLength is a decimal value that indicates the number of contiguous, higher-order bits of the address that make up the network portion of the address. For example, 10FA:6604:8136:6502::/64 is a possible IPv6 prefix. The prefix length in this case is 64.  ***Since:*** vSphere API 4.0 ", alias="prefixLength")
    origin: Optional[StrictStr] = Field(default=None, description="The type of the ipv6 address configuration on the interface.  This can be one of the types defined my the enum *HostIpConfigIpV6AddressConfigType_enum*.  ***Since:*** vSphere API 4.0 ")
    dad_state: Optional[StrictStr] = Field(default=None, description="The state of this ipAddress.  Can be one of *HostIpConfigIpV6AddressStatus_enum*  ***Since:*** vSphere API 4.0 ", alias="dadState")
    lifetime: Optional[datetime] = Field(default=None, description="The time when will this address expire.  If not set the address lifetime is unlimited.  ***Since:*** vSphere API 4.0 ")
    operation: Optional[StrictStr] = Field(default=None, description="Valid values are \"add\" and \"remove\".  See *HostConfigChangeOperation_enum*.  ***Since:*** vSphere API 4.0 ")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostIpConfigIpV6Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostIpConfigIpV6Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


