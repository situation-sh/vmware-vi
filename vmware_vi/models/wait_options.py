# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WaitOptions(DataObject):
    """
    Options for *PropertyCollector.WaitForUpdatesEx*.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    max_wait_seconds: Optional[StrictInt] = Field(default=None, description="The number of seconds the *PropertyCollector* should wait before returning null.  Returning updates may take longer if the actual calculation time exceeds *WaitOptions.maxWaitSeconds*. Additionally *PropertyCollector* policy may cause it to return null sooner than *WaitOptions.maxWaitSeconds*.  An unset value causes *PropertyCollector.WaitForUpdatesEx* to wait as long as possible for updates. Policy may still cause the *PropertyCollector* to return null at some point.  A value of 0 causes *PropertyCollector.WaitForUpdatesEx* to do one update calculation and return any results. This behavior is similar to *PropertyCollector.CheckForUpdates*.  A positive value causes *PropertyCollector.WaitForUpdatesEx* to return null if no updates are available within the specified number of seconds. The choice of a positive value often depends on the client communication stack. For example it may be helpful to choose a duration shorter than a local HTTP request timeout. Typically it should be no shorter than a few minutes.  A negative value is illegal.  ***Since:*** vSphere API 4.1 ", alias="maxWaitSeconds")
    max_object_updates: Optional[StrictInt] = Field(default=None, description="The maximum number of *ObjectUpdate* entries that should be returned in a single result from *PropertyCollector.WaitForUpdatesEx*.  See *UpdateSet.truncated*  An unset value indicates that there is no maximum. In this case *PropertyCollector* policy may still limit the number of objects that appear in an *UpdateSet*.  A positive value causes *PropertyCollector.WaitForUpdatesEx* to suspend the update calculation when the total count of *ObjectUpdate* entries ready to return reaches the specified maximum. *PropertyCollector* policy may still limit the total count to something less than *WaitOptions.maxObjectUpdates*.  A value less than or equal to 0 is illegal.  ***Since:*** vSphere API 4.1 ", alias="maxObjectUpdates")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WaitOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WaitOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


