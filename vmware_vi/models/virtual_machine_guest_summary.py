# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.virtual_machine_tools_status_enum import VirtualMachineToolsStatusEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineGuestSummary(DataObject):
    """
    A subset of virtual machine guest information. 
    """ # noqa: E501
    guest_id: Optional[StrictStr] = Field(default=None, description="Guest operating system identifier (short name), if known. ", alias="guestId")
    guest_full_name: Optional[StrictStr] = Field(default=None, description="Guest operating system name configured on the virtual machine. ", alias="guestFullName")
    tools_status: Optional[VirtualMachineToolsStatusEnum] = Field(default=None, alias="toolsStatus")
    tools_version_status: Optional[StrictStr] = Field(default=None, description="Deprecated as of vSphere API 5.0 use *VirtualMachineGuestSummary.toolsVersionStatus2*.  Current version status of VMware Tools in the guest operating system, if known.  ***Since:*** vSphere API 4.0 ", alias="toolsVersionStatus")
    tools_version_status2: Optional[StrictStr] = Field(default=None, description="Current version status of VMware Tools in the guest operating system, if known.  ***Since:*** vSphere API 5.0 ", alias="toolsVersionStatus2")
    tools_running_status: Optional[StrictStr] = Field(default=None, description="Current running status of VMware Tools in the guest operating system, if known.  ***Since:*** vSphere API 4.0 ", alias="toolsRunningStatus")
    host_name: Optional[StrictStr] = Field(default=None, description="Hostname of the guest operating system, if known. ", alias="hostName")
    ip_address: Optional[StrictStr] = Field(default=None, description="Primary IP address assigned to the guest operating system, if known. ", alias="ipAddress")
    hw_version: Optional[StrictStr] = Field(default=None, description="The hardware version string for this virtual machine.  ***Since:*** vSphere API 6.9.1 ", alias="hwVersion")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineGuestSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineGuestSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


