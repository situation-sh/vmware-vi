# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StorageIORMInfo(DataObject):
    """
    Configuration of storage I/O resource management.  ***Since:*** vSphere API 4.1 
    """ # noqa: E501
    enabled: StrictBool = Field(description="Flag indicating whether or not the service is enabled.  ***Since:*** vSphere API 4.1 ")
    congestion_threshold_mode: StrictStr = Field(description="Mode of congestion threshold specification For more information, see *StorageIORMThresholdMode_enum*  ***Since:*** vSphere API 5.1 ", alias="congestionThresholdMode")
    congestion_threshold: StrictInt = Field(description="The latency beyond which the storage array is considered congested.  If storage I/O resource management is enabled on a datastore, the algorithm tries to maintain the latency to be below or close to this value. The unit is millisecond. The range of this value is between 5 to 100 milliseconds.  ***Since:*** vSphere API 4.1 ", alias="congestionThreshold")
    percent_of_peak_throughput: Optional[StrictInt] = Field(default=None, description="The percentage of peak throughput to be used for setting congestion threshold of a datastore.  Valid values are between 50 to 100. Default value is 90%  For more information, see *StorageIORMInfo.congestionThreshold*  ***Since:*** vSphere API 5.1 ", alias="percentOfPeakThroughput")
    stats_collection_enabled: StrictBool = Field(description="Deprecated as of vSphere API 6.5, use *StorageIORMInfo.enabled* instead.  Flag indicating whether service is running in stats collection mode.  ***Since:*** vSphere API 5.0 ", alias="statsCollectionEnabled")
    reservation_enabled: StrictBool = Field(description="Flag indicating whether IO reservations support is enabled.  ***Since:*** vSphere API 6.0 ", alias="reservationEnabled")
    stats_aggregation_disabled: Optional[StrictBool] = Field(default=None, description="Flag indicating whether stats aggregation is disabled.  ***Since:*** vSphere API 5.0 ", alias="statsAggregationDisabled")
    reservable_iops_threshold: Optional[StrictInt] = Field(default=None, description="Storage DRS makes storage migration recommendations if total IOPs reservation for all VMs running on the datastore is higher than specified threshold value.  This value (if present) overrides  ***Since:*** vSphere API 6.0 ", alias="reservableIopsThreshold")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StorageIORMInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StorageIORMInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


