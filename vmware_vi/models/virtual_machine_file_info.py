# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualMachineFileInfo(DataObject):
    """
    The FileInfo data object type contains the locations of virtual machine files other than the virtual disk files.  The configurable parameters are all in the FileInfo object.  The object also contains a FileLayout object that returns a complete list of additional files that makes up the virtual machine configuration. This is a read-only structure and is returned when the configuration is read. This is ignored during configuration and can be left out. 
    """ # noqa: E501
    vm_path_name: Optional[StrictStr] = Field(default=None, description="Path name to the configuration file for the virtual machine, e.g., the .vmx file.  This also implicitly defines the configuration directory. ", alias="vmPathName")
    snapshot_directory: Optional[StrictStr] = Field(default=None, description="Path name of the directory that holds suspend and snapshot files belonging to the virtual machine.  Prior to vSphere 5.0, this directory also holds snapshot redo files. Starting with vSphere 5.0, the redo files will stay in the same directory as the snapshotted disk, thus this directory will no longer hold the snapshot redo files.  This path name defaults to the same directory as the configuration file.  ESX Server requires this to indicate a VMFS volume or NAS volume (for ESX Server 3). In case the configuration file is not stored on VMFS or NAS, this property must be set explicitly. ", alias="snapshotDirectory")
    suspend_directory: Optional[StrictStr] = Field(default=None, description="Some products allow the suspend directory to be different than the snapshot directory.  On products where this is not possible, setting of this property is ignored. ", alias="suspendDirectory")
    log_directory: Optional[StrictStr] = Field(default=None, description="Directory to store the log files for the virtual machine.  If not specified, this defaults to the same directory as the configuration file, ", alias="logDirectory")
    ft_metadata_directory: Optional[StrictStr] = Field(default=None, description="Directory to store the fault tolerance meta data files for the virtual machine.  ***Since:*** vSphere API 6.0 ", alias="ftMetadataDirectory")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualMachineFileInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualMachineFileInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


