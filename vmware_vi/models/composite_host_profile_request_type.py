# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from vmware_vi.models.host_apply_profile import HostApplyProfile
from vmware_vi.models.managed_object_reference import ManagedObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompositeHostProfileRequestType(BaseModel):
    """
    The parameters of *HostProfileManager.CompositeHostProfile_Task*. 
    """ # noqa: E501
    source: ManagedObjectReference
    targets: Optional[List[ManagedObjectReference]] = None
    to_be_merged: Optional[HostApplyProfile] = Field(default=None, alias="toBeMerged")
    to_be_replaced_with: Optional[HostApplyProfile] = Field(default=None, alias="toBeReplacedWith")
    to_be_deleted: Optional[HostApplyProfile] = Field(default=None, alias="toBeDeleted")
    enable_status_to_be_copied: Optional[HostApplyProfile] = Field(default=None, alias="enableStatusToBeCopied")
    __properties: ClassVar[List[str]] = ["source", "targets", "toBeMerged", "toBeReplacedWith", "toBeDeleted", "enableStatusToBeCopied"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompositeHostProfileRequestType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item in self.targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of to_be_merged
        if self.to_be_merged:
            _dict['toBeMerged'] = self.to_be_merged.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_be_replaced_with
        if self.to_be_replaced_with:
            _dict['toBeReplacedWith'] = self.to_be_replaced_with.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_be_deleted
        if self.to_be_deleted:
            _dict['toBeDeleted'] = self.to_be_deleted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_status_to_be_copied
        if self.enable_status_to_be_copied:
            _dict['enableStatusToBeCopied'] = self.enable_status_to_be_copied.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompositeHostProfileRequestType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": ManagedObjectReference.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "targets": [ManagedObjectReference.from_dict(_item) for _item in obj.get("targets")] if obj.get("targets") is not None else None,
            "toBeMerged": HostApplyProfile.from_dict(obj.get("toBeMerged")) if obj.get("toBeMerged") is not None else None,
            "toBeReplacedWith": HostApplyProfile.from_dict(obj.get("toBeReplacedWith")) if obj.get("toBeReplacedWith") is not None else None,
            "toBeDeleted": HostApplyProfile.from_dict(obj.get("toBeDeleted")) if obj.get("toBeDeleted") is not None else None,
            "enableStatusToBeCopied": HostApplyProfile.from_dict(obj.get("enableStatusToBeCopied")) if obj.get("enableStatusToBeCopied") is not None else None
        })
        return _obj


