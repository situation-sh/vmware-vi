# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.distributed_virtual_switch_host_member_transport_zone_info import DistributedVirtualSwitchHostMemberTransportZoneInfo
from vmware_vi.models.host_proxy_switch_ens_info import HostProxySwitchEnsInfo
from vmware_vi.models.host_proxy_switch_host_lag_config import HostProxySwitchHostLagConfig
from vmware_vi.models.host_proxy_switch_spec import HostProxySwitchSpec
from vmware_vi.models.key_value import KeyValue
from vmware_vi.models.physical_nic import PhysicalNic
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostProxySwitch(DataObject):
    """
    The HostProxySwitch is a software entity which represents the component of a DistributedVirtualSwitch on a particular host.  ***Since:*** vSphere API 4.0 
    """ # noqa: E501
    dvs_uuid: StrictStr = Field(description="The uuid of the DistributedVirtualSwitch that the HostProxySwitch is a part of.  ***Since:*** vSphere API 4.0 ", alias="dvsUuid")
    dvs_name: StrictStr = Field(description="The name of the DistributedVirtualSwitch that the HostProxySwitch is part of.  ***Since:*** vSphere API 4.0 ", alias="dvsName")
    key: StrictStr = Field(description="The proxy switch key.  ***Since:*** vSphere API 4.0 ")
    num_ports: StrictInt = Field(description="The number of ports that this switch currently has.  ***Since:*** vSphere API 4.0 ", alias="numPorts")
    config_num_ports: Optional[StrictInt] = Field(default=None, description="The configured number of ports that this switch has.  If configured number of ports is changed, a host reboot is required for the new value to take effect.  ***Since:*** vSphere API 5.0 ", alias="configNumPorts")
    num_ports_available: StrictInt = Field(description="The number of ports that are available on this virtual switch.  ***Since:*** vSphere API 4.0 ", alias="numPortsAvailable")
    uplink_port: Optional[List[KeyValue]] = Field(default=None, description="The list of ports that can be potentially used by physical nics.  This property contains the keys and names of such ports.  ***Since:*** vSphere API 4.0 ", alias="uplinkPort")
    mtu: Optional[StrictInt] = Field(default=None, description="The maximum transmission unit (MTU) associated with this switch in bytes.  ***Since:*** vSphere API 4.0 ")
    pnic: Optional[List[PhysicalNic]] = Field(default=None, description="The set of physical network adapters associated with this switch.  ***Since:*** vSphere API 4.0 ")
    spec: HostProxySwitchSpec
    host_lag: Optional[List[HostProxySwitchHostLagConfig]] = Field(default=None, description="The Link Aggregation Control Protocol group and Uplink ports in the group.  ***Since:*** vSphere API 5.5 ", alias="hostLag")
    network_reservation_supported: Optional[StrictBool] = Field(default=None, description="Indicates whether network reservation is supported on this switch  ***Since:*** vSphere API 5.5 ", alias="networkReservationSupported")
    nsxt_enabled: Optional[StrictBool] = Field(default=None, description="Indicate whether NSX-T is enabled on this switch  ***Since:*** vSphere API 7.0 ", alias="nsxtEnabled")
    ens_enabled: Optional[StrictBool] = Field(default=None, description="Is ENS enabled on this switch  ***Since:*** vSphere API 7.0 ", alias="ensEnabled")
    ens_interrupt_enabled: Optional[StrictBool] = Field(default=None, description="Is ENS interrupt mode enabled on this switch  ***Since:*** vSphere API 7.0 ", alias="ensInterruptEnabled")
    transport_zones: Optional[List[DistributedVirtualSwitchHostMemberTransportZoneInfo]] = Field(default=None, description="Transport Zones this switch joined  ***Since:*** vSphere API 7.0 ", alias="transportZones")
    nsx_used_uplink_port: Optional[List[StrictStr]] = Field(default=None, description="Uplink port names used by NSX-T  ***Since:*** vSphere API 7.0 ", alias="nsxUsedUplinkPort")
    nsxt_status: Optional[StrictStr] = Field(default=None, description="NSX-T proxy switch status  ***Since:*** vSphere API 7.0 ", alias="nsxtStatus")
    nsxt_status_detail: Optional[StrictStr] = Field(default=None, description="Additional information regarding the NSX-T proxy switch status  ***Since:*** vSphere API 7.0 ", alias="nsxtStatusDetail")
    ens_info: Optional[HostProxySwitchEnsInfo] = Field(default=None, alias="ensInfo")
    network_offloading_enabled: Optional[StrictBool] = Field(default=None, description="Indicate if network offloading is enabled on the proxy switch of this host.  Unset implies that network offloading is disabled. ", alias="networkOffloadingEnabled")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostProxySwitch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostProxySwitch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


