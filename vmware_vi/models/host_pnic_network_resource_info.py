# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_placed_virtual_nic_identifier import HostPlacedVirtualNicIdentifier
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostPnicNetworkResourceInfo(DataObject):
    """
    This data type describes the avaialable capacity for VM traffic on a physical NIC  ***Since:*** vSphere API 6.0 
    """ # noqa: E501
    pnic_device: StrictStr = Field(description="The physical NIC device  ***Since:*** vSphere API 6.0 ", alias="pnicDevice")
    available_bandwidth_for_vm_traffic: Optional[StrictInt] = Field(default=None, description="The total bandwidth available for VM traffic  ***Since:*** vSphere API 6.0 ", alias="availableBandwidthForVMTraffic")
    unused_bandwidth_for_vm_traffic: Optional[StrictInt] = Field(default=None, description="The unused bandwidth for VM traffic  ***Since:*** vSphere API 6.0 ", alias="unusedBandwidthForVMTraffic")
    placed_virtual_nics: Optional[List[HostPlacedVirtualNicIdentifier]] = Field(default=None, description="The connected virtual NICs of powered on Virtual Machines that are placed on this physical NIC  ***Since:*** vSphere API 6.0 ", alias="placedVirtualNics")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostPnicNetworkResourceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostPnicNetworkResourceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


