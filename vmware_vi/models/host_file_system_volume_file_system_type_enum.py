# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class HostFileSystemVolumeFileSystemTypeEnum(str, Enum):
    """
    Type of file system volume.  Possible values: - `VMFS`: VMware File System (ESX Server only).      If this is set,   the type of the file system volume is VMFS. - `NFS`: Network file system v3 linux &amp; esx servers only.      If this is   set, the type of the file system volume is NFS v3. - `NFS41`: Network file system v4.1 linux &amp; esx servers only.      If this is   set, the type of the file system volume is NFS v4.1 or later.      ***Since:*** vSphere API 6.0 - `CIFS`: Common Internet File System.      If this is set, the type of the   file system volume is Common Internet File System. - `vsan`: VSAN File System (ESX Server only).      ***Since:*** vSphere API 6.0 - `VFFS`: vFlash File System (ESX Server only).      If this is set, the type of the file system volume is VFFS.      ***Since:*** vSphere API 6.0 - `VVOL`: vvol File System (ESX Server only).      ***Since:*** vSphere API 6.0 - `PMEM`: Persistent Memory File System (ESX Server only).      ***Since:*** vSphere API 6.7 - `vsanD`: VSAN direct file system.      ***Since:*** vSphere API 7.0.1.0 - `OTHER`: Used if the file system is not one of the specified file systems.      Used mostly for reporting purposes. The other types are described   by the otherType property.  ***Since:*** vSphere API 6.0 
    """

    """
    allowed enum values
    """
    VMFS = 'VMFS'
    NFS = 'NFS'
    NFS41 = 'NFS41'
    CIFS = 'CIFS'
    VSAN = 'vsan'
    VFFS = 'VFFS'
    VVOL = 'VVOL'
    PMEM = 'PMEM'
    VSAND = 'vsanD'
    OTHER = 'OTHER'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostFileSystemVolumeFileSystemTypeEnum from a JSON string"""
        return cls(json.loads(json_str))


