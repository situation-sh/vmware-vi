# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.host_scsi_disk_partition import HostScsiDiskPartition
from vmware_vi.models.vmfs_unmap_bandwidth_spec import VmfsUnmapBandwidthSpec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HostVmfsSpec(DataObject):
    """
    This data object type describes the VMware File System (VMFS) creation specification.  Once created, these properties for the most part cannot be changed. There are a few exceptions. 
    """ # noqa: E501
    extent: HostScsiDiskPartition
    block_size_mb: Optional[StrictInt] = Field(default=None, description="Deprecated as of vSphere API 6.5, use *HostVmfsSpec.blockSize* instead.  The block size of VMFS in megabytes (MB).  Determines the maximum file size. If this optional property is not set, the maximum file size defaults to the maximum file size for the platform.  In VMFS2, the valid block sizes 1MB, 2MB, 4MB, 8MB, 16MB, 32MB, 64MB, 128MB, and 256MB. In VMFS3, the valid block sizes are 1MB, 2MB, 4MB, and 8MB. In VMFS5, the only valid block size is 1MB. ", alias="blockSizeMb")
    major_version: StrictInt = Field(description="Major version number of VMFS.  This can be changed if the VMFS is upgraded, but this is an irreversible change. ", alias="majorVersion")
    volume_name: StrictStr = Field(description="Volume name of VMFS. ", alias="volumeName")
    block_size: Optional[StrictInt] = Field(default=None, description="The block size of VMFS in kilotypes (KB).  Determines the maximum file size. If this optional property is not set, the maximum file size defaults to the maximum file size for the platform.  In VMFS3, the valid block sizes are 1MB, 2MB, 4MB, and 8MB. In VMFS5, the only valid block size is 1MB. In VMFS6, the valid block sizes are 64KB and 1MB.  ***Since:*** vSphere API 6.5 ", alias="blockSize")
    unmap_granularity: Optional[StrictInt] = Field(default=None, description="The granularity of VMFS unmap operations.  VMFS unmap reclaims unused storage space. The unit is KB. The minimum unmap granularity is 8KB. The maximum unmap granularity is determined by the block size of VMFS *HostVmfsVolume.blockSize*.  ***Since:*** vSphere API 6.5 ", alias="unmapGranularity")
    unmap_priority: Optional[StrictStr] = Field(default=None, description="VMFS unmap priority.  VMFS unmap reclaims unused storage space. This determines the processing rate of unmaps. See *HostVmfsVolumeUnmapPriority_enum* for supported values.  ***Since:*** vSphere API 6.5 ", alias="unmapPriority")
    unmap_bandwidth_spec: Optional[VmfsUnmapBandwidthSpec] = Field(default=None, alias="unmapBandwidthSpec")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HostVmfsSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HostVmfsSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


