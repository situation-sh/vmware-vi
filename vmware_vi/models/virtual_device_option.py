# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import StrictBool, StrictInt, StrictStr
from pydantic import Field
from vmware_vi.models.bool_option import BoolOption
from vmware_vi.models.data_object import DataObject
from vmware_vi.models.virtual_device_backing_option import VirtualDeviceBackingOption
from vmware_vi.models.virtual_device_bus_slot_option import VirtualDeviceBusSlotOption
from vmware_vi.models.virtual_device_connect_option import VirtualDeviceConnectOption
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualDeviceOption(DataObject):
    """
    The VirtualDeviceOption data object type contains information about a virtual device type, the options for configuring the virtual device, and the relationship between this virtual device and other devices.  The vSphere API groups device configurations that are mutually exclusive into different configuration objects; each of these configuration objects may define subtypes for virtual device backing options that are independent of the virtual device. Backing-dependent options should appear in a subtype of *VirtualDeviceBackingOption*. 
    """ # noqa: E501
    type: StrictStr = Field(description="The name of the run-time class the client should instantiate to create a run-time instance of this device. ")
    connect_option: Optional[VirtualDeviceConnectOption] = Field(default=None, alias="connectOption")
    bus_slot_option: Optional[VirtualDeviceBusSlotOption] = Field(default=None, alias="busSlotOption")
    controller_type: Optional[StrictStr] = Field(default=None, description="Data object type that denotes the controller option object that is valid for controlling this device. ", alias="controllerType")
    auto_assign_controller: Optional[BoolOption] = Field(default=None, alias="autoAssignController")
    backing_option: Optional[List[VirtualDeviceBackingOption]] = Field(default=None, description="A list of backing options that can be used to map the virtual device to the host.  The list is optional, since some devices exist only within the virtual machine; for example, a VirtualController. ", alias="backingOption")
    default_backing_option_index: Optional[StrictInt] = Field(default=None, description="Index into the backingOption list, indicating the default backing. ", alias="defaultBackingOptionIndex")
    licensing_limit: Optional[List[StrictStr]] = Field(default=None, description="List of property names enforced by a licensing restriction of the underlying product.  For example, a limit that is not derived based on the product or hardware features; the property name \"numCPU\". ", alias="licensingLimit")
    deprecated: StrictBool = Field(description="Indicates whether this device is deprecated.  Hence, if set the device cannot be used when creating a new virtual machine or be added to an existing virtual machine. However, the device is still supported by the platform. ")
    plug_and_play: StrictBool = Field(description="Indicates if this type of device can be hot-added to the virtual machine via a reconfigure operation when the virtual machine is powered on. ", alias="plugAndPlay")
    hot_remove_supported: StrictBool = Field(description="Indicates if this type of device can be hot-removed from the virtual machine via a reconfigure operation when the virtual machine is powered on.  ***Since:*** vSphere API 4.0 ", alias="hotRemoveSupported")
    numa_supported: Optional[StrictBool] = Field(default=None, alias="numaSupported")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[List[str]] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ArrayOfAnyURI': 'ArrayOfURI','ArrayOfBase64Binary': 'ArrayOfBinary','ArrayOfPropertyPath': 'ArrayOfPropPath','MethodName': 'PrimitiveMethodName','PropertyPath': 'PrimitivePropPath','TypeName': 'PrimitiveTypeName','anyURI': 'PrimitiveURI','base64Binary': 'PrimitiveBinary','boolean': 'PrimitiveBoolean','byte': 'PrimitiveByte','dateTime': 'PrimitiveDateTime','double': 'PrimitiveDouble','float': 'PrimitiveFloat','int': 'PrimitiveInt','long': 'PrimitiveLong','short': 'PrimitiveShort','string': 'PrimitiveString','ParaVirtualSCSIControllerOption': 'ParaVirtualSCSIControllerOption','VirtualAHCIControllerOption': 'VirtualAHCIControllerOption','VirtualBusLogicControllerOption': 'VirtualBusLogicControllerOption','VirtualCdromOption': 'VirtualCdromOption','VirtualControllerOption': 'VirtualControllerOption','VirtualDiskOption': 'VirtualDiskOption','VirtualE1000Option': 'VirtualE1000Option','VirtualE1000eOption': 'VirtualE1000eOption','VirtualEnsoniq1371Option': 'VirtualEnsoniq1371Option','VirtualEthernetCardOption': 'VirtualEthernetCardOption','VirtualFloppyOption': 'VirtualFloppyOption','VirtualHdAudioCardOption': 'VirtualHdAudioCardOption','VirtualIDEControllerOption': 'VirtualIDEControllerOption','VirtualKeyboardOption': 'VirtualKeyboardOption','VirtualLsiLogicControllerOption': 'VirtualLsiLogicControllerOption','VirtualLsiLogicSASControllerOption': 'VirtualLsiLogicSASControllerOption','VirtualMachineVMCIDeviceOption': 'VirtualMachineVMCIDeviceOption','VirtualNVDIMMControllerOption': 'VirtualNVDIMMControllerOption','VirtualNVDIMMOption': 'VirtualNVDIMMOption','VirtualNVMEControllerOption': 'VirtualNVMEControllerOption','VirtualPCIControllerOption': 'VirtualPCIControllerOption','VirtualPCIPassthroughOption': 'VirtualPCIPassthroughOption','VirtualPCNet32Option': 'VirtualPCNet32Option','VirtualPS2ControllerOption': 'VirtualPS2ControllerOption','VirtualParallelPortOption': 'VirtualParallelPortOption','VirtualPointingDeviceOption': 'VirtualPointingDeviceOption','VirtualPrecisionClockOption': 'VirtualPrecisionClockOption','VirtualSATAControllerOption': 'VirtualSATAControllerOption','VirtualSCSIControllerOption': 'VirtualSCSIControllerOption','VirtualSCSIPassthroughOption': 'VirtualSCSIPassthroughOption','VirtualSIOControllerOption': 'VirtualSIOControllerOption','VirtualSerialPortOption': 'VirtualSerialPortOption','VirtualSoundBlaster16Option': 'VirtualSoundBlaster16Option','VirtualSoundCardOption': 'VirtualSoundCardOption','VirtualSriovEthernetCardOption': 'VirtualSriovEthernetCardOption','VirtualTPMOption': 'VirtualTPMOption','VirtualUSBControllerOption': 'VirtualUSBControllerOption','VirtualUSBOption': 'VirtualUSBOption','VirtualUSBXHCIControllerOption': 'VirtualUSBXHCIControllerOption','VirtualVMIROMOption': 'VirtualVMIROMOption','VirtualVideoCardOption': 'VirtualVideoCardOption','VirtualVmxnet2Option': 'VirtualVmxnet2Option','VirtualVmxnet3Option': 'VirtualVmxnet3Option','VirtualVmxnet3VrdmaOption': 'VirtualVmxnet3VrdmaOption','VirtualVmxnetOption': 'VirtualVmxnetOption','VirtualWDTOption': 'VirtualWDTOption'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualDeviceOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]:
        """Create an instance of VirtualDeviceOption from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("VirtualDeviceOption failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from vmware_vi.models.array_of_binary import ArrayOfBinary
from vmware_vi.models.array_of_prop_path import ArrayOfPropPath
from vmware_vi.models.array_of_uri import ArrayOfURI
from vmware_vi.models.para_virtual_scsi_controller_option import ParaVirtualSCSIControllerOption
from vmware_vi.models.primitive_binary import PrimitiveBinary
from vmware_vi.models.primitive_boolean import PrimitiveBoolean
from vmware_vi.models.primitive_byte import PrimitiveByte
from vmware_vi.models.primitive_date_time import PrimitiveDateTime
from vmware_vi.models.primitive_double import PrimitiveDouble
from vmware_vi.models.primitive_float import PrimitiveFloat
from vmware_vi.models.primitive_int import PrimitiveInt
from vmware_vi.models.primitive_long import PrimitiveLong
from vmware_vi.models.primitive_method_name import PrimitiveMethodName
from vmware_vi.models.primitive_prop_path import PrimitivePropPath
from vmware_vi.models.primitive_short import PrimitiveShort
from vmware_vi.models.primitive_string import PrimitiveString
from vmware_vi.models.primitive_type_name import PrimitiveTypeName
from vmware_vi.models.primitive_uri import PrimitiveURI
from vmware_vi.models.virtual_ahci_controller_option import VirtualAHCIControllerOption
from vmware_vi.models.virtual_bus_logic_controller_option import VirtualBusLogicControllerOption
from vmware_vi.models.virtual_cdrom_option import VirtualCdromOption
from vmware_vi.models.virtual_controller_option import VirtualControllerOption
from vmware_vi.models.virtual_disk_option import VirtualDiskOption
from vmware_vi.models.virtual_e1000_option import VirtualE1000Option
from vmware_vi.models.virtual_e1000e_option import VirtualE1000eOption
from vmware_vi.models.virtual_ensoniq1371_option import VirtualEnsoniq1371Option
from vmware_vi.models.virtual_ethernet_card_option import VirtualEthernetCardOption
from vmware_vi.models.virtual_floppy_option import VirtualFloppyOption
from vmware_vi.models.virtual_hd_audio_card_option import VirtualHdAudioCardOption
from vmware_vi.models.virtual_ide_controller_option import VirtualIDEControllerOption
from vmware_vi.models.virtual_keyboard_option import VirtualKeyboardOption
from vmware_vi.models.virtual_lsi_logic_controller_option import VirtualLsiLogicControllerOption
from vmware_vi.models.virtual_lsi_logic_sas_controller_option import VirtualLsiLogicSASControllerOption
from vmware_vi.models.virtual_machine_vmci_device_option import VirtualMachineVMCIDeviceOption
from vmware_vi.models.virtual_nvdimm_controller_option import VirtualNVDIMMControllerOption
from vmware_vi.models.virtual_nvdimm_option import VirtualNVDIMMOption
from vmware_vi.models.virtual_nvme_controller_option import VirtualNVMEControllerOption
from vmware_vi.models.virtual_parallel_port_option import VirtualParallelPortOption
from vmware_vi.models.virtual_pc_net32_option import VirtualPCNet32Option
from vmware_vi.models.virtual_pci_controller_option import VirtualPCIControllerOption
from vmware_vi.models.virtual_pci_passthrough_option import VirtualPCIPassthroughOption
from vmware_vi.models.virtual_pointing_device_option import VirtualPointingDeviceOption
from vmware_vi.models.virtual_precision_clock_option import VirtualPrecisionClockOption
from vmware_vi.models.virtual_ps2_controller_option import VirtualPS2ControllerOption
from vmware_vi.models.virtual_sata_controller_option import VirtualSATAControllerOption
from vmware_vi.models.virtual_scsi_controller_option import VirtualSCSIControllerOption
from vmware_vi.models.virtual_scsi_passthrough_option import VirtualSCSIPassthroughOption
from vmware_vi.models.virtual_serial_port_option import VirtualSerialPortOption
from vmware_vi.models.virtual_sio_controller_option import VirtualSIOControllerOption
from vmware_vi.models.virtual_sound_blaster16_option import VirtualSoundBlaster16Option
from vmware_vi.models.virtual_sound_card_option import VirtualSoundCardOption
from vmware_vi.models.virtual_sriov_ethernet_card_option import VirtualSriovEthernetCardOption
from vmware_vi.models.virtual_tpm_option import VirtualTPMOption
from vmware_vi.models.virtual_usb_controller_option import VirtualUSBControllerOption
from vmware_vi.models.virtual_usb_option import VirtualUSBOption
from vmware_vi.models.virtual_usbxhci_controller_option import VirtualUSBXHCIControllerOption
from vmware_vi.models.virtual_video_card_option import VirtualVideoCardOption
from vmware_vi.models.virtual_vmirom_option import VirtualVMIROMOption
from vmware_vi.models.virtual_vmxnet2_option import VirtualVmxnet2Option
from vmware_vi.models.virtual_vmxnet3_option import VirtualVmxnet3Option
from vmware_vi.models.virtual_vmxnet3_vrdma_option import VirtualVmxnet3VrdmaOption
from vmware_vi.models.virtual_vmxnet_option import VirtualVmxnetOption
from vmware_vi.models.virtual_wdt_option import VirtualWDTOption
# TODO: Rewrite to not use raise_errors
VirtualDeviceOption.model_rebuild(raise_errors=False)

