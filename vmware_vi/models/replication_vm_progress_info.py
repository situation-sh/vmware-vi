# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import StrictInt
from pydantic import Field
from vmware_vi.models.data_object import DataObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ReplicationVmProgressInfo(DataObject):
    """
    A set of statistics related to the progress of the current operation (full sync or lwd).  ***Since:*** vSphere API 5.0 
    """ # noqa: E501
    progress: StrictInt = Field(description="An estimation of the operation progress as a percentage completed, from 0 to 100.  ***Since:*** vSphere API 5.0 ")
    bytes_transferred: StrictInt = Field(description="Number of bytes transferred so far.  For sync operations, this value includes (i.e. counts multiple times) areas that were transferred multiple times (due to stopping and continuing the operation, or for some errors).  ***Since:*** vSphere API 5.0 ", alias="bytesTransferred")
    bytes_to_transfer: StrictInt = Field(description="The total number of bytes to be transferred.  For lwd operations, this is the total size of the disk images that are transferring. This is known from the start and will not change during a lwd operation.  For sync operations, this is the total size of the blocks that have been found not to match between the primary and secondary (by comparing checksums). It starts from 0 and grows as the checksum operations advance. The value includes (i.e. counts multiple times) areas that will end up being transferred more than once (due to stopping and continuing the operation, or for some errors).  ***Since:*** vSphere API 5.0 ", alias="bytesToTransfer")
    checksum_total_bytes: Optional[StrictInt] = Field(default=None, description="The total number of bytes to be checksummed, only present for sync tasks.  This is the total size of all disks.  ***Since:*** vSphere API 5.0 ", alias="checksumTotalBytes")
    checksum_compared_bytes: Optional[StrictInt] = Field(default=None, description="The total number of bytes that were checksummed, only present for sync tasks.  ***Since:*** vSphere API 5.0 ", alias="checksumComparedBytes")
    __properties: ClassVar[List[str]] = ["_typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ReplicationVmProgressInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ReplicationVmProgressInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_typeName": obj.get("_typeName")
        })
        return _obj


