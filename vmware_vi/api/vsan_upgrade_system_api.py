# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr

from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.perform_vsan_upgrade_preflight_check_request_type import PerformVsanUpgradePreflightCheckRequestType
from vmware_vi.models.perform_vsan_upgrade_request_type import PerformVsanUpgradeRequestType
from vmware_vi.models.query_vsan_upgrade_status_request_type import QueryVsanUpgradeStatusRequestType
from vmware_vi.models.vsan_upgrade_system_preflight_check_result import VsanUpgradeSystemPreflightCheckResult
from vmware_vi.models.vsan_upgrade_system_upgrade_status import VsanUpgradeSystemUpgradeStatus

from vmware_vi.api_client import ApiClient
from vmware_vi.api_response import ApiResponse
from vmware_vi.rest import RESTResponseType


class VsanUpgradeSystemApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def vsan_upgrade_system_perform_vsan_upgrade_preflight_check(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        perform_vsan_upgrade_preflight_check_request_type: PerformVsanUpgradePreflightCheckRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VsanUpgradeSystemPreflightCheckResult:
        """Perform an upgrade pre-flight check on a cluster. 

        Perform an upgrade pre-flight check on a cluster.  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param perform_vsan_upgrade_preflight_check_request_type: (required)
        :type perform_vsan_upgrade_preflight_check_request_type: PerformVsanUpgradePreflightCheckRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_perform_vsan_upgrade_preflight_check_serialize(
            mo_id=mo_id,
            perform_vsan_upgrade_preflight_check_request_type=perform_vsan_upgrade_preflight_check_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsanUpgradeSystemPreflightCheckResult",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vsan_upgrade_system_perform_vsan_upgrade_preflight_check_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        perform_vsan_upgrade_preflight_check_request_type: PerformVsanUpgradePreflightCheckRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VsanUpgradeSystemPreflightCheckResult]:
        """Perform an upgrade pre-flight check on a cluster. 

        Perform an upgrade pre-flight check on a cluster.  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param perform_vsan_upgrade_preflight_check_request_type: (required)
        :type perform_vsan_upgrade_preflight_check_request_type: PerformVsanUpgradePreflightCheckRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_perform_vsan_upgrade_preflight_check_serialize(
            mo_id=mo_id,
            perform_vsan_upgrade_preflight_check_request_type=perform_vsan_upgrade_preflight_check_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsanUpgradeSystemPreflightCheckResult",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vsan_upgrade_system_perform_vsan_upgrade_preflight_check_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        perform_vsan_upgrade_preflight_check_request_type: PerformVsanUpgradePreflightCheckRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Perform an upgrade pre-flight check on a cluster. 

        Perform an upgrade pre-flight check on a cluster.  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param perform_vsan_upgrade_preflight_check_request_type: (required)
        :type perform_vsan_upgrade_preflight_check_request_type: PerformVsanUpgradePreflightCheckRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_perform_vsan_upgrade_preflight_check_serialize(
            mo_id=mo_id,
            perform_vsan_upgrade_preflight_check_request_type=perform_vsan_upgrade_preflight_check_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsanUpgradeSystemPreflightCheckResult",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vsan_upgrade_system_perform_vsan_upgrade_preflight_check_serialize(
        self,
        mo_id,
        perform_vsan_upgrade_preflight_check_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if perform_vsan_upgrade_preflight_check_request_type is not None:
            _body_params = perform_vsan_upgrade_preflight_check_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/VsanUpgradeSystem/{moId}/PerformVsanUpgradePreflightCheck',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vsan_upgrade_system_perform_vsan_upgrade_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        perform_vsan_upgrade_request_type: PerformVsanUpgradeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Start VSAN on-disk format upgrade process on a particular cluster. 

        Start VSAN on-disk format upgrade process on a particular cluster.  In order to perform this on-disk format upgrade, the upgrade process will perform a rolling evacuation/remove/re-add operation to accomplish the upgrade. In other words, one disk group at a time, it will evacuate the data from the disk group, then remove the old format from the now empty disk group, then reformat the disk group with the new format. Once all disk groups have been upgraded, and if the performObjectUpgrade parameter is set, the VSAN object version is also upgraded. Before the object version is upgraded, it is possible to downgrade the cluster by passing the downgradeFormat parameter. Once objects are of the new object version however, downgrade (and thus rollback) are no longer possible. The new object version is required to allow objects to benefit from new VSAN features. This is a long running (hours to days) task. In addition to normal task progress reporting, use the queryUpgradeStatus() API which allows to retrieve in-depth status updates from the upgrade process. In there will be a detailed log of every operation the upgrade process has taken or issues it encountered. Some are simple log messages, others refer to operations like evacuating a disk group. For such log entries, the task object of the evacuation task is provided to allow \"sub-task\" tracking. Before starting, the upgrade process will perform a pre-flight check, and abort if any of the pre-conditions are not met. See  See also *VsanUpgradeSystem.PerformVsanUpgradePreflightCheck*for details on the pre-conditions being checked for. The upgrade process performs additional \"pre-flight checks\" before proceeding to upgrade the next host. The upgrade process will be halted if any of those pre-flight checks fail. If the upgrade process has been halted due to a problem, or even due to a crash or other failure, it can be re-started at any point in time. The upgrade will resume where it left off and only do the parts that are still outstanding. If the upgrade process stopped after removing VSAN from a disk group, but before re-adding those disks to VSAN, the upgrade process can recover from that. The pre-flight check results indicate such a condition. The upgrade process will however only re-add those disks if the restoreBackup parameter is passed in as true. Privilege \"Host.Config.Storage\" on all hosts under specified cluster is required..  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param perform_vsan_upgrade_request_type: (required)
        :type perform_vsan_upgrade_request_type: PerformVsanUpgradeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_perform_vsan_upgrade_task_serialize(
            mo_id=mo_id,
            perform_vsan_upgrade_request_type=perform_vsan_upgrade_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vsan_upgrade_system_perform_vsan_upgrade_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        perform_vsan_upgrade_request_type: PerformVsanUpgradeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Start VSAN on-disk format upgrade process on a particular cluster. 

        Start VSAN on-disk format upgrade process on a particular cluster.  In order to perform this on-disk format upgrade, the upgrade process will perform a rolling evacuation/remove/re-add operation to accomplish the upgrade. In other words, one disk group at a time, it will evacuate the data from the disk group, then remove the old format from the now empty disk group, then reformat the disk group with the new format. Once all disk groups have been upgraded, and if the performObjectUpgrade parameter is set, the VSAN object version is also upgraded. Before the object version is upgraded, it is possible to downgrade the cluster by passing the downgradeFormat parameter. Once objects are of the new object version however, downgrade (and thus rollback) are no longer possible. The new object version is required to allow objects to benefit from new VSAN features. This is a long running (hours to days) task. In addition to normal task progress reporting, use the queryUpgradeStatus() API which allows to retrieve in-depth status updates from the upgrade process. In there will be a detailed log of every operation the upgrade process has taken or issues it encountered. Some are simple log messages, others refer to operations like evacuating a disk group. For such log entries, the task object of the evacuation task is provided to allow \"sub-task\" tracking. Before starting, the upgrade process will perform a pre-flight check, and abort if any of the pre-conditions are not met. See  See also *VsanUpgradeSystem.PerformVsanUpgradePreflightCheck*for details on the pre-conditions being checked for. The upgrade process performs additional \"pre-flight checks\" before proceeding to upgrade the next host. The upgrade process will be halted if any of those pre-flight checks fail. If the upgrade process has been halted due to a problem, or even due to a crash or other failure, it can be re-started at any point in time. The upgrade will resume where it left off and only do the parts that are still outstanding. If the upgrade process stopped after removing VSAN from a disk group, but before re-adding those disks to VSAN, the upgrade process can recover from that. The pre-flight check results indicate such a condition. The upgrade process will however only re-add those disks if the restoreBackup parameter is passed in as true. Privilege \"Host.Config.Storage\" on all hosts under specified cluster is required..  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param perform_vsan_upgrade_request_type: (required)
        :type perform_vsan_upgrade_request_type: PerformVsanUpgradeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_perform_vsan_upgrade_task_serialize(
            mo_id=mo_id,
            perform_vsan_upgrade_request_type=perform_vsan_upgrade_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vsan_upgrade_system_perform_vsan_upgrade_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        perform_vsan_upgrade_request_type: PerformVsanUpgradeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Start VSAN on-disk format upgrade process on a particular cluster. 

        Start VSAN on-disk format upgrade process on a particular cluster.  In order to perform this on-disk format upgrade, the upgrade process will perform a rolling evacuation/remove/re-add operation to accomplish the upgrade. In other words, one disk group at a time, it will evacuate the data from the disk group, then remove the old format from the now empty disk group, then reformat the disk group with the new format. Once all disk groups have been upgraded, and if the performObjectUpgrade parameter is set, the VSAN object version is also upgraded. Before the object version is upgraded, it is possible to downgrade the cluster by passing the downgradeFormat parameter. Once objects are of the new object version however, downgrade (and thus rollback) are no longer possible. The new object version is required to allow objects to benefit from new VSAN features. This is a long running (hours to days) task. In addition to normal task progress reporting, use the queryUpgradeStatus() API which allows to retrieve in-depth status updates from the upgrade process. In there will be a detailed log of every operation the upgrade process has taken or issues it encountered. Some are simple log messages, others refer to operations like evacuating a disk group. For such log entries, the task object of the evacuation task is provided to allow \"sub-task\" tracking. Before starting, the upgrade process will perform a pre-flight check, and abort if any of the pre-conditions are not met. See  See also *VsanUpgradeSystem.PerformVsanUpgradePreflightCheck*for details on the pre-conditions being checked for. The upgrade process performs additional \"pre-flight checks\" before proceeding to upgrade the next host. The upgrade process will be halted if any of those pre-flight checks fail. If the upgrade process has been halted due to a problem, or even due to a crash or other failure, it can be re-started at any point in time. The upgrade will resume where it left off and only do the parts that are still outstanding. If the upgrade process stopped after removing VSAN from a disk group, but before re-adding those disks to VSAN, the upgrade process can recover from that. The pre-flight check results indicate such a condition. The upgrade process will however only re-add those disks if the restoreBackup parameter is passed in as true. Privilege \"Host.Config.Storage\" on all hosts under specified cluster is required..  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param perform_vsan_upgrade_request_type: (required)
        :type perform_vsan_upgrade_request_type: PerformVsanUpgradeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_perform_vsan_upgrade_task_serialize(
            mo_id=mo_id,
            perform_vsan_upgrade_request_type=perform_vsan_upgrade_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vsan_upgrade_system_perform_vsan_upgrade_task_serialize(
        self,
        mo_id,
        perform_vsan_upgrade_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if perform_vsan_upgrade_request_type is not None:
            _body_params = perform_vsan_upgrade_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/VsanUpgradeSystem/{moId}/PerformVsanUpgrade_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vsan_upgrade_system_query_vsan_upgrade_status(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        query_vsan_upgrade_status_request_type: QueryVsanUpgradeStatusRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VsanUpgradeSystemUpgradeStatus:
        """Retrieve the latest status of a running, or the previously completed, upgrade process. 

        Retrieve the latest status of a running, or the previously completed, upgrade process.  Information about previous upgrade runs are not always, e.g. when VC gets restarted.  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param query_vsan_upgrade_status_request_type: (required)
        :type query_vsan_upgrade_status_request_type: QueryVsanUpgradeStatusRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_query_vsan_upgrade_status_serialize(
            mo_id=mo_id,
            query_vsan_upgrade_status_request_type=query_vsan_upgrade_status_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsanUpgradeSystemUpgradeStatus",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vsan_upgrade_system_query_vsan_upgrade_status_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        query_vsan_upgrade_status_request_type: QueryVsanUpgradeStatusRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VsanUpgradeSystemUpgradeStatus]:
        """Retrieve the latest status of a running, or the previously completed, upgrade process. 

        Retrieve the latest status of a running, or the previously completed, upgrade process.  Information about previous upgrade runs are not always, e.g. when VC gets restarted.  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param query_vsan_upgrade_status_request_type: (required)
        :type query_vsan_upgrade_status_request_type: QueryVsanUpgradeStatusRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_query_vsan_upgrade_status_serialize(
            mo_id=mo_id,
            query_vsan_upgrade_status_request_type=query_vsan_upgrade_status_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsanUpgradeSystemUpgradeStatus",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vsan_upgrade_system_query_vsan_upgrade_status_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        query_vsan_upgrade_status_request_type: QueryVsanUpgradeStatusRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve the latest status of a running, or the previously completed, upgrade process. 

        Retrieve the latest status of a running, or the previously completed, upgrade process.  Information about previous upgrade runs are not always, e.g. when VC gets restarted.  ***Since:*** vSphere API 6.0  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param query_vsan_upgrade_status_request_type: (required)
        :type query_vsan_upgrade_status_request_type: QueryVsanUpgradeStatusRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vsan_upgrade_system_query_vsan_upgrade_status_serialize(
            mo_id=mo_id,
            query_vsan_upgrade_status_request_type=query_vsan_upgrade_status_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsanUpgradeSystemUpgradeStatus",
            '500': "VsanFault"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vsan_upgrade_system_query_vsan_upgrade_status_serialize(
        self,
        mo_id,
        query_vsan_upgrade_status_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if query_vsan_upgrade_status_request_type is not None:
            _body_params = query_vsan_upgrade_status_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/VsanUpgradeSystem/{moId}/QueryVsanUpgradeStatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


