# coding: utf-8

"""
    Virtual Infrastructure JSON API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 8.0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr

from typing import List

from vmware_vi.models.configure_vcha_request_type import ConfigureVchaRequestType
from vmware_vi.models.create_passive_node_request_type import CreatePassiveNodeRequestType
from vmware_vi.models.create_witness_node_request_type import CreateWitnessNodeRequestType
from vmware_vi.models.deploy_vcha_request_type import DeployVchaRequestType
from vmware_vi.models.managed_object_reference import ManagedObjectReference
from vmware_vi.models.prepare_vcha_request_type import PrepareVchaRequestType
from vmware_vi.models.vcha_cluster_config_info import VchaClusterConfigInfo

from vmware_vi.api_client import ApiClient
from vmware_vi.api_response import ApiResponse
from vmware_vi.rest import RESTResponseType


class FailoverClusterConfiguratorApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def failover_cluster_configurator_configure_vcha_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        configure_vcha_request_type: ConfigureVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Configure VCHA on the local vCenter Server. 

        Configure VCHA on the local vCenter Server.  This operation configures the VC appliance with VCHA specific inputs and uses already deployed Passive and Witness nodes to set up the VCHA cluster. After configuration, the VCHA Cluster is enabled on a best effort basis, but if this operation does not succeed, *FailoverClusterManager.setClusterMode_Task* must be called to enable it. State replication or failover is not allowed until the VCHA Cluster is enabled. The current vCenter Server continues to serve client requests during and after the configuration.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param configure_vcha_request_type: (required)
        :type configure_vcha_request_type: ConfigureVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_configure_vcha_task_serialize(
            mo_id=mo_id,
            configure_vcha_request_type=configure_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_configure_vcha_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        configure_vcha_request_type: ConfigureVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Configure VCHA on the local vCenter Server. 

        Configure VCHA on the local vCenter Server.  This operation configures the VC appliance with VCHA specific inputs and uses already deployed Passive and Witness nodes to set up the VCHA cluster. After configuration, the VCHA Cluster is enabled on a best effort basis, but if this operation does not succeed, *FailoverClusterManager.setClusterMode_Task* must be called to enable it. State replication or failover is not allowed until the VCHA Cluster is enabled. The current vCenter Server continues to serve client requests during and after the configuration.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param configure_vcha_request_type: (required)
        :type configure_vcha_request_type: ConfigureVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_configure_vcha_task_serialize(
            mo_id=mo_id,
            configure_vcha_request_type=configure_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_configure_vcha_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        configure_vcha_request_type: ConfigureVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Configure VCHA on the local vCenter Server. 

        Configure VCHA on the local vCenter Server.  This operation configures the VC appliance with VCHA specific inputs and uses already deployed Passive and Witness nodes to set up the VCHA cluster. After configuration, the VCHA Cluster is enabled on a best effort basis, but if this operation does not succeed, *FailoverClusterManager.setClusterMode_Task* must be called to enable it. State replication or failover is not allowed until the VCHA Cluster is enabled. The current vCenter Server continues to serve client requests during and after the configuration.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param configure_vcha_request_type: (required)
        :type configure_vcha_request_type: ConfigureVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_configure_vcha_task_serialize(
            mo_id=mo_id,
            configure_vcha_request_type=configure_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_configure_vcha_task_serialize(
        self,
        mo_id,
        configure_vcha_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if configure_vcha_request_type is not None:
            _body_params = configure_vcha_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/configureVcha_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_create_passive_node_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        create_passive_node_request_type: CreatePassiveNodeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Creates a Passive node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node. 

        Creates a Passive node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param create_passive_node_request_type: (required)
        :type create_passive_node_request_type: CreatePassiveNodeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_create_passive_node_task_serialize(
            mo_id=mo_id,
            create_passive_node_request_type=create_passive_node_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_create_passive_node_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        create_passive_node_request_type: CreatePassiveNodeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Creates a Passive node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node. 

        Creates a Passive node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param create_passive_node_request_type: (required)
        :type create_passive_node_request_type: CreatePassiveNodeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_create_passive_node_task_serialize(
            mo_id=mo_id,
            create_passive_node_request_type=create_passive_node_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_create_passive_node_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        create_passive_node_request_type: CreatePassiveNodeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a Passive node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node. 

        Creates a Passive node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param create_passive_node_request_type: (required)
        :type create_passive_node_request_type: CreatePassiveNodeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_create_passive_node_task_serialize(
            mo_id=mo_id,
            create_passive_node_request_type=create_passive_node_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_create_passive_node_task_serialize(
        self,
        mo_id,
        create_passive_node_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_passive_node_request_type is not None:
            _body_params = create_passive_node_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/createPassiveNode_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_create_witness_node_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        create_witness_node_request_type: CreateWitnessNodeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Creates a Witness node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node. 

        Creates a Witness node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param create_witness_node_request_type: (required)
        :type create_witness_node_request_type: CreateWitnessNodeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_create_witness_node_task_serialize(
            mo_id=mo_id,
            create_witness_node_request_type=create_witness_node_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_create_witness_node_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        create_witness_node_request_type: CreateWitnessNodeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Creates a Witness node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node. 

        Creates a Witness node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param create_witness_node_request_type: (required)
        :type create_witness_node_request_type: CreateWitnessNodeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_create_witness_node_task_serialize(
            mo_id=mo_id,
            create_witness_node_request_type=create_witness_node_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_create_witness_node_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        create_witness_node_request_type: CreateWitnessNodeRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates a Witness node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node. 

        Creates a Witness node in a degraded VCHA Cluster with node location information and pre-existing VCHA Cluster configuration from the Active node.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param create_witness_node_request_type: (required)
        :type create_witness_node_request_type: CreateWitnessNodeRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_create_witness_node_task_serialize(
            mo_id=mo_id,
            create_witness_node_request_type=create_witness_node_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_create_witness_node_task_serialize(
        self,
        mo_id,
        create_witness_node_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_witness_node_request_type is not None:
            _body_params = create_witness_node_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/createWitnessNode_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_deploy_vcha_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        deploy_vcha_request_type: DeployVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Deploys and Configures VCHA on the local vCenter as a single API. 

        Deploys and Configures VCHA on the local vCenter as a single API.  This deployment operation automatically provisions and creates a Passive and a Witness node followed by configuring each node such that a 3 node VCHA Cluster is formed. After configuration, the VCHA Cluster is enabled on a best effort basis, but if this operation does not succeed, *FailoverClusterManager.setClusterMode_Task* must be called to enable it. State replication or failover is not allowed until the VCHA Cluster is enabled. The current vCenter Server continues to serve client requests during and after the deployment. If the activeVcNetworkConfig spec if filled in, the cluster network will be created and configured. No changes will be made if the cluster network is already configured.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param deploy_vcha_request_type: (required)
        :type deploy_vcha_request_type: DeployVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_deploy_vcha_task_serialize(
            mo_id=mo_id,
            deploy_vcha_request_type=deploy_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_deploy_vcha_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        deploy_vcha_request_type: DeployVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Deploys and Configures VCHA on the local vCenter as a single API. 

        Deploys and Configures VCHA on the local vCenter as a single API.  This deployment operation automatically provisions and creates a Passive and a Witness node followed by configuring each node such that a 3 node VCHA Cluster is formed. After configuration, the VCHA Cluster is enabled on a best effort basis, but if this operation does not succeed, *FailoverClusterManager.setClusterMode_Task* must be called to enable it. State replication or failover is not allowed until the VCHA Cluster is enabled. The current vCenter Server continues to serve client requests during and after the deployment. If the activeVcNetworkConfig spec if filled in, the cluster network will be created and configured. No changes will be made if the cluster network is already configured.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param deploy_vcha_request_type: (required)
        :type deploy_vcha_request_type: DeployVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_deploy_vcha_task_serialize(
            mo_id=mo_id,
            deploy_vcha_request_type=deploy_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_deploy_vcha_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        deploy_vcha_request_type: DeployVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deploys and Configures VCHA on the local vCenter as a single API. 

        Deploys and Configures VCHA on the local vCenter as a single API.  This deployment operation automatically provisions and creates a Passive and a Witness node followed by configuring each node such that a 3 node VCHA Cluster is formed. After configuration, the VCHA Cluster is enabled on a best effort basis, but if this operation does not succeed, *FailoverClusterManager.setClusterMode_Task* must be called to enable it. State replication or failover is not allowed until the VCHA Cluster is enabled. The current vCenter Server continues to serve client requests during and after the deployment. If the activeVcNetworkConfig spec if filled in, the cluster network will be created and configured. No changes will be made if the cluster network is already configured.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param deploy_vcha_request_type: (required)
        :type deploy_vcha_request_type: DeployVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_deploy_vcha_task_serialize(
            mo_id=mo_id,
            deploy_vcha_request_type=deploy_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_deploy_vcha_task_serialize(
        self,
        mo_id,
        deploy_vcha_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if deploy_vcha_request_type is not None:
            _body_params = deploy_vcha_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/deployVcha_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_destroy_vcha_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Destroys the VCHA cluster setup and removes all VCHA specific configuration from the VCVA appliance. 

        Destroys the VCHA cluster setup and removes all VCHA specific configuration from the VCVA appliance.  The active node in the cluster continues to run as a standalone VCVA appliance after the destroy operation has been performed. This operation is allowed under the following circumstances: \\- VCHA cluster is disabled \\- The node is in an isolated state \\- VCHA Deploy/Configure has failed  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_destroy_vcha_task_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_destroy_vcha_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Destroys the VCHA cluster setup and removes all VCHA specific configuration from the VCVA appliance. 

        Destroys the VCHA cluster setup and removes all VCHA specific configuration from the VCVA appliance.  The active node in the cluster continues to run as a standalone VCVA appliance after the destroy operation has been performed. This operation is allowed under the following circumstances: \\- VCHA cluster is disabled \\- The node is in an isolated state \\- VCHA Deploy/Configure has failed  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_destroy_vcha_task_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_destroy_vcha_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Destroys the VCHA cluster setup and removes all VCHA specific configuration from the VCVA appliance. 

        Destroys the VCHA cluster setup and removes all VCHA specific configuration from the VCVA appliance.  The active node in the cluster continues to run as a standalone VCVA appliance after the destroy operation has been performed. This operation is allowed under the following circumstances: \\- VCHA cluster is disabled \\- The node is in an isolated state \\- VCHA Deploy/Configure has failed  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_destroy_vcha_task_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_destroy_vcha_task_serialize(
        self,
        mo_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/destroyVcha_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_get_disabled_configure_method(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """A list of method names that must not be called and will throw a fault due to some other method running that the disabled method can cause side-effects for. 

        A list of method names that must not be called and will throw a fault due to some other method running that the disabled method can cause side-effects for.  This list may include the following methods: - *FailoverClusterConfigurator.deployVcha_Task* - *FailoverClusterConfigurator.configureVcha_Task* - *FailoverClusterConfigurator.createPassiveNode_Task* - *FailoverClusterConfigurator.createWitnessNode_Task* - *FailoverClusterConfigurator.destroyVcha_Task*    As with other disabled methods there will be no property updates on this property when called with non-zero property collector versions.  ***Since:*** vSphere API 6.5 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_get_disabled_configure_method_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_get_disabled_configure_method_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """A list of method names that must not be called and will throw a fault due to some other method running that the disabled method can cause side-effects for. 

        A list of method names that must not be called and will throw a fault due to some other method running that the disabled method can cause side-effects for.  This list may include the following methods: - *FailoverClusterConfigurator.deployVcha_Task* - *FailoverClusterConfigurator.configureVcha_Task* - *FailoverClusterConfigurator.createPassiveNode_Task* - *FailoverClusterConfigurator.createWitnessNode_Task* - *FailoverClusterConfigurator.destroyVcha_Task*    As with other disabled methods there will be no property updates on this property when called with non-zero property collector versions.  ***Since:*** vSphere API 6.5 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_get_disabled_configure_method_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_get_disabled_configure_method_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """A list of method names that must not be called and will throw a fault due to some other method running that the disabled method can cause side-effects for. 

        A list of method names that must not be called and will throw a fault due to some other method running that the disabled method can cause side-effects for.  This list may include the following methods: - *FailoverClusterConfigurator.deployVcha_Task* - *FailoverClusterConfigurator.configureVcha_Task* - *FailoverClusterConfigurator.createPassiveNode_Task* - *FailoverClusterConfigurator.createWitnessNode_Task* - *FailoverClusterConfigurator.destroyVcha_Task*    As with other disabled methods there will be no property updates on this property when called with non-zero property collector versions.  ***Since:*** vSphere API 6.5 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_get_disabled_configure_method_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_get_disabled_configure_method_serialize(
        self,
        mo_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/FailoverClusterConfigurator/{moId}/disabledConfigureMethod',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_get_vcha_config(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VchaClusterConfigInfo:
        """Returns the configuration information for each node that is part of the VCHA Cluster. 

        Returns the configuration information for each node that is part of the VCHA Cluster.  ***Since:*** vSphere API 6.5  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_get_vcha_config_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VchaClusterConfigInfo"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_get_vcha_config_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VchaClusterConfigInfo]:
        """Returns the configuration information for each node that is part of the VCHA Cluster. 

        Returns the configuration information for each node that is part of the VCHA Cluster.  ***Since:*** vSphere API 6.5  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_get_vcha_config_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VchaClusterConfigInfo"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_get_vcha_config_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns the configuration information for each node that is part of the VCHA Cluster. 

        Returns the configuration information for each node that is part of the VCHA Cluster.  ***Since:*** vSphere API 6.5  ***Required privileges:*** System.Read 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_get_vcha_config_serialize(
            mo_id=mo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VchaClusterConfigInfo"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_get_vcha_config_serialize(
        self,
        mo_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/getVchaConfig',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def failover_cluster_configurator_prepare_vcha_task(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        prepare_vcha_request_type: PrepareVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ManagedObjectReference:
        """Prepares the vCenter appliance for a VCHA cluster deployment. 

        Prepares the vCenter appliance for a VCHA cluster deployment.  This preparation operation saves the network configuration of the cluster and configures the Active node to be cloned for a VCHA configuration. Prepares the VCHA Active node for ssh keys, vpostgres replication and related configuration file setup needed for a VCHA cluster. If the Active node Cluster network adapter does not exist the prepare operation will fail. No changes will be made if the cluster is already configured.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param prepare_vcha_request_type: (required)
        :type prepare_vcha_request_type: PrepareVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_prepare_vcha_task_serialize(
            mo_id=mo_id,
            prepare_vcha_request_type=prepare_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def failover_cluster_configurator_prepare_vcha_task_with_http_info(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        prepare_vcha_request_type: PrepareVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ManagedObjectReference]:
        """Prepares the vCenter appliance for a VCHA cluster deployment. 

        Prepares the vCenter appliance for a VCHA cluster deployment.  This preparation operation saves the network configuration of the cluster and configures the Active node to be cloned for a VCHA configuration. Prepares the VCHA Active node for ssh keys, vpostgres replication and related configuration file setup needed for a VCHA cluster. If the Active node Cluster network adapter does not exist the prepare operation will fail. No changes will be made if the cluster is already configured.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param prepare_vcha_request_type: (required)
        :type prepare_vcha_request_type: PrepareVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_prepare_vcha_task_serialize(
            mo_id=mo_id,
            prepare_vcha_request_type=prepare_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def failover_cluster_configurator_prepare_vcha_task_without_preload_content(
        self,
        mo_id: Annotated[StrictStr, Field(description="A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`.")],
        prepare_vcha_request_type: PrepareVchaRequestType,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Prepares the vCenter appliance for a VCHA cluster deployment. 

        Prepares the vCenter appliance for a VCHA cluster deployment.  This preparation operation saves the network configuration of the cluster and configures the Active node to be cloned for a VCHA configuration. Prepares the VCHA Active node for ssh keys, vpostgres replication and related configuration file setup needed for a VCHA cluster. If the Active node Cluster network adapter does not exist the prepare operation will fail. No changes will be made if the cluster is already configured.  ***Since:*** vSphere API 6.5  ***Required privileges:*** Global.VCServer 

        :param mo_id: A unique identifier (within this vCenter Server instance) for a specific managed object such as `group-d1` or `vm-015` or `ServiceInstance`. (required)
        :type mo_id: str
        :param prepare_vcha_request_type: (required)
        :type prepare_vcha_request_type: PrepareVchaRequestType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._failover_cluster_configurator_prepare_vcha_task_serialize(
            mo_id=mo_id,
            prepare_vcha_request_type=prepare_vcha_request_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ManagedObjectReference"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _failover_cluster_configurator_prepare_vcha_task_serialize(
        self,
        mo_id,
        prepare_vcha_request_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mo_id is not None:
            _path_params['moId'] = mo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prepare_vcha_request_type is not None:
            _body_params = prepare_vcha_request_type


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Session'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FailoverClusterConfigurator/{moId}/prepareVcha_Task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


